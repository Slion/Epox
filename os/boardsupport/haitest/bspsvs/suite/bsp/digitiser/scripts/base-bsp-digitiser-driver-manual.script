//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName		base-bsp-digitiser-driver-manual
//! @SYMScriptTestEnvironment	This test script requires a base port ROM

/////////////////////////////////////////////////////////////////////
// base-bsp-digitiser-driver-manual.script
// Tests the Digitiser via validation TRawEvents and mouse positions retrieved
// for pen touches on the digitiser screen.
// The tests are manual.
/////////////////////////////////////////////////////////////////////

LOAD_SUITE	T_Digitiser
START_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0001
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0001
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!				TRawEvent::EButton1Down;
//!                             TRawEvent::EPointerMove;
//!				TRawEvent::EButton1Up
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		Set the display mode to default mode. 
//!                             Wait for user to touch an unlimited number of random pixels on the screen with a stylus.
//!				Highlight each pixel touch in black. 
//!				Wait for user to exit the screen by touching the exit box with stylus.
//!				Allow user to manually confirm if test has passed or failed, via a key press.
//! @SYMTestActions		1. Set the displaymode to the default mode.
//!                             2. Initialise and create the RConsole handle object.     
//!				3. Wait for user to touch a random pixel on the screen with a stylus.
//!				4. Highlight that pixel touch in black immediately.
//!                             5. repeat steps 3 & 4, until step 5 is processed.
//!				6. Wait for user to touch the black exit box, then exit the test scenario
//!				7. Wait for user to validate if testcase has passed or failed, via a keypress
//!				   (pass is dependant on the pass keypress see configuration file)
//!                             8. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	The user will manually verify that the test has passed, via a configurable keypress.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_Digitiser	\base\digitiser\base-bsp-digitiser-driver-manual.ini
		CREATE_OBJECT	HalData		digitiser1
		COMMAND		digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
		CREATE_OBJECT	RConsole	console1
		COMMAND		console1	new
		COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init
		COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn
		COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0001-Instructions
		COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0001-Read
		OUTSTANDING
		DELAY           5000
		COMMAND		console1	ClearScreen
		COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0001-WriteFeedback
		COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey
		OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
		COMMAND		console1	Destroy
		COMMAND		console1	Close
		COMMAND		console1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0001

START_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0002
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0002
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!				TRawEvent::EButton1Down;
//!                             TRawEvent::EPointerMove;
//!				TRawEvent::EButton1Up
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		Set the display mode to default mode. 
//!                             Wait for user to draw a straight line on the screen with a stylus.
//!				Highlight each pixel touch in black.
//!				Wait for user to exit the screen by touching the exit box with stylus.
//!				Allow user to manually confirm if test has passed or failed, via a key press.
//! @SYMTestActions		1. Set the displaymode to the default mode.
//!                             2. Initialise and create the RConsole handle object.    
//!				3. Wait for user to touch and draw a line on the screen with a stylus.
//!				4. Highlight that pixel touch in black immediately.
//!				5. Wait for user to touch the black exit box, then exit the test scenario
//!				6. Wait for user to validate if testcase has passed or failed, via a keypress
//!				   (pass is dependant on the pass keypress see configuration file)
//!                             7. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	The user will manually verify that the test has passed, via a configurable keypress.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_Digitiser	\base\digitiser\base-bsp-digitiser-driver-manual.ini
		CREATE_OBJECT	HalData		digitiser1
		COMMAND		digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
		CREATE_OBJECT	RConsole	console1
		COMMAND		console1	new
		COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init
		COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn
		COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0002-Instructions
		COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0002-Read
		OUTSTANDING
		DELAY           5000
		COMMAND		console1	ClearScreen
		COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0002-WriteFeedback
		COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey
		OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
		COMMAND		console1	Destroy
		COMMAND		console1	Close
		COMMAND		console1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0002

START_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0003
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0003
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!				TRawEvent::EButton1Down;
//!                             TRawEvent::EPointerMove;
//!				TRawEvent::EButton1Up
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		Set the display mode to default mode. 
//!                             Wait for user to touch an predefined pixels on the screen with a stylus.
//!                             (these predefined pixels are configurable).
//!				Highlight each pixel touch in black. 
//!                             Validate each pixel position and event recieved.
//!                             Position validation comparison is dependant on the
//!				margin of error in pixels defined by the user. For example
//!				a zero margin of error defines that the user has to match the exact pixel when
//!				touching the screen). This testcase uses a margin of error of 10 pixels,
//!				in both horizontal and vertical directions. This margin is configurable.
//!                             Validations are also made on the expected TRawEvent. This is the respective
//!				down event and the respective up event when touching a pixel
//!				on the digitiser screen. This test case expects the following TRawEvents 
//!				TRawEvent::EButton1Down (a pen down event) and TRawEvent::EButton1Up (a pen move event).
//!                             This testcase may also recieve a move event, this occurs if the digitser is sensitive, move events map to the TRawEvent
//!                             TRawEvent::EPointerMove(a pen move event),if this occurs move events are ignored.
//!				Wait for user to exit the screen by touching the exit box with stylus.
//! @SYMTestActions		1. Set the displaymode to the default mode
//!                             2. Initialise and create the RConsole handle object.   
//!				3. Read in a predefined pixel.
//!				4. Draw first pixel on onto the screen
//!				5. Wait for the user to touch the pixel on the screen
//!				6. Store TRawEvent triggered and mouse positions.
//!				7. Draw the next predefined pixel on to the screen.
//!				8. Repeat steps 3-5 until predefined pixels have all been drawn
//!				or until user presses the black exit box.
//!				9. Compare users pixel co-ordinates and TRawEvents triggered.
//!                             10. Clean up and Destroy the RConsole Handle object.
//!				with expected.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	The TRawEvent:EButton1Down and TRawEvent::EButton1Up are recieved
//!				in that order for each pixel touch on the digitiser. If the digitser is sensitive  move event(s) 
//!                             TRawEvent::EPointerMove, may be recieved in between each pen down and pen up event, this is ignored. 
//!                             Pixel co-ordinates match with expected pixels respective to the margin of error used.
//! @SYMTestType		CIT
	START_TEST_BLOCK	5000		T_Digitiser	\base\digitiser\base-bsp-digitiser-driver-manual.ini
		CREATE_OBJECT	HalData		digitiser1
		COMMAND		digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
		CREATE_OBJECT	RConsole	console1
		COMMAND		console1	new
		COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init
		COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn
		COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0003-Instructions
		COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0003-Read
		OUTSTANDING
		DELAY           5000
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
		COMMAND		console1	Destroy
		COMMAND		console1	Close
		COMMAND		console1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0003

START_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0004
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0004
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!				TRawEvent::EButton1Down;
//!                             TRawEvent::EPointerMove;
//!				TRawEvent::EButton1Up
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		Set the display mode to default mode. 
//!                             Draw a predefined (configurable) bounding rectangle on the screen and wait for 
//!                             user to draw a line within this rectangle. Highlight this line drawn in black.
//!				Validate that all mouse positions retrieved are within this bounding  rectangle.
//!				( Please note that this comparison is dependant on the
//!				bounding rectangle).
//!				Validate each event recieved when drawing this line. This is the respective
//!				down event, move event and up event. We should recieve events in this order
//!                             TRawEvent::EButton1Down, TRawEvent::EPointerMove and TRawEvent::EButton1Up,
//!                             with the number of move events as unknown quantity, but a minumum of one.
//! @SYMTestActions		1. Set the displaymode to the default mode
//!                             2. Initialise and create the RConsole handle object.  
//!				3. Read in a predefined configurable bounding rectangle.
//!				4. Draw this rectangle on onto the screen.
//!				5. Wait for the user to draw a line within this bounding rectangle. 
//!			        6. Compare users pixel co-ordinates and TRawEvents triggered with expected.
//!				7. Wait for the user to touch the ethe black exit box.
//!                             8. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	The TRawEvent::EButton1Down, TRawEvent::EPointerMove, TRawEvent::EButton1Up are recieved
//!				in that order on the line, the number of TRawEvent::EPointerMove recieved, after a TRawEvent::EButton1Down event
//!				is random.
//!				Pixel co-ordinates are withing the bounding rectangle.
//! @SYMTestType		CIT
	START_TEST_BLOCK	400		T_Digitiser	\base\digitiser\base-bsp-digitiser-driver-manual.ini
		CREATE_OBJECT	HalData		digitiser1
		COMMAND		digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
		CREATE_OBJECT	RConsole	console1
		COMMAND		console1	new
		COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init
		COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn
		COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0004-Instructions
		COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0004-Read
		OUTSTANDING
		DELAY           5000
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
		COMMAND		console1	Destroy
		COMMAND		console1	Close
		COMMAND		console1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-DIGITISER-DRIVER-MANUAL-0004

START_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0005
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0005
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!                             Hal::Set(EPenState, TInt);   
//!                             TDigitiserHalFunction::EDigitiserHalXYState;
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		Pen State Manual Test 
//!                             Set the display mode to default mode. 
//!                             Disable the the Pen State for the digitiser. 
//!                             Wait for a pen event to be recieved.
//!                             Validate with user if pen event was recieved,and to fail the test if it was.
//!				Uses API elements: HAL::Set, EDigitiserHalXYState
//! @SYMTestActions    		1. Set the displaymode to the default mode
//!                             2. Initialise and create the RConsole handle object. 
//!                             3. Disable the EPenState (value is 0) using HAL:Set.
//!				4. Get EPenState using HAL::Get,and validate that it is disabled in step 3.
//!                             5. Wait for user to touch the digitiser. No TRawEvent should be triggered
//!                                Read should timeout.  
//!                             6. If in step 5 a TRawevent is triggered highlight the pixel touched.
//!				7. Wait for user to validate if testcase has passed or failed, via a keypress
//!				   (pass is dependant on the pass keypress see configuration file)
//!                             8. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Digitiser State (touch Screen state) is disabled. Read should timeout and cancel with 
//!                             a -3 AsyncError code. No TRawEvent should be triggered. 
//! @SYMTestType		CIT
	START_TEST_BLOCK	300	T_Digitiser		\base\digitiser\base-bsp-digitiser-driver-manual.ini
	        CREATE_OBJECT	HalData digitiser1
                COMMAND	                digitiser1	Set             BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
                COMMAND	                digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0005-PenState
                COMMAND	                digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0005-PenState
                CREATE_OBJECT	        RConsole	console1
                COMMAND		        console1	new
                COMMAND		        console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init
                COMMAND		        console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn                
                COMMAND		        console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0005-PenState 
                COMMAND	 !AsyncError=-3 console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0005-PenState
                OUTSTANDING
                COMMAND		        console1	ClearScreen
                COMMAND                 console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0005-WriteFeedback
                COMMAND		        console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-WriteFeedback
	        COMMAND		        console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey       
                OUTSTANDING
                COMMAND		        console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
		COMMAND		        console1	Destroy
		COMMAND		        console1	Close
		COMMAND		        console1	~
        END_TEST_BLOCK
END_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0005

START_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0006
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0006
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!                             HAL::Set(EPenState, TInt);    
//!                             HAL::Get(EPenState, TInt{ref}) ;
//!                             TDigitiserHalFunction::EDigitiserHalXYState;
//!                             TRawEvent::EButton1Down;	
//!                             TRawEvent::EButton1Up
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		Pen State Test 
//!                             Set the display mode to default mode. 
//!                             Enable the the Pen State for the digitiser.  
//!                             Wait for a pen event to be recieved.
//!                             Validate with user if pen event was recieved and to pass the test, if it was.                      
//!				Uses API elements: HAL::Set, EDigitiserHalXYState
//! @SYMTestActions    		1. Set the displaymode to the default mode
//!                             2. Initialise and create the RConsole handle object. 
//!                             3. Enable the EPenState (value is 1) using HAL:Set.
//!				4. Get EPenState using HAL::Get, and validate that it is enabled (value is 1) in step 4.
//!                             5. Wait for user to touch the digitiser (A TRawEvent should be triggered).
//!                                and the Read should NOT timeout.  
//!                             6. If in step 5 a TRawevent is triggered highlight the pixel touched.
//!				7. Wait for user to validate if testcase has passed or failed, via a keypress
//!				   (pass is dependant on the pass keypress see configuration file)
//!                             8. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Digitiser State (touch Screen state) is enabled.  A TRawEvent should be triggered, 
//!                             highlighting the pixel touched.
//!                             Read should NOT timeout
//! @SYMTestType		CIT
	START_TEST_BLOCK	300	T_Digitiser		\base\digitiser\base-bsp-digitiser-driver-manual.ini
	        CREATE_OBJECT	HalData         digitiser1
                COMMAND	        digitiser1	Set             BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0006-PenState
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0006-PenState
                CREATE_OBJECT	RConsole	console1
                COMMAND		console1	new
                COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init            
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn 
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0006-PenState                
                COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0006-PenState
                OUTSTANDING
                COMMAND		console1	ClearScreen
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0006-WriteFeedback
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-WriteFeedback
	        COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey     
                OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
                COMMAND		console1	Destroy
		COMMAND		console1	Close
		COMMAND		console1	~
        END_TEST_BLOCK
END_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0006

START_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0007
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0007
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!                             HAL::Set(EPenState, TInt);    
//!                             HAL::Get(EPenState, TInt{ref});
//!                             HAL::Get(EPenClick, TInt{ref}); 
//!                             TSoundHalFunction::ESoundHalPointerClickEnabled
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		EPenClick Test
//!                             Set the display mode to default mode.
//!                             Digitiser should support production of click sound,
//!                             if retrieval of EPenClickState is value 1.
//!                             Confirm whether digitiser supports
//!                             production of click sound via the setting and retrieval of EPenClick value 0.   
//!				Uses API elements:HAL::Get, ESoundHalPointerClickEnabled
//! @SYMTestActions    		1. Set the displaymode to the default mode
//!                             2. Initialise and create the RConsole handle object. 
//!                             3. Enable the EPenClickState (value is 1) using HAL:Set
//!                             4. Confirm the EPenClickState (value is 1) using HAL:Set
//!                             5. Enable the EPenState (value is 1) using HAL:Set.
//!                             6. Confirm the EPenState (value is 1) using HAL:Get.
//!                             7. Set the click sound to on for pen tap's in digitiser and validate that it is as expected.
//!                                in step 8 & 9, using EPenClick value as 1, using HAL:Set
//!                             8. Wait for user to touch the digitiser. (A TRawEvent should be triggered)
//!				9. If A TRawevent is triggered ask the user to validate if a click sound was not heard as
//!                                as EPenClick is value 0. Validation is via a keypress
//!				   (pass is dependant on the pass keypress see configuration file)
//!                                If no TrawEvent is triggered timeout the read in step 8 and fail the testcase.
//!				10. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Click sound is heard if EPenClick is enabled.
//!                             The device can produce a click sound.
//! @SYMTestType		CIT
              START_TEST_BLOCK	300	T_Digitiser		\base\digitiser\base-bsp-digitiser-driver-manual.ini
		CREATE_OBJECT	HalData          digitiser1
                COMMAND	        digitiser1	Set             BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-PenClickState 
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0007-PenClick 
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0007-PenClick 
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EPenState_Setup
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EPenState_Setup
                CREATE_OBJECT	RConsole	console1
                COMMAND		console1	new
                COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init            
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn 
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0007-PenClick                 
                COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0007-PenClick 
                OUTSTANDING
                COMMAND		console1	ClearScreen
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0007-WriteFeedback
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-WriteFeedback
	        COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey              
                OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
                COMMAND		console1	Destroy
		COMMAND		console1	Close
                COMMAND		console1	~
        END_TEST_BLOCK
END_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0007

START_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0008
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!                             HAL::Set(EPenState, TInt);    
//!                             HAL::Get(EPenState, TInt{ref});
//!                             HAL::Get(EPenClick, TInt{ref}); 
//!                             TSoundHalFunction::ESoundHalPointerClickEnabled
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		EPenClick Test
//!                             Set the display mode to default mode.
//!                             Digitiser should support  production of click sound,
//!                             if retrieval of EPenClickState is value 1.
//!                             Confirm whether digitiser supports
//!                             production of click sound via the setting and retrieval of EPenClick value 0.   
//!				Uses API elements:HAL::Get, ESoundHalPointerClickEnabled
//! @SYMTestActions    		1. Set the displaymode to the default mode
//!                             2. Initialise and create the RConsole handle object. 
//!                             3. Enable the EPenClickState (value is 1) using HAL:Set
//!                             4. Confirm the EPenClickState (value is 1) using HAL:Set
//!                             5. Enable the EPenState (value is 1) using HAL:Set.
//!                             6. Confirm the EPenState (value is 1) using HAL:Get.
//!                             7. Set the click sound to off for pen tap's in digitiser and validate that it is as expected.
//!                                in step 8 & 9, using EPenClick value as 0, using HAL:Set
//!                             8. Wait for user to touch the digitiser. (A TRawEvent should be triggered)
//!				9. If A TRawevent is triggered ask the user to validate if a click sound was not heard as
//!                                as EPenClick is value 0. Validation is via a keypress
//!				   (pass is dependant on the pass keypress see configuration file)
//!                                If no TrawEvent is triggered timeout the read in step 8 and fail the testcase.
//!				10. Clean up and Destroy the RConsole Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Click sound is heard if EPenClick is enabled.
//!                             The device can produce a click sound.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	Click sound is heard if EPenClick is enabled, click sound is not heard if EPenClick is disabled.
//!                             The device cannot produce a click sound.
//! @SYMTestType		CIT
              START_TEST_BLOCK	300	T_Digitiser		\base\digitiser\base-bsp-digitiser-driver-manual.ini
		CREATE_OBJECT	HalData          digitiser1
                COMMAND	        digitiser1	Set             BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EPenState_Setup
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EPenState_Setup
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-PenClickState
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-PenClick 
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-PenClick 
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-Setup 
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-Setup 
                CREATE_OBJECT	RConsole	console1
                COMMAND		console1	new
                COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init            
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn 
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-PenClick                 
                COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-PenClick 
                OUTSTANDING
                COMMAND		console1	ClearScreen
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0008-WriteFeedback
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-WriteFeedback
                COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey              
                OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
                COMMAND		console1	Destroy
		COMMAND		console1	Close
                COMMAND		console1        ~
        END_TEST_BLOCK
END_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0008

START_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0011
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0011
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!                             HAL::Get(EPenDisplayOn, TInt{ref}); 
//!                             HAL::Set(EPenDisplayOn, TInt);
//!                             HAL::Set(EDisplayState,TInt);
//!                             HAL::Get(EDisplayState, TInt{ref});
//!                             TPowerHalFunction::EPowerHalPointerSwitchesOn;
//!                             TPowerHalFunction::EPowerHalSetPointerSwitchesOn
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		EPenDisplayOn Test
//!                             Set the display mode to default mode.
//!                             Set the pen tap state to enabled. 
//!                             Retrieve the pen tap state. Delay the testcase by 9 seconds to cause the screen to switch off.
//!                             validate that a pen tap switches the display on, via a pen tap and user input.
//!				Uses API elements:HAL::Get,EPowerHalSetPointerSwitchesOn,EPowerHalPointerSwitchesOn
//! @SYMTestActions    		1. Set the displaymode to the default mode
//!                             3. Set the DisplayState using Hal::Set to on
//!                             4. Get the DisplayState using Hal::Set and confirm if on.
//!                             5. Set EPenDisplayOn (pen tap state) to on  using Hal::Set.
//!                             6. Get EPenDisplayOn (pen tap state) using Hal::Get and validate that it is as expected.
//!                             7. Wait for the maximum timeout speciifed to allow the display to switch off.
//!                             8. Wait for user to touch the digitiser. (A TRawEvent should be triggered).
//!                             9. If A TRawevent is triggered, validate the display state,
//!                                by asking the user to validate if a pen tap switched the display on.
//!                                User validation is via a keypress (pass is dependant on the pass keypress see configuration file).    
//!                                If no TrawEvent is triggered timeout the read in step 8 and fail the test.             
//!                             10. Set the DisplayState using Hal::Set to on
//!                             11. Get the DisplayState using Hal::Get and confirm if on.
//!				12. Destroy the HAL Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	A Pen tap or press enables the display.
//! @SYMTestType		CIT
	START_TEST_BLOCK	500	T_Digitiser		\base\digitiser\base-bsp-digitiser-driver-manual.ini
                CREATE_OBJECT	HalData         digitiser1
                COMMAND	        digitiser1	Set             BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0011-EPenDisplayOn 
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0011-EPenDisplayOn 
                CREATE_OBJECT	RConsole	console1
                COMMAND		console1	new
                COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init            
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn 
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0011-EPenDisplayOn
                DELAY           6000000
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOff
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOff
                COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0011-EPenDisplayOn
                OUTSTANDING
                DELAY           1000000
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND		console1	ClearScreen                
                COMMAND		console1	ClearScreen
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0011-WriteFeedback
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-WriteFeedback
	        COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey   
                OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
                COMMAND		console1	Destroy
		COMMAND		console1	Close
                COMMAND		console1        ~         
        END_TEST_BLOCK
END_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0011

START_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0012
//! @SYMTestCaseID		BASE-BSP-DIGITISER-DRIVER-MANUAL-0012
//! @SYMAPI			HAL::Set(EDisplayMode, TInt);
//!                             HAL::Get(EPenDisplayOn, TInt{ref});
//!                             HAL::Set(EPenDisplayOn, TInt);
//!                             HAL::Set(EDisplayState,TInt);
//!                             HAL::Get(EDisplayState, TInt{ref});
//!                             TPowerHalFunction::EPowerHalPointerSwitchesOn;
//!                             TPowerHalFunction::EPowerHalSetPointerSwitchesOn
//! @SYMAuthor			Rehana Anwar
//! @SYMCreationDate		03/04/2008
//! @SYMTestCaseDesc		EPenDisplayOn Test
//!                             Set the display mode to default mode.
//!                             Set the pen tap state to disabled. 
//!                             Retrieve the pen tap state. Delay the testcase by 9 seconds to cause the screen to switch off.
//!                             Validate that a pen tap  does not switch the display on, via a pen tap and user input.
//!				Uses API elements:HAL::Get,EPowerHalSetPointerSwitchesOn,EPowerHalPointerSwitchesOn
//! @SYMTestActions    		1. Set the displaymode to the default mode
//!                             3. Set the DisplayState using Hal::Set to on
//!                             4. Get the DisplayState using Hal::Get and confirm if on.
//!                             5. Set EPenDisplayOn (pen tap state) to off using Hal::Set.
//!                             6. Get EPenDisplayOn (pen tap state) using Hal::Get and validate that it is as expected.
//!                             7. Wait for the maximum timeout speciifed to allow the display to switch off.
//!                             8. Wait for user to touch the digitiser. (A TRawEvent should be not be triggered).
//!                             9. If A TRawevent is triggered, fail the testcase,
//!                                by asking the user to validate if a pen tap switched the display on.
//!                                User validation is via a keypress (pass is dependant on the pass keypress see configuration file).    
//!                                If no TrawEvent is triggered timeout and cancel the read in step 8 and pass the test.             
//!                             10. Set the DisplayState using Hal::Set to on
//!                             11. Get the DisplayState using Hal::Get and confirm if on.
//!				12. Destroy the HAL Handle object.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults  	A pen tap has no effect, on the display state
//!                             Read should timeout and cancel with 
//!                             a -3 AsyncError code. No TRawEvent should be triggered. 
//! @SYMTestType		CIT
	START_TEST_BLOCK	500	T_Digitiser		\base\digitiser\base-bsp-digitiser-driver-manual.ini
                CREATE_OBJECT	        HalData         digitiser1
                COMMAND	        digitiser1	Set             BASE-BSP-DIGITISER-DRIVER-DISPLAYMODE_MANUAL
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-0012-EPenDisplayOn 
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-0012-EPenDisplayOn 
                CREATE_OBJECT   RConsole	console1
                COMMAND		console1	new
                COMMAND		console1	Init		BASE-BSP-DIGITISER-DRIVER-MANUAL-Init            
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-ControlOn 
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0012-EPenDisplayOn
                DELAY           6000000
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOff
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOff
                COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-0012-EPenDisplayOn
                OUTSTANDING
                DELAY           1000000
                COMMAND	        digitiser1	Set		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND	        digitiser1	Get		BASE-BSP-DIGITISER-DRIVER-MANUAL-EDisplayStateOn
                COMMAND		console1	ClearScreen
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-0012-WriteFeedback
                COMMAND		console1	Write		BASE-BSP-DIGITISER-DRIVER-MANUAL-WriteFeedback
	        COMMAND		console1	Read		BASE-BSP-DIGITISER-DRIVER-MANUAL-ReadKey   
                OUTSTANDING
                COMMAND		console1	Control		BASE-BSP-DIGITISER-DRIVER-MANUAL-RAWMODEOFF
                COMMAND		console1	Destroy
		COMMAND		console1	Close
                COMMAND		console1        ~              
        END_TEST_BLOCK
END_TESTCASE 			BASE-BSP-DIGITISER-DRIVER-MANUAL-0012

# This is the global environment file to configure the touch-screen test suite on a specific device
# The current default touch screen test suite values are configured for TI OMAP 2420 (H4) hardware digitiser device
# Licencees may need to configure below values to specific devices and also where applicable,
# check supported HAL Enum's


[generic]

# A timeout value in microseconds. 
# This is a 10 second timeout used in the manual testcases
minTimeout                      =1000000

# A timeout value in microseconds. 
# This is a 50 second timeout used in the manual testcases
maxTimeout                      =5000000

# Defines the error margin in pixels that the digitiser test suite will cater for.
errorMargin                     =10


# A hexadecimal value used to represent keycode values used in tests where manual confirmation 
# is required via a key press. 
# The keycode value represents the TKeyCode enum value, by default the hexadecimal value
# used in this suite is the 'one' key.
# (Please note that some of these mappings are device dependant).
keyCode                         =0x0031

[confirm]
instructions                    =Press the number one key to pass the test case. Any key to fail.

[exitBox]
# Defines the horizontal co-ordinate value for the positioning of the exit box.
minX                      =10

# Defines the vertical co-ordinate  value for the positioning of the exit box.
minY                      =100

# Defines the horizontal co-ordinate value for the positioning of the exit box.
maxX                      =40

# Defines the vertical co-ordinate  value for the positioning of the exit box.
maxY                      =120


[randomPixels]
# Defaults values used in the scenario where the user has
# to touch any pixel on the screen with a stylus, and manually confirm if a test has passed.
instructions                    =Touch any number of screen pixels randomly with stylus. To exit testcase hit the exit box.
pixelfeedback                   =Did the pixels hightlight correctly? Press the number one key to pass the test case. Any key to fail.

# Defines the number of pixels that will need to be verified. In the default scenario we are using -1 to indicate an unlimited number of 
# pixels, for example here the use of the number 3 would indicate three pixels to verify.
pointsTotal                     =-1

[randomLine]
instructions                    =Draw a straight line from any point to any point. To exit testcase hit the exit box.
pixelfeedback                   =Did correct pixels hightlight? Press the number one key to pass the test case. Any key to fail.

# Defines the number of pixels that will need to be verified. In the default scenario we are using -1 to indicate an unlimited number of 
# pixels
pointsTotal                     =3

[preDrawnDots]
# Defaults values used in the scenario when pixels are predrawn on the screen, and the user has
# to touch each pixel with a stylus.
instructions                    =Touch the inside the drawn rectangle. To exit testcase hit the exit box

# Defines the number of pixels that will be predrawn on the screen ready to verify.
pointsTotal                     =3

# Define the predrawn co-ordinates here there are 3 but this can be increased by adding further values
# i.e 4_x and so forth
1_x		                =30
1_y		                =210

2_x		                =180
2_y		                =60

3_x		                =200
3_y		                =300


[preDrawnRect]
# Defaults values used in the scenario when pixels are predrawn on the screen, and the user has
# to touch each pixel with a stylus.

instructions                    =With stylus, draw a line within this box. To exit testcase hit the exit box

# Defines the number of pixels that will be predrawn on the screen ready to verify
eventTotal                     =3

# Default values used in the scenario where a line is predrawn on the screen, and the user has
# to follow the line with a stylus. the values below indicate the defualt Top left and bottom right of that rect
tl_x                             =80
tl_y                             =180

br_x                             =200
br_y                             =200

[colour]
# The mask value of the colour black
black                           =0x00
# The mask value of the colour white
white                           =0xFF

[displayMode]
# Define  the mode display mode for the  screen to use in these tests
value                           ={displayMode,defaultmode}  
expected                        ={displayMode,defaultmode} 

# Define  the default mode display mode for the  screen
defaultmode                     ={displayMode,mode3}  

# Define  display mode for the  screen
mode0                           =0

# Define  display mode for the  screen
mode1                           =1

# Define  display mode for the  screen
mode2                           =2

# Define  display mode for the  screen
mode3                           =7

# Define  display mode for the  screen
mode4                           =4

[haldata]

# Default value of the the pen/digitizer horizontal resolution, in pixels
ePenXValue                     =365

# Default value of the pen/digitizer vertical resolution, in pixels.
ePenYValue                     =280

[halDataOff]
# Default value of the the HAL Data to set or get. 
value                   =0
expected                =0

[halDataOn]
# Default value of the the HAL Data to set or get
value                   =1
expected                =1
                           
[rawEvent]
# Defines the Enum strings used by TRawEvent.

# Represents an uninitialised event object.
none                            =ENone     

# EPointerMove A pointer device (e.g. a pen) has moved. Only changes in Cartesian coordinates are tracked.
pointerMove  		        =EPointerMove

# A switch on event caused by a screen tap using a pointer device.
pointerSwitchOn                 =EPointerSwitchOn 

# Represents a keyboard key down event. 
keyDown                         =EKeyDown 

#Represents a keyboard key up event.
keyUp                           =EKeyUp 

# Represents a redraw event.
redraw                          =ERedraw 

# Represents a device switch on event.
switchOn                        =ESwitchOn 

active                          =EActive 
 
inactive                        =EInactive 
 
# Represents a modifier key being pressed.
updateModifiers                 =EUpdateModifiers

# Represents a button down event. This is typically used to represent a pointing device coming into contact with a touch sensitive screen
button1Down  		       =EButton1Down

# Represents a button up event. This is typically used to represent a pointing device being lifted away from a touch sensitive screen.
button1Up                       =EButton1Up

# Represents a button down event. This is typically used to represent a pointing device coming into contact with a touch sensitive screen.
button2Down                    =EButton2Down 

# Represents a button up event. This is typically used to represent a pointing device being lifted away from a touch sensitive screen.
button2Up                      =EButton2Up 

# Represents a button down event. This is typically used to represent a pointing device coming into contact with a touch sensitive screen.
button3Down                    =EButton3Down 

# Represents a button up event. This is typically used to represent a pointing device being lifted away from a touch sensitive screen.
button3Up                      =EButton3Up 

# Represents a device switch off event.
switchOff                      =ESwitchOff 
 
# Represents a key being continually pressed event.
keyRepeat                      =EKeyRepeat
 
# Represents a case open event. The meaning of a case is hardware specific.
caseOpen                       =ECaseOpen

# Represents a case close event. The meaning of a case is hardware specific. 
caseClose                      =ECaseClose 

# Represents a device restart 
restartSystem                  =ERestartSystem 
 

//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

LOAD_SUITE	T_mmcsd


START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0001
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0001
//! @SYMAPI			User::LoadLogicalDevice(const TDesC {ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Load Logical Device Driver.
//! @SYMTestActions    		Load D_MMCSDIF LDD Driver
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults  	KErrNone
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	LoadDriver		BASE-BSP-SD-SOCKET-DRIVER-0001-001-LoadDriver_command02
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0001

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0002
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0002
//! @SYMAPI			DMMCSocket::Reset1();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Reset1 Test - Reset the socket by powering down the stack.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Reset the socket by powering down the stack
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	The socket is reset with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0002-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0002-001-NewL_command02
		COMMAND		mmcsdsocket1	Reset1
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0002

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0003
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0003
//! @SYMAPI			DMMCSocket::Reset2();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Reset2 Test - Reset the socket and free up allocated resources.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Reset the socket by powering down the stack
//!				4. Reset the socket and free up allocated resources
//!				5. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	The socket is reset with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0003-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0003-001-NewL_command02
		COMMAND		mmcsdsocket1	Reset1
		COMMAND		mmcsdsocket1	Reset2
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0003

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0004
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0004
//! @SYMAPI			DMMCSocket::Stack(TInt);
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Stack Pointer Test - Get a pointer to a DMMCStack object.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get a pointer to a DMMCStack object for MMC card number 1
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	The stack pointer is returned with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0004-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0004-001-NewL_command02
		COMMAND		mmcsdsocket1	Stack			BASE-BSP-SD-SOCKET-DRIVER-0004-001-Stack_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0004

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0005
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0005
//! @SYMAPI			DMMCSocket::ResetInactivity(TInt);
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Reset inactivity timer Test - Reset socket's PSU inactivity timer.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Reset socket's PSU inactivity timer
//!				4. Verify the bus inactivity count
//!				5. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	PSU inactivity timer is reset with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDPsu	mmcsdpsu1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0005-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0005-001-NewL_command03
		COMMAND		mmcsdpsu1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0005-001-NewL_command03
		COMMAND		mmcsdsocket1	ResetInactivity		BASE-BSP-SD-SOCKET-DRIVER-0005-001-ResetInactivity_command04
		COMMAND		mmcsdpsu1	PsuInfo			BASE-BSP-SD-SOCKET-DRIVER-0005-001-PsuInfo_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdpsu1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0005

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0006
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0006
//! @SYMAPI			DMMCSocket::MachineInfo();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		MachineInfo Test - Get the MachineInfo from the PSL.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get the MachineInfo from the PSL
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	MachineInfo is retrieved and contains the correct values.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0006-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0006-001-NewL_command02
		COMMAND		mmcsdsocket1	MachineInfo		BASE-BSP-SD-SOCKET-DRIVER-0006-001-MachineInfo_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0006

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0007
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0007
//! @SYMAPI			DMMCSocket::AdjustPartialRead(const TMMCard{ptr}, TUint32, TUint32, TUint32{ptr}, TUint32{ptr});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Adjust Partial Read Test - Calculate minimum range that must be read off card.
//! @SYMTestActions    		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get pointer to card
//!				4. Calculate minimum range that must be read off card
//!				5. Destroy the objects
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Minimum range that must be read off card is correctly returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDStack	mmcsdstack1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0007-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0007-001-NewL_command03
		COMMAND		mmcsdstack1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0007-001-NewL_command03
		COMMAND		mmcsdstack1	CardP			BASE-BSP-SD-SOCKET-DRIVER-0007-001-CardP_command04
		COMMAND		mmcsdsocket1	AdjustPartialRead	BASE-BSP-SD-SOCKET-DRIVER-0007-001-AdjustPartialRead_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdstack1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0007

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0008
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0008
//! @SYMAPI			DMMCSocket::GetBufferInfo(TUint8{ptr}{ptr}, TInt{ptr});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Get Buffer Info Test - Get details of the buffer allocated by socket for data transfer operations.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get details of the buffer allocated by socket for data transfer operations
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Correct buffer details are returned with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0008-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0008-001-NewL_command02
		COMMAND		mmcsdsocket1	GetBufferInfo		BASE-BSP-SD-SOCKET-DRIVER-0008-001-GetBufferInfo_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0008

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0009
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0009
//! @SYMAPI			DMMCSocket::PrepareStore(TInt, TInt, TLocalDrivePasswordData{ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Prepare Store Test - Prepare store so mappings can be allocated or deallocated.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Prepare store so mappings can be allocated or deallocated, using operation EPasswordClear
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Store is prepared with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0009-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0006-001-NewL_command02
		COMMAND		mmcsdsocket1	PrepareStore		BASE-BSP-SD-SOCKET-DRIVER-0009-001-PrepareStore_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0009

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0010
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0010
//! @SYMAPI			DMMCSocket::Init();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		15/05/2008
//! @SYMTestCaseDesc		Initialise Test - Allocate resources and initialise the MMC socket and associated stack object.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Allocate resources and initialise the MMC socket and associated stack object
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	MMC socket initialised with no error.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0010-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0010-001-NewL_command02
		COMMAND		mmcsdsocket1	Init
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0010

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0011
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0011
//! @SYMAPI			DMMCSocket::Init();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		15/05/2008
//! @SYMTestCaseDesc		Initialise Test - Allocate resources and initialise the MMC socket and associated stack object.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Allocate resources and initialise the MMC socket and associated stack object
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	MMC socket initialised with error KErrAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK		100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT		MMCSDSession	mmcsdsession1
		CREATE_OBJECT		MMCSDSocket	mmcsdsocket1
		COMMAND			mmcsdsession1	NewL
		COMMAND			mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0011-001-DriverOpen_command01
		COMMAND			mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0011-001-NewL_command02
		COMMAND	!Error=-11	mmcsdsocket1	Init
		COMMAND			mmcsdsession1	Close
		COMMAND			mmcsdsocket1	~
		COMMAND			mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0011

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0012
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0012
//! @SYMAPI			DMMCSocket::Init();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		15/05/2008
//! @SYMTestCaseDesc		Initialise Test - Allocate resources and initialise the MMC socket and associated stack object.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Allocate resources and initialise the MMC socket and associated stack object
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	MMC socket initialised with error KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK		100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT		MMCSDSession	mmcsdsession1
		CREATE_OBJECT		MMCSDSocket	mmcsdsocket1
		COMMAND			mmcsdsession1	NewL
		COMMAND			mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0011-001-DriverOpen_command01
		COMMAND			mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0011-001-NewL_command02
		COMMAND	!Error=-14	mmcsdsocket1	Init
		COMMAND			mmcsdsession1	Close
		COMMAND			mmcsdsocket1	~
		COMMAND			mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0012

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0013
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0013
//! @SYMAPI			DMMCSocket::InitiatePowerUpSequence();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		15/05/2008
//! @SYMTestCaseDesc		Initiate Power Up Sequence Test - Initiate power up sequence on the stack.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Initiate power up sequence on the stack
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Power up sequence initiated with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0013-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0013-001-NewL_command02
		COMMAND		mmcsdsocket1	InitiatePowerUpSequence
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0013

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0014
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0014
//! @SYMAPI			DMMCSocket::Reset2();
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		25/06/2008
//! @SYMTestCaseDesc		Reset2 Test - Reset the socket and free up allocated resources, without powering down the stack first.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Reset the socket and free up allocated resources
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	The socket is reset with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0014-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0014-001-NewL_command02
		COMMAND		mmcsdsocket1	Reset2
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0014

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0015
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0015
//! @SYMAPI			DMMCSocket::Stack(TInt);
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		25/06/2008
//! @SYMTestCaseDesc		Stack Pointer Test - Get a pointer to a DMMCStack object, for invalid bus number.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get a pointer to a DMMCStack object for MMC card number -1
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	The stack pointer is correctly returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0015-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0015-001-NewL_command02
		COMMAND		mmcsdsocket1	Stack			BASE-BSP-SD-SOCKET-DRIVER-0015-001-Stack_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0015

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0016
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0016
//! @SYMAPI			DMMCSocket::Stack(TInt);
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		25/06/2008
//! @SYMTestCaseDesc		Stack Pointer Test - Get a pointer to a DMMCStack object, for invalid bus number.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get a pointer to a DMMCStack object for MMC card number 5
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	The stack pointer is returned as NULL.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0016-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0010-001-NewL_command02
		COMMAND		mmcsdsocket1	Stack			BASE-BSP-SD-SOCKET-DRIVER-0016-001-Stack_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0016

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0017
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0017
//! @SYMAPI			DMMCSocket::ResetInactivity(TInt);
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		26/06/2008
//! @SYMTestCaseDesc		Reset inactivity timer Test - Reset socket's PSU inactivity timer, for invalid bus number.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Reset socket's PSU inactivity timer for MMC card number -1
//!				4. Verify the bus inactivity count
//!				5. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	PSU inactivity timer is reset with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDPsu	mmcsdpsu1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0017-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0017-001-NewL_command03
		COMMAND		mmcsdpsu1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0017-001-NewL_command03
		COMMAND		mmcsdsocket1	ResetInactivity		BASE-BSP-SD-SOCKET-DRIVER-0017-001-ResetInactivity_command04
		COMMAND		mmcsdpsu1	PsuInfo			BASE-BSP-SD-SOCKET-DRIVER-0017-001-PsuInfo_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdpsu1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0017

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0018
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0018
//! @SYMAPI			DMMCSocket::ResetInactivity(TInt);
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		26/06/2008
//! @SYMTestCaseDesc		Reset inactivity timer Test - Reset socket's PSU inactivity timer, for invalid bus number.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Reset socket's PSU inactivity timer for MMC card number 5
//!				4. Verify the bus inactivity count
//!				5. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	PSU inactivity timer is reset with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDPsu	mmcsdpsu1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0018-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0018-001-NewL_command03
		COMMAND		mmcsdpsu1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0018-001-NewL_command03
		COMMAND		mmcsdsocket1	ResetInactivity		BASE-BSP-SD-SOCKET-DRIVER-0018-001-ResetInactivity_command04
		COMMAND		mmcsdpsu1	PsuInfo			BASE-BSP-SD-SOCKET-DRIVER-0018-001-PsuInfo_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdpsu1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0018

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0019
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0019
//! @SYMAPI			DMMCSocket::AdjustPartialRead(const TMMCard{ptr}, TUint32, TUint32, TUint32{ptr}, TUint32{ptr});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		26/06/2008
//! @SYMTestCaseDesc		Adjust Partial Read Test - Calculate minimum range that must be read off card, using invalid inputs.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get pointer to card
//!				4. Calculate minimum range that must be read off card, where aStart=0xFFFFFFFE and aEnd=0xFFFFFFFF
//!				5. Destroy the objects
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Minimum range that must be read off card is correctly returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDStack	mmcsdstack1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0019-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0019-001-NewL_command03
		COMMAND		mmcsdstack1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0019-001-NewL_command03
		COMMAND		mmcsdstack1	CardP			BASE-BSP-SD-SOCKET-DRIVER-0019-001-CardP_command04
		COMMAND		mmcsdsocket1	AdjustPartialRead	BASE-BSP-SD-SOCKET-DRIVER-0019-001-AdjustPartialRead_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdstack1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0019

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0020
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0020
//! @SYMAPI			DMMCSocket::AdjustPartialRead(const TMMCard{ptr}, TUint32, TUint32, TUint32{ptr}, TUint32{ptr});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		26/06/2008
//! @SYMTestCaseDesc		Adjust Partial Read Test - Calculate minimum range that must be read off card, using invalid inputs.
//! @SYMTestActions    		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get pointer to card
//!				4. Calculate minimum range that must be read off card, where aStart=0 and aEnd=0xFFFFFFFF
//!				5. Destroy the objects
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Minimum range that must be read off card is correctly returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDStack	mmcsdstack1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0020-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0020-001-NewL_command03
		COMMAND		mmcsdstack1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0020-001-NewL_command03
		COMMAND		mmcsdstack1	CardP			BASE-BSP-SD-SOCKET-DRIVER-0020-001-CardP_command04
		COMMAND		mmcsdsocket1	AdjustPartialRead	BASE-BSP-SD-SOCKET-DRIVER-0020-001-AdjustPartialRead_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdstack1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0020

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0021
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0021
//! @SYMAPI			DMMCSocket::AdjustPartialRead(const TMMCard{ptr}, TUint32, TUint32, TUint32{ptr}, TUint32{ptr});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		26/06/2008
//! @SYMTestCaseDesc		Adjust Partial Read Test - Calculate minimum range that must be read off card, using invalid inputs.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get pointer to card
//!				4. Calculate minimum range that must be read off card, where aStart=aEnd
//!				5. Destroy the objects
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Minimum range that must be read off card is correctly returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDStack	mmcsdstack1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0021-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0021-001-NewL_command03
		COMMAND		mmcsdstack1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0021-001-NewL_command03
		COMMAND		mmcsdstack1	CardP			BASE-BSP-SD-SOCKET-DRIVER-0021-001-CardP_command04
		COMMAND		mmcsdsocket1	AdjustPartialRead	BASE-BSP-SD-SOCKET-DRIVER-0021-001-AdjustPartialRead_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdstack1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0021

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0022
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0022
//! @SYMAPI			DMMCSocket::AdjustPartialRead(const TMMCard{ptr}, TUint32, TUint32, TUint32{ptr}, TUint32{ptr});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		26/06/2008
//! @SYMTestCaseDesc		Adjust Partial Read Test - Calculate minimum range that must be read off card, using invalid inputs.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Get pointer to card
//!				4. Calculate minimum range that must be read off card, where aStart>aEnd
//!				5. Destroy the objects
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Minimum range that must be read off card is correctly returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		CREATE_OBJECT	MMCSDStack	mmcsdstack1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0022-001-DriverOpen_command02
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0022-001-NewL_command03
		COMMAND		mmcsdstack1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0022-001-NewL_command03
		COMMAND		mmcsdstack1	CardP			BASE-BSP-SD-SOCKET-DRIVER-0022-001-CardP_command04
		COMMAND		mmcsdsocket1	AdjustPartialRead	BASE-BSP-SD-SOCKET-DRIVER-0022-001-AdjustPartialRead_command05
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdstack1	~
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0022

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0023
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0023
//! @SYMAPI			DMMCSocket::PrepareStore(TInt, TInt, TLocalDrivePasswordData{ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		27/06/2008
//! @SYMTestCaseDesc		Prepare Store Test - Prepare store so mappings can be allocated or deallocated.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Prepare store so mappings can be allocated or deallocated, using operation EPasswordLock
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Store is prepared with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0023-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0023-001-NewL_command02
		COMMAND		mmcsdsocket1	PrepareStore		BASE-BSP-SD-SOCKET-DRIVER-0023-001-PrepareStore_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0023

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0024
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0024
//! @SYMAPI			DMMCSocket::PrepareStore(TInt, TInt, TLocalDrivePasswordData{ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		27/06/2008
//! @SYMTestCaseDesc		Prepare Store Test - Prepare store so mappings can be allocated or deallocated.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Prepare store so mappings can be allocated or deallocated, using operation EPasswordUnlock
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Store is prepared with no errors.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0024-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0024-001-NewL_command02
		COMMAND		mmcsdsocket1	PrepareStore		BASE-BSP-SD-SOCKET-DRIVER-0024-001-PrepareStore_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0024

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0025
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0025
//! @SYMAPI			DMMCSocket::PrepareStore(TInt, TInt, TLocalDrivePasswordData{ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		02/07/2008
//! @SYMTestCaseDesc		Prepare Store Test - Prepare store so mappings can be allocated or deallocated, using NULL password.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Prepare store so mappings can be allocated or deallocated, using operation EPasswordLock and NULL password
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Store is prepared with error KErrAccessDenied.
//! @SYMTestType		CIT
	START_TEST_BLOCK		100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT		MMCSDSession	mmcsdsession1
		CREATE_OBJECT		MMCSDSocket	mmcsdsocket1
		COMMAND			mmcsdsession1	NewL
		COMMAND			mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0025-001-DriverOpen_command01
		COMMAND			mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0025-001-NewL_command02
		COMMAND	!Error=-21	mmcsdsocket1	PrepareStore		BASE-BSP-SD-SOCKET-DRIVER-0025-001-PrepareStore_command03
		COMMAND			mmcsdsession1	Close
		COMMAND			mmcsdsocket1	~
		COMMAND			mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0025

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0026
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0026
//! @SYMAPI			DMMCSocket::PrepareStore(TInt, TInt, TLocalDrivePasswordData{ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		02/07/2008
//! @SYMTestCaseDesc		Prepare Store Test - Prepare store so mappings can be allocated or deallocated, using NULL password.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Prepare store so mappings can be allocated or deallocated, using operation EPasswordClear and NULL password
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Store is prepared with error KErrAccessDenied.
//! @SYMTestType		CIT
	START_TEST_BLOCK		100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT		MMCSDSession	mmcsdsession1
		CREATE_OBJECT		MMCSDSocket	mmcsdsocket1
		COMMAND			mmcsdsession1	NewL
		COMMAND			mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0026-001-DriverOpen_command01
		COMMAND			mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0026-001-NewL_command02
		COMMAND	!Error=-21	mmcsdsocket1	PrepareStore		BASE-BSP-SD-SOCKET-DRIVER-0026-001-PrepareStore_command03
		COMMAND			mmcsdsession1	Close
		COMMAND			mmcsdsocket1	~
		COMMAND			mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0026

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0027
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0027
//! @SYMAPI			DMMCSocket::PrepareStore(TInt, TInt, TLocalDrivePasswordData{ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		02/07/2008
//! @SYMTestCaseDesc		Prepare Store Test - Prepare store so mappings can be allocated or deallocated, using NULL password.
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Prepare store so mappings can be allocated or deallocated, using operation EPasswordUnlock and NULL password
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Store is prepared with error KErrLocked.
//! @SYMTestType		CIT
	START_TEST_BLOCK		100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT		MMCSDSession	mmcsdsession1
		CREATE_OBJECT		MMCSDSocket	mmcsdsocket1
		COMMAND			mmcsdsession1	NewL
		COMMAND			mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0027-001-DriverOpen_command01
		COMMAND			mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0027-001-NewL_command02
		COMMAND	!Error=-22	mmcsdsocket1	PrepareStore		BASE-BSP-SD-SOCKET-DRIVER-0027-001-PrepareStore_command03
		COMMAND			mmcsdsession1	Close
		COMMAND			mmcsdsocket1	~
		COMMAND			mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0027

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0028
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0028
//! @SYMAPI			DMMCSocket::iStandby();
//! @SYMAuthor			Saravanakumar
//! @SYMCreationDate		06/05/2008
//! @SYMTestCaseDesc		Checks the Device Standby State
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Check the Device is in Standby mode
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Standby mode EFalse
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0028-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0028-001-NewL_command02
		COMMAND		mmcsdsocket1	iStandby_Get		BASE-BSP-SD-SOCKET-DRIVER-0028-001-iStandby_Get_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0028

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0029
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0029
//! @SYMAPI			DMMCSocket::iType();
//! @SYMAuthor			Saravanakumar
//! @SYMCreationDate		06/05/2008
//! @SYMTestCaseDesc		Checks the card bus type
//! @SYMTestActions		1. Create RMMCSDTestControllerInterface Handle object.
//!				2. Open the driver connection
//!				3. Read the Bus type
//!				4. Destroy the object
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Bus type EPBusTypeNone
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		CREATE_OBJECT	MMCSDSocket	mmcsdsocket1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	DriverOpen		BASE-BSP-SD-SOCKET-DRIVER-0029-001-DriverOpen_command01
		COMMAND		mmcsdsocket1	NewL			BASE-BSP-SD-SOCKET-DRIVER-0029-001-NewL_command02
		COMMAND		mmcsdsocket1	iType_Get		BASE-BSP-SD-SOCKET-DRIVER-0029-001-iType_Get_command03
		COMMAND		mmcsdsession1	Close
		COMMAND		mmcsdsocket1	~
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0029

START_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0030
//! @SYMTestCaseID		BASE-BSP-SD-SOCKET-DRIVER-0030
//! @SYMAPI			FreeLogicalDevice(const TDesC {ref});
//! @SYMAuthor			James Mechen
//! @SYMCreationDate		11/04/2008
//! @SYMTestCaseDesc		Free the Logical Device Driver
//! @SYMTestActions		Free the D_MMCSDIF LDD Driver
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		high
//! @SYMTestExpectedResults	Displayed Power supply information.
//! @SYMTestType		CIT
	START_TEST_BLOCK	100		T_mmcsd			\base\mmcsd\BASE-BSP-SD-SOCKET-DRIVER.ini
		CREATE_OBJECT	MMCSDSession	mmcsdsession1
		COMMAND		mmcsdsession1	NewL
		COMMAND		mmcsdsession1	UnLoadDriver		BASE-BSP-SD-SOCKET-DRIVER-0030-001-UnLoadDriver_command02
		COMMAND		mmcsdsession1	~
	END_TEST_BLOCK
END_TESTCASE			BASE-BSP-SD-SOCKET-DRIVER-0030

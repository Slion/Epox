// Copyright (c) 2002-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//



// Text for SMS errors 
RESOURCE TBUF r_err_not_allowed			{ buf = text_not_allowed; } // from avkon.loc

// New http errors, context ECtxRBCore 
RESOURCE ARRAY r_error_res_http_tcp_errors
	{
	items=
		{
		SINGLE_ERROR
			{
			text=r_nw_stat_wait_timeout; // From RBErr.ra
			},
		SINGLE_ERROR
			{
			text=r_error_res_tcp_bad_line; // From TCPErr.ra
			},
		SINGLE_ERROR
			{
			text=r_err_wim_session_not_set; // From RBErr.ra
			},
		SINGLE_ERROR
			{
			text=r_err_invalid_url; // From RBErr.ra
			},
		SINGLE_ERROR
			{
			text=r_error_res_socket_host_unreach; // From SockErr.ra
			}
		};
	}

RESOURCE ARRAY r_error_res_kimono_errors
	{
	items=
		{


  /* General Rainbow status codes */



	        SINGLE_ERROR // NW_STAT_FAILURE
			{ 
			text=r_nw_stat_failure_kimono;
			},
        	SINGLE_ERROR // NW_STAT_SUCCESS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR // NW_STAT_NODESTINATION
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_NOT_FOUND
			{ 
			text = r_nw_stat_file_not_found;
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_NOT_OPEN /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_EOF
			{ 
			text = r_nw_stat_file_eof; 
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_NOT_CREATED /* CR */
			{ 
			text = r_kimono_error_file_creat; 
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_READ_ERROR
			{ 
			text=r_nw_stat_file_read_error;  
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_WRITE_ERROR
			{ 
			text= ETextResolverBlankErrorFlag;
			}, 
			SINGLE_ERROR  // NW_STAT_FILE_DISK_FULL_ERROR /* ADDED RECENTLY */
			{ 
	    	text= r_error_res_disk_full;
			}, 
        	SINGLE_ERROR  // NW_STAT_FILE_FOUND
			{ 
    			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_OUT_OF_MEMORY
			{ 
			text = r_nw_stat_out_of_memory;       
			}, 
        	SINGLE_ERROR  // NW_STAT_UNEXPECTED_ERROR
			{ 
			text = r_nw_stat_unexpected_error;    
			}, 
        	SINGLE_ERROR  // NW_STAT_NOT_IMPLEMENTED /* CR */
			{ 
			text = r_kimono_error_unsupp_req;
			}, 
        	SINGLE_ERROR  // NW_STAT_WAIT_TIMEOUT
			{ 
			text = r_nw_stat_wait_timeout;        
			}, 
        	SINGLE_ERROR  // NW_STAT_BUFFER_TOO_SMALL
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_BAD_INPUT_PARAM
			{ 
			text = r_nw_stat_bad_input_param;     
			}, 
        	SINGLE_ERROR  // NW_STAT_MISSING_INPUT_PARAM
			{ 
			text = r_nw_stat_missing_input_param; 
			}, 
        	SINGLE_ERROR   // NW_STAT_MALFORMED_URL
			{ 
			text = r_nw_stat_malformed_url;       
			}, 
        	SINGLE_ERROR  // NW_STAT_MISSING_SCRIPT_REFERER
			{ 
			text = r_nw_stat_missing_script_referer;  
			}, 
        	SINGLE_ERROR  // NW_STAT_DUPLICATE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_NOT_FOUND /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			},
        	SINGLE_ERROR  // NW_STAT_BUFFER_END
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_ITERATE_MORE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_ITERATE_DONE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_NOAUTHREDIRUI_AVAIL
			{ 
			flags = ETextResolverBlankErrorFlag;
            },



  /* Status codes for Url and Http Loaders */



        	SINGLE_ERROR  // NW_STAT_UNKNOWN_SCHEME
			{ 
			text = r_nw_stat_unknown_scheme;      
			}, 
        	SINGLE_ERROR  // NW_STAT_BAD_REDIRECT
			{ 
			text = r_nw_stat_bad_redirect;        
			}, 
        	SINGLE_ERROR  // NW_STAT_TOO_MANY_REDIRECTS
			{ 
			text = r_nw_stat_too_many_redirects;
			}, 
        	SINGLE_ERROR  // NW_STAT_BAD_REDIRECT_URL
			{ 
			text = r_err_bad_redirect_url;	
			}, 
        	SINGLE_ERROR  // NW_STAT_MISSING_LOCATION_HEADER
			{ 
			text = r_nw_stat_missing_location_header; 
			}, 
        	SINGLE_ERROR  // NW_STAT_BAD_CONTENT_LOC_HEADER
			{ 
			text = r_nw_stat_bad_content_loc_header;
			}, 
        	SINGLE_ERROR  // NW_STAT_BAD_HEADER
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_BAD_RFC1123_TIME
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_UNHANDLED_WSP_STATUS
			{ 
			text = r_err_unhandled_wsp_status;
			}, 
        	SINGLE_ERROR  // NW_STAT_WSP_STATUS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_NOAUTH_DATA /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_MISSING_AUTH_HEADER
			{ 
			text = r_nw_stat_missing_auth_header;
			}, 
        	SINGLE_ERROR  // NW_STAT_CANCELLED
			{ 
			text = r_nw_stat_cancelled;          
			}, 
        	SINGLE_ERROR  // NW_STAT_NAVIGATION_CANCELLED
			{ 
			text = r_nw_stat_wae_navigation_cancelled;
			}, 
        	SINGLE_ERROR  // NW_STAT_NOCONTENT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 




  /* Status codes for WPS (Protocol Stack) */




        	SINGLE_ERROR  //NW_STAT_WPS_ERROR
			{ 
			text = r_err_wps_error;		
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_STARTUP_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_GATEWAY_CONNECT_ERROR
			{ 
			text = r_err_wps_error; 		
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_GATEWAY_UNSET
			{ 
			text = r_nw_stat_wps_gateway_unset;
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_DISCONNECTED
			{ 
			text = r_nw_stat_wps_disconnected;
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_ABORTED
			{ 
			text = r_nw_stat_wps_aborted;         
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_SECURITY_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_SECURITY_ALERT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_SECURITY_ESTABLISHED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  //NW_STAT_WPS_IGNORE_UI
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


/*
** Note: the following new Rainbow WPS codes have
**        been added for Spectrum to support dialup
**        (CSD) and packet switched (GPRS) connections.
*/



        	SINGLE_ERROR  // NW_STAT_WPS_SERVICE_CONNECT_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_BEARER_NOT_AVAILABLE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_GPRS_CONNECTION_FAILED
			{ 
    		text = r_nw_stat_gprs_unspecified_error;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_CONNECTION_NOT_RESUMED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_CONNECTION_SUSPENDED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_DIALUP_CONNECT_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_BUSY_CONNECT_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


/*
** Note: the following new Rainbow WPS codes have
**        been added for Spectrum to support WDP,
**        WSP, and WTP layer errors.
*/




        	SINGLE_ERROR  // NW_STAT_WPS_NETWORK_CONNECT_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_WDPSEND_FAILED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_PACKET_TOO_LARGE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPS_SESSION_CONNECT_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 



  /* Status codes for WPSA (WPS Adapter) */




        	SINGLE_ERROR  // NW_STAT_WPSA_MAX_REACHED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPSA_NOT_FOUND
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR    // NW_STAT_WPSA_DOS
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WPSA_MAX_TRANSACTIONS_REACHED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WPSA_MAX_SESSIONS_REACHED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WPSA_NO_ACTIVE_TRANSACTIONS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPSA_NO_TMS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WPSA_TRANSACTION_COMPLETE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 




/*
** Note: the following block of new WIM status codes has
**       superseded the old Rainbow status codes above
*/
  /* Status codes for WIM / Security  */





        	SINGLE_ERROR  // NW_STAT_WIMI_OK
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_OKASYN
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_INVALIDPIN /* CR */
			{ 
			text = r_kimono_error_wrong_pin; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_PINBLOCKED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_WIMCLOSED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOCARD /* CR */
			{ 
			text = r_kimono_error_no_wim;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_IOERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_INVALIDREF
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOCERT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOTALLOWED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOROOM
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_BADARGS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOMEM
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_CERTEXISTS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOINIT 
			{ 
			text = r_kimono_error_wim_init;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_BADCERT
			{ 
			text = r_kimono_error_bad_cert;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_FAIL
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOKES
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_NOKEY
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_WIM_ERR
			{ 
			text = r_kimono_error_wim_gen;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_SESSION_NOT_SET
			{ 
			text = r_kimono_error_wim_not_set;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_CERTNOTFOUND
			{ 
			text = r_kimono_error_cert_miss; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_KEYNOTFOUND
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WIMI_DUPLICATECERT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 




/*
** Note: the following block of new WTLS status codes has
**       superseded the old Rainbow status codes above
*/

  /*Status codes for WTLS*/



        	SINGLE_ERROR  // NW_STAT_WTLS_TIMEOUT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_ILLEGALPARAM
			{ 
			flags = ETextResolverBlankErrorFlag;
			},
        	SINGLE_ERROR  // NW_STAT_WTLS_SERVERCLOSED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_CONNCLOSED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_UNEXPMESS
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_BADMAC
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_DECOMPESSERR
			{ 
/*IS THIS CORRECT?*/	flags = ETextResolverBlankErrorFlag;  
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_DECRYPTERR
			{ 
/*IS THIS CORRECT?*/	flags = ETextResolverBlankErrorFlag;    
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_HANDSHAKEFAIL
			{ 
			text = r_kimono_error_sec_conn;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_BADCERT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_PROTOCOL
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_NOACCESS
			{ 
			text = r_kimono_error_sec_conn;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_EXPORTRESTRICTION
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_PMMSTORE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_BADHANDLE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_BEARERSUSP
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_UNKNOW_CERT_AUTH
			{ 
			text = r_kimono_error_unkn_ca;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_UC_NOT_YET_VALID /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_UC_EXPIRED /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_UC_REVOKED
			{ 
		    	text = r_kimono_error_cert_rew; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_UNSUPCERT
			{ 
			text = r_kimono_error_cert_unsupp;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_BADUSERCERT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_DECODE_FAIL /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_CLIENT_AUTH_NOT_SUPPORTED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_INSUFFICIENT_SECURITY
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTLS_USER_CANCELLED /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 



  /* Status codes for Cache */



        	SINGLE_ERROR  // NW_STAT_CACHE_ITEM_NOT_FOUND
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_ITEM_FOUND
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_URL_FOUND
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_ITEM_COPIED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_DISABLED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_ENABLE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_NOT_CONFIGURED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_ITEM_TOO_BIG
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_SPACE_AVAILABLE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CACHE_SPACE_NOT_AVAILABLE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 



  /* Status Codes for Cookies */

        	SINGLE_ERROR  // NW_STAT_CJ_NOCOOKIE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 



  /* Status codes used by the Wml Script */



        	SINGLE_ERROR  // NW_STAT_SCRIPT_CARD_NOT_IN_DECK
			{ 
			text = r_nw_stat_file_not_found;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_NO_ACCESS
			{ 
			text = r_nw_stat_wmlbrowser_no_access;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_BAD_CONTENT
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_ERROR_USER_EXIT
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_ERROR_USER_ABORT
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_ERROR_STACK_UNDERFLOW
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_ERROR_STACK_OVERFLOW
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_FATAL_LIB_FUNC_ERROR
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_INVALID_FUNC_ARGS
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_VERIFICATION_FAILED
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_EXTERNAL_FUNCTION_NOT_FOUND
			{ 
			text = r_nw_stat_file_eof;
			}, 
        	SINGLE_ERROR //NW_STAT_SCRIPT_UNABLE_TO_LOAD_COMPILATION_UNIT
			{ 
			text = r_nw_stat_script_invalid_func_args;
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRIPT_ACCESS_VIOLATION
			{ 
			text = r_nw_stat_wmlbrowser_no_access;
			}, 


  /* Status codes used by the WML Browser*/



        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_CARD_NOT_IN_DECK
			{ 
			text = r_nw_stat_wmlbrowser_card_not_in_deck; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_NO_ACCESS
			{ 
			text = r_nw_stat_wmlbrowser_no_access;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_CONTENT
			{ 
			text = r_nw_stat_wmlbrowser_bad_content;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_INVALID_URL_SCHEMA
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_CONTENT_TYPE
			{ 
			text = r_nw_stat_wmlbrowser_bad_content_type;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_INPUT_NONCONFORMING_TO_MASK /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_ONPICK_EX
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


  /* Status codes used by the XML(thus XHTML) parser*/




        	SINGLE_ERROR  // NW_STAT_XHTML_BAD_CONTENT 
			{ 
			text = r_kimono_error_bad_xhtml;
			}, 


   /* Status codes used by the WML Script Crypto */



        	SINGLE_ERROR  // NW_STAT_CRYPTO_USERCANCEL
			{ 
			text= r_nw_stat_wps_aborted;
			}, 
        	SINGLE_ERROR  // NW_STAT_CRYPTO_NOCERT
			{ 
			text= r_err_crypto_nocert;
			}, 


  /* WML Interpreter content validation errors */



        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_UNSUPPORTED_VERSION_NUMBER
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_UNSUPPORTED_PUBLIC_ID
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_UNSUPPORTED_CHARSET
			{ 
			text= r_nw_stat_wmlbrowser_unsupported_charset;  
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_OPAQUE_DATA
			{ 
			text= r_nw_stat_wmlbrowser_bad_opaque_data;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_PI
			{ 
			text= r_nw_stat_wmlbrowser_bad_pi;   
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_SWITCHPAGE_TOKEN
			{ 
			text = r_nw_stat_wmlbrowser_bad_switchpage_token; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_TEXT
			{ 
			text = r_nw_stat_wmlbrowser_bad_text;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_BAD_ELEMENT
			{ 
			text = r_nw_stat_wmlbrowser_bad_element;
			}, 
        	SINGLE_ERROR  // NW_STAT_WMLBROWSER_MISSING_LITERALTAG
			{ 
			text = r_nw_stat_wmlbrowser_missing_literaltag;   
			}, 


  /* Status codes for the script proxy */




        	SINGLE_ERROR  // NW_STAT_SCRPROXY_SCRABORT
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRPROXY_SCRBUSY
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_SCRPROXY_SCRNOTRESPONDING
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 


  /* status codes for the image loader */

        	SINGLE_ERROR  // NW_STAT_IMGLOADER_HTTP_ERROR
			{ 
			text = r_err_imgloader_http_error;	
			}, 


  /* Status codes for the wae browser */


        	SINGLE_ERROR  // NW_STAT_WAE_NAVIGATION_CANCELLED
			{ 
			text = r_nw_stat_wae_navigation_cancelled;
			}, 


  /* Status codes for SI */


        	SINGLE_ERROR  // NW_STAT_SI_DONE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 


  /* Connectivity failure status codes used by gateway navigation.
     Refer to WAP End-to-End Security specification */



        	SINGLE_ERROR  // NW_STAT_CONN_SECINFO_EXPIRED
			{ 
			text = r_err_secinfo_expired;		
			}, 
        	SINGLE_ERROR  // NW_STAT_CONN_URL_NONSECURE
			{ 
			text = r_err_conn_url_nonsecure;    
			}, 
        	SINGLE_ERROR  // NW_STAT_CONN_NAVDOC_INVALID
			{ 
			text = r_nw_stat_file_eof;
			}, 

  /* Connectivity failure status codes used by
     NW_Http_ConnNeeded() call prior to WPSA requests. */


        	SINGLE_ERROR  // NW_STAT_CONN_CANCELLED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_CONN_FAILED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 



  /* Status codes for WTAI loader */



        	SINGLE_ERROR  // NW_STAT_WTAI_UNSPECIFIED_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WTAI_INVALID_RESPONSE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WTAI_INVALID_URI
			{ 
			text = r_err_invalid_url;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTAI_INVALID_ARGUMENT
			{ 
			text = r_err_wtai_invalid_argument;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTAI_UNSUPPORTED_FUNCTION
			{ 
			text = r_err_wtai_unsupp_funtion;
			}, 
        	SINGLE_ERROR  // NW_STAT_WTAI_UNSUPPORTED_LIBRARY
			{ 
			text = r_err_wtai_unsupp_library;
			}, 

	SINGLE_ERROR  // NW_STAT_WTAI_INVOCATIONERROR /* ADDED RECENTLY */
			{ 
        	text = r_qtn_err_invalid_number; 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_NOCALLACTIVE /* ADDED RECENTLY */
			{ 
        	text = r_qtn_err_wtai_no_call_active;
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_NOANSWER /* ADDED RECENTLY */
			{ 
        	text = r_qtn_err_no_answer; 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_NOSERVICE /* ADDED RECENTLY */
			{ 
        	text = r_KMmsErrorNetwork; // from mmserr.ra 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_USERBUSY /* ADDED RECENTLY */
			{ 
        	text = r_qtn_err_user_busy; 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_PHONEBOOKFULL /* ADDED RECENTLY */
			{ 
        	text = r_qtn_err_kimono_mem; 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_PBWRITEERROR /* ADDED RECENTLY */
			{ 
            	text = r_kimono_error_wim_gen; 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_PBNUMBERTOOLONG /* ADDED RECENTLY */
			{ 
            	text = r_qtn_err_number_too_long; 
			}, 
	SINGLE_ERROR  // NW_STAT_WTAI_PBNAMETOOLONG /* ADDED RECENTLY */
			{ 
        	text = r_qtn_err_unicode_name_too_long; 
			}, 



  /* Status codes for the layout manager */



        	SINGLE_ERROR  // NW_STAT_LMGR_CONSTRAINT_TOO_SMALL
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_NOT_CONSTRAINED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_FORMAT_OVERFLOW /* CR */
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_SPLIT_OK
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_SPLIT_EOL
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_NO_SPLIT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_DRAW_COMPLETE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_LMGR_NOT_CLEAR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


  /* Status codes used by cXML DOM module */


        	SINGLE_ERROR  // NW_STAT_DOM_HEIRARCHY_REQUEST_ERR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_DOM_WRONG_DOC_ERR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_DOM_NO_STRING_RETURNED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_DOM_NODE_TYPE_ERR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_DOM_NO_VALUE_PREFIX
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


/* Status codes used by the WBXML parser: */ 


        	SINGLE_ERROR  // NW_STAT_WBXML_ERROR_BYTECODE
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_ERROR_CHARSET_UNSUPPORTED
			{ 
			flags = ETextResolverBlankErrorFlag; 
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_ITERATE_MORE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_ITERATE_DONE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_DID_NOT_ITERATE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_NO_NAME
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_HAS_ATTRIBUTES
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_HAS_CONTENT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_WBXML_HAS_ATTR_CONTENT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 



/* Status codes for History Entries */



        	SINGLE_ERROR  // NW_STAT_HED_NO_CURRENT_HISTENTRY
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_HED_NO_PREVIOUS_HISTENTRY
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_HED_NO_NEXT_HISTENTRY
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


/* Status codes for Mailto loader */



        	SINGLE_ERROR  // NW_STAT_MAILTO_COMPLETE
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 



/* Status code to indicate that contents have been dispatched to content dispatcher server */



        	SINGLE_ERROR  // NW_STAT_HED_CONTENT_DISPATCHED
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 



/* Status codes for connection */



        	SINGLE_ERROR  // NW_STAT_CONN_NEW_CONNECTION
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 


/* Status codes for HTTP stack */

//THE FOLLOWING FIVE (5) ERRORS ARE PENDING ON A CR

	        SINGLE_ERROR  // NW_STAT_UNSUPPORTED_AUTH_TYPE /* CR */
			{ 
    		flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_TCP_TIMEOUT
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_TCP_COMM_LINE_FAIL
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_TCP_NOT_READY
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_TCP_DNS_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			}, 
        	SINGLE_ERROR  // NW_STAT_TCP_HOST_UNREACHABLE
			{ 
			flags = ETextResolverBlankErrorFlag;
			},


/* Base for WPS status codes. This insures that status codes are 32 bits wide */
        	SINGLE_ERROR  // NW_STAT_WPS_START
			{ 
    		flags = ETextResolverBlankErrorFlag;
			}

		};
	}

// MOST OF TEXT RESOURCES ARE DEFINED IN RBERR.RA, BELOW ARE JUST NEW DEFINITIONS

RESOURCE TBUF r_nw_stat_failure_kimono      { buf = qtn_err_failure; }
RESOURCE TBUF r_nw_stat_gprs_unspecified_error {buf = qtn_err_gprs_unspecified_err; } 
RESOURCE TBUF r_kimono_error_file_creat {buf = qtn_err_kimono_file_creat ;} 
RESOURCE TBUF r_kimono_error_unsupp_req	{buf = qtn_err_kimono_unsupp_req;} 
RESOURCE TBUF r_kimono_error_wrong_pin {buf = qtn_err_kimono_wrong_pin;} 
RESOURCE TBUF r_kimono_error_no_wim {buf = qtn_err_kimono_no_wim;} 
RESOURCE TBUF r_kimono_error_wim_init {buf = qtn_err_kimono_wim_init;} 
RESOURCE TBUF r_kimono_error_bad_cert {buf = qtn_err_kimono_bad_cert;} 
RESOURCE TBUF r_kimono_error_wim_gen {buf = qtn_err_kimono_wim_gen;} 
RESOURCE TBUF r_kimono_error_wim_not_set {buf = qtn_err_kimono_wim_not_set;} 
RESOURCE TBUF r_kimono_error_cert_miss {buf = qtn_err_kimono_cert_miss;} 
RESOURCE TBUF r_kimono_error_sec_conn {buf = qtn_err_kimono_sec_conn;}
RESOURCE TBUF r_kimono_error_unkn_ca {buf = qtn_err_kimono_unkn_ca;}
RESOURCE TBUF r_kimono_error_cert_rew {buf = qtn_err_kimono_cert_rew;} 
RESOURCE TBUF r_kimono_error_cert_unsupp {buf = qtn_err_kimono_cert_unsupp;}
RESOURCE TBUF r_kimono_error_bad_xhtml {buf = qtn_err_kimono_bad_content;} 

RESOURCE TBUF r_qtn_err_invalid_number { buf = qtn_err_invalid_number;} 
RESOURCE TBUF r_qtn_err_no_answer { buf = qtn_err_no_answer;} 
RESOURCE TBUF r_qtn_err_user_busy { buf = qtn_err_user_busy;} 
RESOURCE TBUF r_qtn_err_kimono_mem { buf = qtn_err_kimono_mem;} 
RESOURCE TBUF r_qtn_err_number_too_long { buf = qtn_err_number_too_long;} 
RESOURCE TBUF r_qtn_err_unicode_name_too_long { buf = qtn_err_unicode_name_too_long;} 

RESOURCE TBUF r_error_res_gprs_max_nof_conns			    { buf = qtn_err_gprs_max_nof_conns;}

/* New error map, maximum amount of PDP contexts reached (-6000) */
RESOURCE ARRAY r_error_res_gprs_error4
	{
	items=
		{
		SINGLE_ERROR
			{
			text=r_error_res_gprs_max_nof_conns;	// -6000
			},

		SINGLE_ERROR
			{
			text=r_qtn_acl_err_connection_not_allowed;	// -6001
			}
		};
	}

RESOURCE ARRAY r_error_res_networking_extension
	{
	items=
		{
		SINGLE_ERROR // KErrDndNameNotFound
			{
			text=r_error_res_tcp_no_server;	// -5120
			}
		};
	}

/* New array for offline mode error messages */
RESOURCE ARRAY r_error_res_offline_mode
	{
	items=
		{
		SINGLE_ERROR // KErrGsmOfflineOpNotAllowed
			{
			text=r_qtn_offline_not_possible;	// -8267
			},
		SINGLE_ERROR // KErrGsmOfflineSimOpNotAllowed 
			{
			text=r_qtn_offline_not_possible;	// -8268
			}
		};
	}

RESOURCE TBUF r_qtn_offline_not_possible { buf = qtn_offline_not_possible;} 

RESOURCE TBUF r_qtn_err_mms_not_supported { buf = qtn_err_mms_not_supported;} 

/* HTTP error resolving made more flexible */

RESOURCE TBUF r_text_http_err_400 { buf = qtn_http_err_400;} 
// 401 blank
RESOURCE TBUF r_text_http_err_402 { buf = qtn_http_err_402;} 
RESOURCE TBUF r_text_http_err_403 { buf = qtn_http_err_403;} 
RESOURCE TBUF r_text_http_err_404 { buf = qtn_http_err_404;} 
RESOURCE TBUF r_text_http_err_405 { buf = qtn_http_err_405;} 
RESOURCE TBUF r_text_http_err_406 { buf = qtn_http_err_406;} 
// 407 blank
RESOURCE TBUF r_text_http_err_408 { buf = qtn_http_err_408;} 
RESOURCE TBUF r_text_http_err_409 { buf = qtn_http_err_409;} 
RESOURCE TBUF r_text_http_err_410 { buf = qtn_http_err_410;} 
RESOURCE TBUF r_text_http_err_411 { buf = qtn_http_err_411;} 
RESOURCE TBUF r_text_http_err_412 { buf = qtn_http_err_412;} 
RESOURCE TBUF r_text_http_err_413 { buf = qtn_http_err_413;} 
RESOURCE TBUF r_text_http_err_414 { buf = qtn_http_err_414;} 
RESOURCE TBUF r_text_http_err_415 { buf = qtn_http_err_415;} 
RESOURCE TBUF r_text_http_err_416 { buf = qtn_http_err_416;} 
RESOURCE TBUF r_text_http_err_417 { buf = qtn_http_err_417;} 

RESOURCE TBUF r_text_http_err_500 { buf = qtn_http_err_500;} 
RESOURCE TBUF r_text_http_err_501 { buf = qtn_http_err_501;} 
RESOURCE TBUF r_text_http_err_502 { buf = qtn_http_err_502;} 
RESOURCE TBUF r_text_http_err_503 { buf = qtn_http_err_503;} 
RESOURCE TBUF r_text_http_err_504 { buf = qtn_http_err_504;} 
RESOURCE TBUF r_text_http_err_505 { buf = qtn_http_err_505;} 

#include "../data/cdmasmserr.ra"

RESOURCE TBUF r_qtn_err_wtai_no_call_active { buf = qtn_err_wtai_no_call_active;} 

#include "../data/rtsperr.ra"
#include "../data/wlanerr.ra"
#include "../data/newmmserr.ra"

RESOURCE ARRAY r_error_res_inet6_errors
	{
	items=
		{
		SINGLE_ERROR // KErrInet6NoRoute
			{
			text=r_error_res_gprs_temporary_net_prob;	// -5105
			}
		};
	}

RESOURCE TBUF r_qtn_acl_err_connection_not_allowed     { buf = qtn_acl_err_connection_not_allowed;}
RESOURCE TBUF r_new_mms_unregistered_app_error         { buf = qtn_err_mms_unregistered_app; }

RESOURCE TBUF r_erre_ge_wlan_sc_config_failed_try_again    { buf = qtn_err_wlan_sc_config_failed_try_again; }
RESOURCE TBUF r_erre_ge_wlan_sc_config_failed              { buf = qtn_err_wlan_sc_config_failed; }
RESOURCE TBUF r_erre_ge_wlan_signal_too_weak               { buf = qtn_err_wlan_signal_too_weak; }
RESOURCE TBUF r_erre_ge_wlan_sc_config_failed_pin_not_supported       { buf = qtn_err_wlan_sc_config_failed_pin_not_supported; }
RESOURCE TBUF r_erre_ge_wlan_sc_config_failed_pb_not_supported        { buf = qtn_err_wlan_sc_config_failed_pb_not_supported; }
RESOURCE TBUF r_erre_ge_wlan_sc_config_failed_multiple_pb_sessions    { buf = qtn_err_wlan_sc_config_failed_multiple_pb_sessions; }
RESOURCE TBUF r_erre_ge_wlan_sc_config_failed_rogue_activity          { buf = qtn_err_wlan_sc_config_failed_rogue_activity; }
RESOURCE TBUF r_erre_ge_wlan_wpa2_only_mode_not_supported             { buf = qtn_err_wlan_wpa2_only_mode_not_supported; }

// Add new stuff before this line

// End of File

// Copyright (c) 2002-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//



RESOURCE ARRAY r_error_res_rbcore_error
	{
	items=
		{
		SINGLE_ERROR
			{ 
			text=r_nw_stat_failure; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag;
			},
        	SINGLE_ERROR
			{
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_file_not_found; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_file_eof; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
 			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_file_read_error; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_out_of_memory; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_unexpected_error; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_wait_timeout; 
			},
        	SINGLE_ERROR
			{ 
			text= r_nw_stat_malformed_url;
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_too_many_redirects; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR	
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; 
			},
        	SINGLE_ERROR
			{ 
			text=r_nw_stat_missing_auth_header; 
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_cancelled; 
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_failure; // NW_STAT_BAD_INPUT_PARAM 
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_failure; // nw_stat_missing_input_param
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_malformed_url; 
			},
        SINGLE_ERROR
			{ 
			text = r_err_bad_redirect_url; //Bad Redirect URL
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_missing_location_header; 
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_bad_content_loc_header; 
			},
        SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; // nw_stat_bad_redirect 
			},
        SINGLE_ERROR
			{ 
			text = r_err_unhandled_wsp_status;  // Unhandled WSP stat 
			},
        SINGLE_ERROR
			{ 
			text=r_nw_stat_missing_script_referer; 
			},
        SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; //Duplicate
			},
        SINGLE_ERROR
			{ 
			flags = ETextResolverBlankErrorFlag; // Not found 
			},

/* status codes for protocol stack */
        SINGLE_ERROR
		{ 
		text = r_err_wps_error; // ERROR 
		}, 
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wps_startup_error 
		},
        SINGLE_ERROR
		{ 
		text = r_err_wps_error; // nw_stat_wps_gateway_connect_error
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wps_gateway_unset; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wps_disconnected;
		},
        SINGLE_ERROR
		{ 
		text= r_nw_stat_cancelled; // nw_stat_wps_aborted
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wps_security_error 
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wps_security_alert
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // NW_STAT_WPS_SECURITY_ESTABLISHED
		},

/* status codes for wim */
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // NW_STAT_WIM_NO_MATCHING_CERTIFICATE,
		}, 
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // NW_STAT_WIM_PIN_BLOCKED,
		}, 
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  // NW_STAT_INVALID_CERTIFICATE,
		},

       SINGLE_ERROR
		{ 
		text = r_err_wim_error;  //   NW_STAT_WIM_ERR,
		},

       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;   //   NW_STAT_SEC_HANDSHAKE_FAILED,
		},

       SINGLE_ERROR
		{ 
		text = r_nw_stat_failure;  // NW_STAT_WIM_SESSION_NOT_SET,
		},

       SINGLE_ERROR
		{ 
		text = r_err_wim_decode_err;  // NW_STAT_WIM_DECODE_ERR,
		},

       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;   // NW_STAT_CERT_NOT_YET_VALID,
		},

       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  //   NW_STAT_CERT_EXPIRED,
		},

       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  //     NW_STAT_UNKNOWN_CA
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  //     NW_STAT_UNSUPPORTED_CERTIFICATE_TYPE,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;   //     NW_STAT_WIM_NO_WIM,
		},
       SINGLE_ERROR
		{ 
		text = r_err_wim_init_failed;  //   NW_STAT_WIM_INIT_FAILED,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;   //   NW_STAT_WIM_ITEM_NOT_FOUND,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;    //   NW_STAT_WIM_BAD_PIN,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;   //   NW_STAT_CERTIFICATE_REVOKED,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;    //   NW_STAT_CLIENT_AUTH_NOT_SUPPORTED,
		},

//WTLS

       SINGLE_ERROR
		{ 
			flags = ETextResolverBlankErrorFlag;    //   text = r_err_decryption_failed;  //   NW_STAT_WTLS_DECRYPTION_FAILED,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  //   NW_STAT_WTLS_DECOMPRESSION_FAILED,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  //   NW_STAT_UNKNOWN_CERT,
		},
       SINGLE_ERROR
		{ 
		text = r_err_wtls_access_denied;  //   NW_STAT_WTLS_ACCESS_DENIED,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag;  //     NW_STAT_INSUFFIC_SECURITY,
		},
       SINGLE_ERROR
		{ 
		text = r_nw_stat_wps_disconnected; //  NW_STAT_WTLS_USER_CANCELLED,
		},
  

/* status codes for cache */
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_item_not_found
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_item_found
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_url_found
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_item_copied
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_disabled
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_enable
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_not_configured
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_item_too_big
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_space_available
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cache_space_not_available
		},

/* status codes for cookies */
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_cj_nocookie
		},

/* status codes used by the script interpreter */
        SINGLE_ERROR
		{ 
		text=r_nw_stat_file_not_found; // nw_stat_script_card_not_in_deck
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_no_access;  // NW_STAT_SCRIPT_NO_ACCESS, 
		}, 
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args; // nw_stat_script_bad_content
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_script_error_user_exit
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_script_error_user_abort
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args; // nw_stat_script_error_stack_underflow
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args; // nw_stat_script_error_stack_overflow
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args; // nw_stat_script_fatal_lib_func_error
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args;  // NW_STAT_SCRIPT_VERIFICATION_FAILED,
		},
        SINGLE_ERROR
		{ 
		text = r_nw_stat_file_eof;  //NW_STAT_SCRIPT_EXTERNAL_FUNCTION_NOT_FOUND,
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_script_invalid_func_args;   // NW_STAT_SCRIPT_UNABLE_TO_LOAD_COMPILATION_UNIT,
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_no_access;  //   NW_STAT_SCRIPT_ACCESS_VIOLATION
		},
  
/* status codes used by the wml browser*/
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_card_not_in_deck; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_no_access; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_bad_content; 
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wmlbrowser_invalid_url_schema
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wmlbrowser_bad_content_type
		},

/* status codes used by the wmls crypto */
        SINGLE_ERROR
		{ 
		text = r_nw_stat_wps_aborted; // NW_STAT_CRYPTO_USERCANCEL,
		},
        SINGLE_ERROR
		{ 
		text = r_err_crypto_nocert; //   NW_STAT_CRYPTO_NOCERT,
		},

/* wml interpreter content validation errors */
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wmlbrowser_unsupported_version_number
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wmlbrowser_unsupported_public_id
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_unsupported_charset; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_bad_opaque_data; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_bad_pi; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_bad_switchpage_token; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_bad_text; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_bad_element; 
		},
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wmlbrowser_missing_literaltag; 
		},

/* status codes used by the stack adapter*/
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // NW_STAT_WPSA_MAX_REACHED,	
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // NW_STAT_WPSA_NOT_FOUND,
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // NW_STAT_WPSA_DOS,
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wpsa_max_transactions_reached
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_wpsa_max_sessions_reached
		},

/* status codes for the script proxy */
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_scrproxy_scrabort
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_scrproxy_scrbusy
		},
        SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; // nw_stat_scrproxy_scrnotresponding
		},

/* status codes for the image loader */
        SINGLE_ERROR
		{ 
		text = r_err_imgloader_http_error; //NW_STAT_IMGLOADER_HTTP_ERROR,
		},

/* status codes for the wae browser */
        SINGLE_ERROR
		{ 
		text=r_nw_stat_wae_navigation_cancelled; 
		},

 /* Status codes for SI */
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //   NW_STAT_SI_DONE,
		},
  
  /* Status codes used by the WBXML parser */
         SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //   NW_STAT_WBXML_ERROR_BYTECODE,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //     NW_STAT_WBXML_ERROR_CHARSET_UNSUPPORTED,
		},

  /* Connectivity failure status codes used by gateway navigation.
     Refer to WAP End-to-End Security specification */
       SINGLE_ERROR
		{ 
		text = r_err_secinfo_expired;  //   NW_STAT_CONN_SECINFO_EXPIRED,
		},
       SINGLE_ERROR
		{ 
		text = r_err_conn_url_nonsecure;  //   NW_STAT_CONN_URL_NONSECURE,
		},
       SINGLE_ERROR
		{ 
		text = r_nw_stat_file_eof; //   NW_STAT_CONN_NAVDOC_INVALID,
		},
  

  /* Connectivity failure status codes used by
     NW_Http_ConnNeeded() call prior to WPSA requests. */
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //  NW_STAT_CONN_CANCELLED,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //   NW_STAT_CONN_FAILED,
		},
  
    /* Status codes for WTAI functions */
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //    NW_STAT_WTAI_UNSPECIFIED_ERROR,
		},
       SINGLE_ERROR
		{ 
		flags = ETextResolverBlankErrorFlag; //   NW_STAT_WTAI_INVALID_RESPONSE,
		},
       SINGLE_ERROR
		{ 
		text = r_err_invalid_url;  //   NW_STAT_WTAI_INVALID_URI
		},
       SINGLE_ERROR
		{ 
		text = r_err_wtai_invalid_argument;  //   NW_STAT_WTAI_INVALID_ARGUMENT,
		},
       SINGLE_ERROR
		{ 
		text = r_err_wtai_unsupp_funtion;  //   NW_STAT_WTAI_UNSUPPORTED_FUNCTION,
		},
       SINGLE_ERROR
		{ 
		text = r_err_wtai_unsupp_library;  //   NW_STAT_WTAI_UNSUPPORTED_LIBRARY,
		}
  

		};
	}

RESOURCE TBUF r_nw_stat_failure             { buf = qtn_err_failure; } 
RESOURCE TBUF r_nw_stat_file_eof            { buf = qtn_err_file_eof; } 
RESOURCE TBUF r_nw_stat_file_read_error     { buf = qtn_err_file_read_error; } 
RESOURCE TBUF r_nw_stat_out_of_memory       { buf = qtn_memlo_ram_out_of_mem; } //From Avkon.loc
RESOURCE TBUF r_nw_stat_unexpected_error    { buf = qtn_err_unexpected_error; } 
RESOURCE TBUF r_nw_stat_wait_timeout        { buf = qtn_err_wait_timeout; } 
RESOURCE TBUF r_nw_stat_unknown_scheme      { buf = qtn_err_unknown_scheme; } 
RESOURCE TBUF r_nw_stat_too_many_redirects  { buf = qtn_err_too_many_redirects; } 
RESOURCE TBUF r_nw_stat_missing_auth_header { buf = qtn_err_missing_auth_header; } 
RESOURCE TBUF r_nw_stat_cancelled           { buf = qtn_err_wps_aborted; } 
RESOURCE TBUF r_nw_stat_bad_input_param     { buf = qtn_err_bad_input_param; } 
RESOURCE TBUF r_nw_stat_missing_input_param { buf = qtn_err_missing_input_param; } 
RESOURCE TBUF r_nw_stat_malformed_url       { buf = qtn_err_malformed_url; } 
RESOURCE TBUF r_nw_stat_missing_location_header { buf = qtn_err_missing_loc_header; } 
RESOURCE TBUF r_nw_stat_bad_content_loc_header  { buf = qtn_err_bad_content_loc_header; } 
RESOURCE TBUF r_nw_stat_bad_redirect        { buf = qtn_err_bad_redirect; } 
RESOURCE TBUF r_nw_stat_missing_script_referer  { buf = qtn_err_missing_script_referer; } 

/* status codes for protocol stack */
RESOURCE TBUF r_nw_stat_wps_gateway_unset   { buf = qtn_err_wps_gateway_unset; } 
RESOURCE TBUF r_nw_stat_wps_aborted         { buf = qtn_err_wps_aborted; } 

/* status codes used by the script interpreter */
RESOURCE TBUF r_nw_stat_script_invalid_func_args    { buf = qtn_err_script_inv_func_args; } 

/* status codes used by the wml browser*/
RESOURCE TBUF r_nw_stat_wmlbrowser_card_not_in_deck { buf = qtn_err_wmlb_card_not_indeck; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_no_access    { buf = qtn_err_wmlb_no_access; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_content  { buf = qtn_err_wmlb_bad_content; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_content_type { buf = qtn_err_wmlb_bad_cont_type; } 

/* wml interpreter content validation errors */
RESOURCE TBUF r_nw_stat_wmlbrowser_unsupported_charset  { buf = qtn_err_wmlb_unsupport_char; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_opaque_data  { buf = qtn_err_wmlb_bad_opaque_data; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_pi   { buf = qtn_err_wmlb_bad_pi; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_switchpage_token { buf = qtn_err_wmlb_bad_swpagetoken; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_text { buf = qtn_err_wmlb_bad_text; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_bad_element  { buf = qtn_err_wmlb_bad_element; } 
RESOURCE TBUF r_nw_stat_wmlbrowser_missing_literaltag   { buf = qtn_err_wmlb_missing_literaltag; } 

/* status codes for the wae browser */
RESOURCE TBUF r_nw_stat_wae_navigation_cancelled    { buf = qtn_err_wae_navigation_cancel; } 

RESOURCE TBUF r_err_wps_error 		{ buf = qtn_err_wps_error; }
RESOURCE TBUF r_err_wim_error			{ buf = qtn_err_wim_error; }
RESOURCE TBUF r_err_wtls_access_denied 	{ buf = qtn_err_wtls_access_denied; }
RESOURCE TBUF r_err_decryption_failed 	{ buf = qtn_err_decryption_failed; }
RESOURCE TBUF r_err_unhandled_wsp_status  { buf = qtn_err_unhandled_wsp_status; }
RESOURCE TBUF r_err_secinfo_expired		{ buf = qtn_err_secinfo_expired; } 
RESOURCE TBUF r_err_conn_url_nonsecure    { buf = qtn_err_conn_url_nonsecure; } 
RESOURCE TBUF r_err_crypto_nocert 		{ buf = qtn_err_crypto_nocert; }
RESOURCE TBUF r_err_wim_session_not_set	{ buf = qtn_err_wim_session_not_set; }
RESOURCE TBUF r_err_wim_init_failed 	{ buf = qtn_err_wim_init_failed; }
RESOURCE TBUF r_err_wim_decode_err	 	{ buf = qtn_err_wim_decode_err; }
RESOURCE TBUF r_err_imgloader_http_error	{ buf = qtn_err_imgloader_http_error; }
RESOURCE TBUF r_err_wtai_invalid_argument { buf = qtn_err_wtai_invalid_argument; }
RESOURCE TBUF r_err_wtai_unsupp_funtion	{ buf = qtn_err_wtai_unsupp_funtion; }
RESOURCE TBUF r_err_wtai_unsupp_library	{ buf = qtn_err_wtai_unsupp_library; }
RESOURCE TBUF r_err_bad_redirect_url	{ buf = qtn_err_bad_redirect_url; }
RESOURCE TBUF r_err_invalid_url		{ buf = qtn_err_wtai_invalid_url; }
RESOURCE TBUF r_nw_stat_wps_disconnected 	{ buf = qtn_err_wps_disconnected; }
 
RESOURCE TBUF r_nw_stat_file_not_found 	{ buf = qtn_err_file_not_found; }

 
//100
RESOURCE ARRAY r_error_res_http_errors100
	{
	items=
		{
		SINGLE_ERROR
			{
			text = r_text_wml_err_unkn_serv_resp;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_unkn_serv_resp;
			}
		};
	}

//200
RESOURCE ARRAY r_error_res_http_errors200
	{
	items=
		{
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			},
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			}
		};
	}

//300
RESOURCE ARRAY r_error_res_http_errors300
	{
	items=
		{
		SINGLE_ERROR
			{
			text = r_text_wml_err_unkn_data_form;
			},
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_unkn_data_form;
			},
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			text = r_text_wml_err_reply_unkn;
			}
		};
	}

//400
RESOURCE ARRAY r_error_res_http_errors400
	{
	items=
		{
		SINGLE_ERROR
			{
			text = r_text_http_err_400;
			},
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_402;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_403;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_404;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_405;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_406;
			},
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_408;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_409;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_410;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_411;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_412;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_413;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_414;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_415;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_416;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_417;
			}
		};
	}

//500
RESOURCE ARRAY r_error_res_http_errors500
	{
	items=
		{
		SINGLE_ERROR
			{
			text = r_text_http_err_500;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_501;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_502;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_503;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_504;
			},
		SINGLE_ERROR
			{
			text = r_text_http_err_505;
			}
		};
	}
			
RESOURCE TBUF r_text_wml_err_unkn_serv_resp		{ buf = text_wml_err_unkn_serv_resp;}// "Reply unknown, try again later"
RESOURCE TBUF r_text_wml_err_reply_unkn         { buf = text_wml_err_reply_unkn; }//"Reply unknown"
RESOURCE TBUF r_text_wml_err_unkn_data_form		{ buf = text_wml_err_unkn_data_form; }//"File format unknown"
RESOURCE TBUF r_text_wml_err_file_not_loaded	{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_no_serv_acc		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_file_notavail		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_serv_timeout		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_file_notexist		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_text_too_long		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_addr_too_long		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_unkn_file_cont		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_page_not_disp		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_no_gate_resp		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_server_busy		{ buf = text_wml_err_server_busy;}//"Server busy"
RESOURCE TBUF r_text_wml_err_conn_timeout		{ buf = ""; } // Obsoleted, but left to preserve BC
RESOURCE TBUF r_text_wml_err_inv_addr			{ buf = text_wml_err_inv_addr;}//"Page does not exist"


RESOURCE ARRAY r_error_res_curl  // WapEngStd.h errors
	{
	items=
		{
        	SINGLE_ERROR
			{ 
			text= r_nw_stat_malformed_url; // -10019; 
			} 
		};
	}

// End of File

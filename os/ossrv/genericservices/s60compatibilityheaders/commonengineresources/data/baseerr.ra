// Copyright (c) 2002-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//



RESOURCE ARRAY r_error_res_base_errors
	{
	items=
		{
		SINGLE_ERROR
			{
			flags=EErrorResBlankErrorFlag;				// 0
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -1
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -2
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -3
			},
		SINGLE_ERROR
			{
			text=r_error_res_no_memory;			// -4
			},
		SINGLE_ERROR
			{
			text=r_error_res_not_supp;			// -5
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -6
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -7
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -8
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -9
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -10
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -11
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -12
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -13
			},
		SINGLE_ERROR
			{
			text=r_error_res_in_use;			// -14
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -15
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -16
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -17
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -18
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -19
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -20
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -21
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -22
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -23
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -24
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -25
			},
		SINGLE_ERROR
			{
			text=r_error_res_disk_full;			// -26
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -27
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -28
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -29
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -30
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -31
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -32
			},
		SINGLE_ERROR
			{
			text=r_error_res_timeout;			// -33
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -34
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -35
			},
		SINGLE_ERROR
			{
			text=r_error_res_retry;flags=ETextResolverUnknownErrorFlag;			// -36
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -37
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -38
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -39
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -40
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -41
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -42
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -43
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -44
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -45
			},
		SINGLE_ERROR
			{
			text=r_error_res_exec_not_allow;			// -46
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -47
			},
		SINGLE_ERROR
			{
			text=r_error_res_general;flags=ETextResolverUnknownErrorFlag;			// -48
			}
		};
	}

RESOURCE TBUF r_error_res_general               { buf=qtn_err_os_general; }
RESOURCE TBUF r_error_res_retry            	{ buf=qtn_err_os_retry; } 
RESOURCE TBUF r_error_res_no_memory             { buf=qtn_memlo_ram_out_of_mem; }// from AVKON.LOC
RESOURCE TBUF r_error_res_disk_full             { buf=qtn_memlo_not_enough_memory; } //from AVKON.LOC

RESOURCE TBUF r_error_res_not_supp 		{ buf=qtn_err_not_supp; }
RESOURCE TBUF r_error_res_timeout	 	{ buf=qtn_err_timeout; }
RESOURCE TBUF r_error_res_in_use	 	{ buf=qtn_err_in_use; }
// End of File

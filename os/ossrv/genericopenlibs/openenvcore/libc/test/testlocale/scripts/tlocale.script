// Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

PRINT Run all tlocale
LOAD_SUITE tlocale

CONSECUTIVE

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0009 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call mblen(s,n) with s set to a character of length 1 and n to MB_CUR_MAX after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and locale =  "en_US","ja_JP".
//!								2.Call mblen(mbc,n)
//!								where mbc points to a character of length 2  and n = {MB_CUR_MAX,0}.
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return 2.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0009
RUN_TEST_STEP !Result=0 5 tlocale Testmblen0 \tstdapis\tlocale.ini Section_mblen0
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0009

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0010 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call mblen(s,n) with s set to a character of length 1 and n to MB_CUR_MAX after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and locale = "en_US","ja_JP".
//!								2.Call mblen(mbc,n)
//!								where mbc points to a character of length 1  and n = {MB_CUR_MAX,0}.
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return 2.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0010
RUN_TEST_STEP !Result=0 5 tlocale Testmblen1 \tstdapis\tlocale.ini Section_mblen1
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0010

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0011 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call mblen(s,n) with s pointing to NULL and n as MB_CUR_MAX after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.wctomb( mbc, wc );
//!								where wc = '\0'
//!								3.Call mblen(mbc,n)
//!								where n = {MB_CUR_MAX,0}
//!								4.Check the return value.
//! @SYMTestExpectedResults   	Should return 0.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0011
RUN_TEST_STEP !Result=0 5 tlocale Testmblen2 \tstdapis\tlocale.ini Section_mblen2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0011

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0012 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call mblen(s,n) with invalid invalid multibyte character and n as  MB_CUR_MAX after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and locale =  "en_US","ja_JP".
//!								2.Call mblen(mbc,n)
//!								mbc = invalid character set and n ={1,0}
//!								4.Check the return value.
//! @SYMTestExpectedResults   	Should return -1 and set errno = EILSEQ.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0012
RUN_TEST_STEP !Result=0 5 tlocale Testmblen3 \tstdapis\tlocale.ini Section_mblen3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0012


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0013 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call mblen(s,n) with NULL string as input and n as MB_CUR_MAX after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category =""LC_CTYPE"" and  locale =  ""en_US"",""ja_JP"".
//!								2.Call mblen(s,n)
//!								where s = NULL and n = {MB_CUR_MAX,0}
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return 0 as state encoding is not supported.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0013
RUN_TEST_STEP !Result=0 5 tlocale Testmblen4 \tstdapis\tlocale.ini Section_mblen4
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0013


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0014
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call wctomb( s,wchar) with s as a null pointer and wchar with some valid character value after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and locale =  "en_US","ja_JP".
//!								2.Call wctomb(NULL,L'A')
//!								mbc = NULL
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return 0
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0014
RUN_TEST_STEP !Result=0 5 tlocale Testwctomb0 \tstdapis\tlocale.ini Section_wctomb0
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0014

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0015 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call wctomb( s,wchar) with s not set to NULL and wchar set to '\0' after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Call wctomb(mbc,L'\0')								mbc = NULL
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return 1
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0015
RUN_TEST_STEP !Result=0 5 tlocale Testwctomb1 \tstdapis\tlocale.ini Section_wctomb1
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0015

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0016 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call wctomb( s,wchar) with s not set to NULL and wchar set to L'a' after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Call wctomb(mbc,L'a')
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return 1
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0016
RUN_TEST_STEP !Result=0 5 tlocale Testwctomb2 \tstdapis\tlocale.ini Section_wctomb2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0016

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0017 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Call wctomb( s,wchar) with s not set to NULL and wchar set to an invalid multibyte character  after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category =""LC_CTYPE"" and  locale =  ""en_US"",""ja_JP"".
//!								2.Call wctomb(mbc,wchar)
//!								where wchar is not a valid multibyte character.
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return -1
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0017
RUN_TEST_STEP !Result=0 5 tlocale Testwctomb3 \tstdapis\tlocale.ini Section_wctomb3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0017


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0018
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			mbtowc(wchar , mbc,n) is called 
//!								with mbc as a null pointer 0r '\0' or invalid char sequence after changing the programs current locale using setlocale() with different possible option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Call mbtowc(wchar,mbc,n) where mbc = NULL or '\0' or invalid char ;
//!								3.Check the return value for each call.
//! @SYMTestExpectedResults   	Should return 0 when mbc is either NULL or '\0' and -1 for invalid char sequence with errno = EILSEQ.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0018
RUN_TEST_STEP !Result=0 5 tlocale Testmbtowc0 \tstdapis\tlocale.ini Section_mbtowc0
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0018


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0019 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			1.Call mbtowc(wchar , mbc,n)  where n = 0 after changing the programs current locale using setlocale() with different possible option.
//!								2.Call mbtowc(wchar , mbc,n)  where mbc = "a" and n = 1 after changing the programs current locale  using setlocale() with different possible option.
//!								3.Call mbtowc(wchar , mbc,n)  where mbc is  a valid multibyte character with size > MB_CUR_MAX and n > 0 && n <= MB_CUR_MAX  after changing the programs current locale using setlocale() with different possible option. 
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Call mbtowc(wchar,mbc,n) where mbc = NULL.
//!								3.Check the return value.
//! @SYMTestExpectedResults   	1.Should return 0.
//!								2.Should return 1.
//!								3.Should return n.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0019
RUN_TEST_STEP !Result=0 5 tlocale Testmbtowc1 \tstdapis\tlocale.ini Section_mbtowc1
RUN_TEST_STEP !Result=0 5 tlocale Testmbtowc1 \tstdapis\tlocale.ini Section_mbtowc2
RUN_TEST_STEP !Result=0 5 tlocale Testmbtowc1 \tstdapis\tlocale.ini Section_mbtowc3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0019

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0020 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			1.Test case to check if pwcs is a null pointer, mbstowcs() returns no of bytes required to convert the entire array regardless of the value of n after setting the locale.
//!								2.Test case to check if the parameter n( the no of elements to be modified in the array)  is 0  mbstowcs() returns 0 after setting the locale.
//!								3.Test case to check when the source buffer (mbs) is empty it should return 0 after setting the locale.
//!								4.Test case to check the return value when source buffer(mbs)  is of length 4 while destination and n is not null after setting the locale.
//!								5.Test case to check if the array is zero terminated or not null after setting the locale.
//!								6.Test case to check no more than n elements are modified in the array pointed to by pwcs after setting the current locale.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category ="LC_CTYPE" and locale = "en_US","ja_JP".
//!								2.Call isalpha(int c) where c = 0 to 127(Ascii value).
//!								3.Check the retrun value.
//! @SYMTestExpectedResults   	1.Should return 5(No bytes required to convert the entire array regardless of the value of n)
//!								2.Should return 0.
//!								3.Should return 0.
//!								4.Should return 4(the number of the array elements modified ).
//!								5.Should return 4( the number of the array elements modified ).
//!								6.Should return n(3)
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0020
RUN_TEST_STEP !Result=0 5 tlocale Testmbstowcs \tstdapis\tlocale.ini Section_mbstowcs0
RUN_TEST_STEP !Result=0 5 tlocale Testmbstowcs \tstdapis\tlocale.ini Section_mbstowcs1
RUN_TEST_STEP !Result=0 5 tlocale Testmbstowcs \tstdapis\tlocale.ini Section_mbstowcs2
RUN_TEST_STEP !Result=0 5 tlocale Testmbstowcs \tstdapis\tlocale.ini Section_mbstowcs3
RUN_TEST_STEP !Result=0 5 tlocale Testmbstowcs \tstdapis\tlocale.ini Section_mbstowcs4
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0020

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0021
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the behaviour of wcstombs() with different locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Call wcstombs(NULL, pwcs,n)
//!								where pwcs = L"hello"
//!								3.Should return 5.
//!								5.Call wcstombs(mbs, pwcs,n)
//!								where pwcs = L"hello" and n = 0,3
//!								6.Should return 0 when n= 0 and 3 when n=3
//!							    7.Call wcstombs(mbs, pwcs,n)
//!								where pwcs = L"hello" and n = 5
//!								8.Should return 5.
//! @SYMTestExpectedResults    Should return the number of bytes (not characters) translated and written to mbstr, not including the ending null-character.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0021
RUN_TEST_STEP !Result=0 5 tlocale Testwcstombs \tstdapis\tlocale.ini Section_wcstombs0
RUN_TEST_STEP !Result=0 5 tlocale Testwcstombs \tstdapis\tlocale.ini Section_wcstombs1
RUN_TEST_STEP !Result=0 5 tlocale Testwcstombs \tstdapis\tlocale.ini Section_wcstombs2
RUN_TEST_STEP !Result=0 5 tlocale Testwcstombs \tstdapis\tlocale.ini Section_wcstombs3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0021

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0022
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the behaviour of wcrtomb(s,wc,ps) when s is NULL after setting the programs locale using setlocale() with different possible supported option.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Call wcrtomb(NULL,L'A',&ps)
//!								3.Call wcrtomb(NULL,L'\0',&ps)
//!								4.Check the return value.
//! @SYMTestExpectedResults   	Should return 1 for both the call.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0022
RUN_TEST_STEP !Result=0 5 tlocale Testwcrtomb0 \tstdapis\tlocale.ini Section_wcrtomb0
RUN_TEST_STEP !Result=0 5 tlocale Testwcrtomb0 \tstdapis\tlocale.ini Section_wcrtomb1
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0022

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0023
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the behaviour  of  wcrtomb(s,wc,ps) when wc is an invalid wide character.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.wcrtomb(mbBuff, wc, &state)
//!								wc = (0 to 0x80)
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return the  number of bytes needed to represent the character that corresponds to the wide character given by wc
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0023
RUN_TEST_STEP !Result=0 5 tlocale Testwcrtomb1 \tstdapis\tlocale.ini Section_wcrtomb2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0023

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0024
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the return value of  wcrtomb(s,wc,ps) when all parameter is NULL.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Call wcrtomb(NULL,'\0',NULL)
//!								3.Check the return value .
//! @SYMTestExpectedResults   	Should return 1.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0024
RUN_TEST_STEP !Result=0 5 tlocale Testwcrtomb_NULL \tstdapis\tlocale.ini Section_wcrtomb3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0024

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0025
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the behaviour  of  wcrtomb(s,wc,ps) when wc is an invalid wide character.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Call wcrtomb(s,wc,ps)
//!								wc =invalid wide character
//!								3.Check the return value and errno.
//! @SYMTestExpectedResults   	Should return (size_t)-1 and errno =EILSEQ.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0025
RUN_TEST_STEP !Result=0 5 tlocale Testwcrtomb_Neg1 \tstdapis\tlocale.ini Section_wcrtomb4
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0025


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0026
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the behaviour of wcrtombs(s,wc,ps) when ps points to an  object  that  contains  an  invalid  conversion  state.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Call wcrtomb(s,wc,ps)
//!								3.Check the return value and errno.
//! @SYMTestExpectedResults   	Should return (size_t)-1 and errno =EINVAL.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0026
RUN_TEST_STEP !Result=0 5 tlocale Testwcrtomb_Neg2 \tstdapis\tlocale.ini Section_wcrtomb5
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0026

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0027
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the  behaviour of wcscoll() with different input after changing the locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category ="LC_COLLATE" and  locale =  "en_US","ja_JP"
//!								2.Should return the string associated with the specified category (LC_COLLATE) for the new locale.
//!								3.3.Call wcscoll(wcs1,wcs2)
//!								4.Check the return value and errno.
//! @SYMTestExpectedResults   	Should return an integer greater than, equal to, or less than 0, if  wcs1 is greater than, equal to, or less than wcs2 and errno should be 0.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0027
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll0
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll1
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll2
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll3
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll4
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll5
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll6
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll7
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll8
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll9
RUN_TEST_STEP !Result=0 5 tlocale Testwcscoll \tstdapis\tlocale.ini Section_wcscoll10
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0027

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0028
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the  behaviour of wcsicoll() with different input after changing the locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category ="LC_COLLATE" and  locale =  "en_US","ja_JP"
//!								2.Should return the string associated with the specified category (LC_COLLATE) for the new locale.
//!								3.3.Call wcsicoll(wcs1,wcs2)
//!								4.Check the return value and errno.
//! @SYMTestExpectedResults   	Should return an integer greater than, equal to, or less than 0, if  wcs1 is greater than, equal to, or less than wcs2 and errno should be 0.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0028
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll0
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll1
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll2
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll3
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll4
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll5
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll6
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll7
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll8
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll9
RUN_TEST_STEP !Result=0 5 tlocale Testwcsicoll \tstdapis\tlocale.ini Section_wcsicoll10
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0028

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0029
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the  behaviour of wcslwr() with different input after changing the locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP"
//!								2.Should return the string associated with the specified category (LC_CTYPE) for the new locale.
//!								3.Call dst = wcslwr(src)
//!								4.Validate the dst using wcscmp(expected_result,dst)
//! @SYMTestExpectedResults   	Should return a pointer to the altered string, on successful conversion of  wcs, else it returns NULL pointer.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0029
RUN_TEST_STEP !Result=0 5 tlocale Testwcslwr \tstdapis\tlocale.ini Section_wcslwr0
RUN_TEST_STEP !Result=0 5 tlocale Testwcslwr \tstdapis\tlocale.ini Section_wcslwr1
RUN_TEST_STEP !Result=0 5 tlocale Testwcslwr \tstdapis\tlocale.ini Section_wcslwr2
RUN_TEST_STEP !Result=0 5 tlocale Testwcslwr \tstdapis\tlocale.ini Section_wcslwr3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0029

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-00030
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the  behaviour of wcsupr() with different input after changing the locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP"
//!								2.Should return the string associated with the specified category (LC_CTYPE) for the new locale.
//!								3.Call dst = wcsupr(src)
//!								4.Validate the dst using wcscmp(expected_result,dst)
//! @SYMTestExpectedResults   	Should return a pointer to the altered string, on successful conversion of  wcs, else it returns NULL pointer.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0030
RUN_TEST_STEP !Result=0 5 tlocale Testwcsupr \tstdapis\tlocale.ini Section_wcsupr0
RUN_TEST_STEP !Result=0 5 tlocale Testwcsupr \tstdapis\tlocale.ini Section_wcsupr1
RUN_TEST_STEP !Result=0 5 tlocale Testwcsupr \tstdapis\tlocale.ini Section_wcsupr2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0030

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0031
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Case1 Test case to check the behavior of wctrans() with a valid character mapping name "tolower" after changing the programs locale .
//!								Case2 Test case to check the behavior of wctrans() with a valid character mapping name "toupper" after changing the programs locale . 
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Should return the string associated with the specified category (LC_CTYPE) for the new locale.
//!								3.Call type = wctrans(char *input) where input = "tolower" or  "toupper" or some invalid value "asdwer"
//!								4.Should return a non-zero object of type wctrans_t.
//!								5.Validate the return value using  towctrans()		
//! @SYMTestExpectedResults   	Upon successful completion should return a non-zero object of type wctrans_t else it will return 0 and set errno to EINVAL .
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0031
RUN_TEST_STEP !Result=0 5 tlocale Testwctrans \tstdapis\tlocale.ini Section_wctrans0
RUN_TEST_STEP !Result=0 5 tlocale Testwctrans \tstdapis\tlocale.ini Section_wctrans1
RUN_TEST_STEP !Result=0 5 tlocale Testwctrans \tstdapis\tlocale.ini Section_wctrans2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0031


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0032
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the return value of wctype() if the paramter is "alnum","digit","lower","punct" after changing the programs locale.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Should return the string associated with the specified category (LC_CTYPE) for the new locale.
//!								3.Call type = wctype(char * property)
//!								where property = "alnum","digit","lower","punct"
//!								4.Return  an object of type wctype_t.
//!								5.Validate the return value using  iswctype(wc,type)
//!								
//! @SYMTestExpectedResults   	The wctype() function shall return 0 if the given character class name is not valid for the current locale (category LC_CTYPE )
//!								 otherwise, it shall return an object of type wctype_t that can be used in calls to iswctype().
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0032
RUN_TEST_STEP !Result=0 5 tlocale Testwctype \tstdapis\tlocale.ini Section_wctype0
RUN_TEST_STEP !Result=0 5 tlocale Testwctype \tstdapis\tlocale.ini Section_wctype1
RUN_TEST_STEP !Result=0 5 tlocale Testwctype \tstdapis\tlocale.ini Section_wctype2
RUN_TEST_STEP !Result=0 5 tlocale Testwctype \tstdapis\tlocale.ini Section_wctype3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0032


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0033
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Negative test case to check the return value of wctype() by passing an invalid input "xyzaaa"  after changing the programs locale. 
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP")
//!								2.Should return the string associated with the specified category (LC_CTYPE) for the new locale.
//!								3.Call type = wctype(char * property)
//!								where property = "xyzaaa"
//!								4.Should return  0 .			
//! @SYMTestExpectedResults   	Should return  0 .
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0033
RUN_TEST_STEP !Result=0 5 tlocale Testwctype_Neg \tstdapis\tlocale.ini Section_wctype4
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0033

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0034
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the behaviour of wcstod() with different locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale) ( where as category ="LC_NUMERIC" and  locale =  "en_US","ja_JP")
//!								2.Should return the string associated with the specified category (LC_NUMERIC) for the new locale.
//!								3.Call type = wcstod(wcs,endPtr)
//!								4.Check the return value.			
//! @SYMTestExpectedResults   	Upon successful completion, it will return the converted value. If no conversion could be performed, 0 shall be returned
//!								and errno may be set to EINVAL.If the correct value is outside the range of representable values 
//!								errno shall be set to ERANGE.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0034
RUN_TEST_STEP !Result=0 5 tlocale Testwcstod \tstdapis\tlocale.ini Section_wcstod0
RUN_TEST_STEP !Result=0 5 tlocale Testwcstod \tstdapis\tlocale.ini Section_wcstod1
RUN_TEST_STEP !Result=0 5 tlocale Testwcstod \tstdapis\tlocale.ini Section_wcstod2
RUN_TEST_STEP !Result=0 5 tlocale Testwcstod \tstdapis\tlocale.ini Section_wcstod3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0034

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0035
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Case1 to check  the error returned by wcstod(wcs,endptr) where the input value is out of scope with different supported locales.
//!								Case2 to check the return value of wctob(c) when c is a single wide character with different local setting. 
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Should return the string associated with the specified category (LC_NUMERIC) for the new locale.
//!								3.Call type = wcstod(wcs,endptr) where wcs = L"4752364536550478678e-674635jkjk"
//!								4.Call wctob(L'a')
//!								5.Check the return value for each call.	
//! @SYMTestExpectedResults   	Should set errno = ERANGE for case1 and Should return 'a' for case2.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0035
RUN_TEST_STEP !Result=0 5 tlocale Testwctob \tstdapis\tlocale.ini Section_wctob0
RUN_TEST_STEP !Result=0 5 tlocale Testwctob \tstdapis\tlocale.ini Section_wctob1
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0035

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0036
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check the return value of wctob(c) when value of c is WEOF with different local setting. 
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Call wctob(WEOF)
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return WEOF
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0036
RUN_TEST_STEP !Result=0 5 tlocale Testwctob_Neg \tstdapis\tlocale.ini Section_wctob2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0036

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0037
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Case1 to check the return value of wcswidth(pwcs ,n) when n is larger than the no of  character in the string pointed by pwcs with different locale setting.
//!								Case2 to check the return value of wcswidth(pwcs ,n) when n is smaller  than the no of  character in the string pointed by pwcs with different locale setting.
//!								Case3 to check the return value of wcswidth(pwcs ,n) when wide character is a NULL string  with different locale setting.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								3.Call wcswidth(L"test case",50)
//!								4.wcswidth(L"test case",5)
//!								5.wcswidth(L"",5)
//!								6.Check the return value for each call.
//! @SYMTestExpectedResults   	Should return 9,5,0 respectively for case1 ,case2 and case3.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0037
RUN_TEST_STEP !Result=0 5 tlocale Testwcswidth \tstdapis\tlocale.ini Section_wcswidth0
RUN_TEST_STEP !Result=0 5 tlocale Testwcswidth \tstdapis\tlocale.ini Section_wcswidth1
RUN_TEST_STEP !Result=0 5 tlocale Testwcswidth \tstdapis\tlocale.ini Section_wcswidth2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0037

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0038
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Negative test case to check the return value of wcswidth(pwcs ,n) when  wide character is a non printable string  with different locale setting.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								2.Call wcswidth(L"\n\f\t",5)
//!								3.Check the return value.
//! @SYMTestExpectedResults   	Should return -1.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0038
RUN_TEST_STEP !Result=0 5 tlocale Testwcswidth_Neg \tstdapis\tlocale.ini Section_wcswidth3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0038

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0039
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Case1 to check wcwidth(wc) with a single wide character with different locales.
//!								Case2 to check wcwidth(wc) if wc is a NULL character with different locales.
//!								Case3 wcwidth(wc) if wc is a not a printable wide character with different locales.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								3.Call wcwidth(L'a')
//!								4.Call wcwidth(L'\0')
//!								5.Call wcwidth(L'\t')
//! @SYMTestExpectedResults   	Should return 1,0,-1 respectively for case1 ,case2 and case3.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0039
RUN_TEST_STEP !Result=0 5 tlocale Testwcwidth \tstdapis\tlocale.ini Section_wcwidth0
RUN_TEST_STEP !Result=0 5 tlocale Testwcwidth \tstdapis\tlocale.ini Section_wcwidth1
RUN_TEST_STEP !Result=0 5 tlocale Testwcwidth \tstdapis\tlocale.ini Section_wcwidth2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0039

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0040 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check mbrlen() gets the number of bytes in a character after setting locale to "en_us" .
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								3.Call mbrlen(mbc, MB_CUR_MAX, ps) where mbc = 0x0509 and  ps = NULL.
//!								4.Call mbrlen(mbc,0, ps) where mbc = 0x0509 and ps = NULL.
//!								5.Check the return value.
//! @SYMTestExpectedResults   	Should return 2,0
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0040
RUN_TEST_STEP !Result=0 5 tlocale Testmbrlen0 \tstdapis\tlocale.ini Section_mbrlen0
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0040


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0041
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check mbrlen()  returns  0 when the input is a NULL char.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(category,locale)  where as category ="LC_CTYPE" and  locale =  "en_US","ja_JP".
//!								3.Call mbrlen(mbc, MB_CUR_MAX, ps) where mbc =L'\0' and  ps = NULL.
//!								4.Call mbrlen(mbc,0, ps) where ps = NULL.
//!								5.Check the return value.
//! @SYMTestExpectedResults   	Should return 0,0
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0041
RUN_TEST_STEP !Result=0 5 tlocale Testmbrlen1 \tstdapis\tlocale.ini Section_mbrlen1
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0041

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0042
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Case1 to check mbrtowc() returns 1 as it parses first multibyte.
//!								Case2  to caheck mbrtowc() returns 0 (number of wide chars that make
//!								up the wide char string) when the source buffer (mbcbuf) is empty.
//!								Case3 to check mbrtowc() returns  0 (number of wide chars that make up the wide char string) when the dest buffer is of zero length.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(LC_CTYPE,"en_us")
//!								2.Check the return value should not be NULL.
//!								3.mbrtowc(pwc,s,n,ps);
//!								4.Check the return value
//! @SYMTestExpectedResults   	Case1 Should return 1.
//!								Case2 Should return 0.
//!								Case3 Should return 0.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0042
RUN_TEST_STEP !Result=0 5 tlocale Testmbrtowc \tstdapis\tlocale.ini Section_mbrtowc0
RUN_TEST_STEP !Result=0 5 tlocale Testmbrtowc \tstdapis\tlocale.ini Section_mbrtowc1
RUN_TEST_STEP !Result=0 5 tlocale Testmbrtowc \tstdapis\tlocale.ini Section_mbrtowc2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0042

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0043
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to check mbrtowc() returns -1 and sets errno to EILSEQ as the  multibyte sequence passed is invalid one.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(LC_CTYPE,"en_us")
//!								2.Check the return value which should not be NULL.
//!								3.Call mbrtowc(dst,src,3,NULL)  where dst is set to some invalid multibyte character.
//!								4.Check th return value.
//! @SYMTestExpectedResults   	Should return -1 and set errno to EILSEQ..
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0043
RUN_TEST_STEP !Result=0 5 tlocale Testmbrtowc_Neg \tstdapis\tlocale.ini Section_mbrtowc3
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0043

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0044
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Case1 to check mbsrtowcs returns  4 (number of wide chars that make up the wide char string) when the input MB char string is of length 4.
//!								Case2 to check mbsrtowcs returns  3 when the input MB char string is of length 4 but 
//!								not enough space in dest buffer.
//!								Case3 to check mbsrtowcs returns  0 when the source buffer  is empty.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(LC_CTYPE,"en_us")
//!								2.Check the return value which should not be NULL.
//!								3.call mbsrtowcs(dst,src,len,ps);
//!								4.Check the return value.
//! @SYMTestExpectedResults   	Case1 Should return 4.
//!								Case2 Should return 3.
//!								Case3 Should return 0.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0044
RUN_TEST_STEP !Result=0 5 tlocale Testmbsrtowcs \tstdapis\tlocale.ini Section_mbsrtowcs0
RUN_TEST_STEP !Result=0 5 tlocale Testmbsrtowcs \tstdapis\tlocale.ini Section_mbsrtowcs1
RUN_TEST_STEP !Result=0 5 tlocale Testmbsrtowcs \tstdapis\tlocale.ini Section_mbsrtowcs2
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0044

//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0045
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			To check the  behaviour of mbsrtowcs() when destination buffer is NULL with different locale settings.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(LC_CTYPE,"en_us")
//!								2.Check the return value which should not be NULL.
//!								3.Call mbsrtowcs(NULL,"hello",len,NULL)  where len = 5 and len =0;
//!								4.Check the return value.
//! @SYMTestExpectedResults   	Should retrun 5 for both len = 0 and len = 5 when dstination buffer is NULL.	
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0045
RUN_TEST_STEP !Result=0 5 tlocale Testmbsrtowcs1 \tstdapis\tlocale.ini Section_mbsrtowcs3
RUN_TEST_STEP !Result=0 5 tlocale Testmbsrtowcs1 \tstdapis\tlocale.ini Section_mbsrtowcs4
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0045


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0046 
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			1.case1 to varify mbsinit() returns  non-zero if initial state is set.
//!								2.case2 to varify mbsinit returns  non-zero if mbstate_t state is a null pointer.
//!								3.case3 to varify mbsinit returns zero if mbstate_t state is not a null.
//!								
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(LC_CTYPE,""en_us"")
//!								2.Check the return value should not be NULL.
//!								3.Call mbsinit(&state ).
//!								4.Check the return value.
//! @SYMTestExpectedResults   	1.Case1 should return a non-zero value.
//!								2.Case2 Should return a non-zero value.
//!								3.Case3 should return 0.
//

START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0046
RUN_TEST_STEP !Result=0 5 tlocale Testmbsinit \tstdapis\tlocale.ini Section_mbsinit
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0046


//
//! @SYMTestCaseID				OPENENV-LIBC-CIT-TLOCALE-0047
//! @SYMPREQ 					PREQ 1440
//! @SYMTestCaseDesc 			Test case to varify wcsrtombs(dst, &src, sizeof dstArr, &state )  destination buffer is updated properly with a valid input stream after setting local to en_US.
//! @SYMTestPriority 			High 
//! @SYMTestStatus 				Implemented   			  
//! @SYMTestActions     		1.Call setlocale(LC_CTYPE,"en_us")
//!								2.Check the return value should not be NULL.
//!								3.Call wcsrtombs(dst, &src, sizeof dstArr, &state ) where src = L'"ABCD" and dstArr[(MB_CUR_MAX+1)*5].
//!								4.Check the return value
//! @SYMTestExpectedResults   	Should return the no of bytes written i.e 4 and dst = "ABCD\0"
//


START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0047
RUN_TEST_STEP !Result=0 5 tlocale Testwcsrtombs \tstdapis\tlocale.ini  Section_wcsrtombs
END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0047

 //selocale()
 START_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0048
 RUN_TEST_STEP !Result=0 5 tlocale Testsetlocale \tstdapis\tlocale.ini  Section_selocale0
 END_TESTCASE OPENENV-LIBC-CIT-TLOCALE-0048




 
/** @file ../include/regex.h
@internalComponent
*/

/** @fn  regcomp(regex_t *  preg, const char *  pattern, int cflags)
@param preg
@param pattern
@param cflags

Note: This description also covers the following functions -
 regexec()  regerror()  regfree() 

@return   regcomp function returns zero for a successful compilation or an error code for failure. regexec function returns zero for a successful match or REG_NOMATCH for failure.

regcomp function returns zero for a successful compilation or an error code for failure. 

regexec function returns zero for a successful match or REG_NOMATCH for failure. 

These routines implement regular expressions ("REs.") The regcomp function compiles an RE written as a string into an internal form, regexec matches that internal form against a string and reports results, regerror transforms error codes from either into human-readable messages, and regfree frees any dynamically-allocated storage used by the internal form of an RE. 
@code
The header   #include <regex.h>declares two structure types,  
  regex_t and  
  regmatch_t, the former for compiled internal forms and the latter for match reporting. It also declares the four functions, a type  
  regoff_t, and a number of constants with names starting with "REG_." 
The regcomp function compiles the regular expression contained in the pattern string, subject to the flags in cflags, and places the results in the 
regex_t structure pointed to by preg. The cflags argument is the bitwise OR of zero or more of the following flags: REG_EXTENDED  
Compile modern ("extended") REs, rather than the obsolete ("basic") REs that are the default.  
REG_BASIC  This is a synonym for 0, provided as a counterpart to REG_EXTENDED to improve readability.  
REG_NOSPEC  Compile with recognition of all special characters turned off. All characters are thus considered ordinary, so the "RE" is a literal string. This is an extension, compatible with but not specified by, and should be used with caution in software intended to be portable to other systems. REG_EXTENDED and REG_NOSPEC may not be used in the same call to regcomp.  
REG_ICASE  Compile for matching that ignores upper/lower case distinctions.  
REG_NOSUB  Compile for matching that need only report success or failure, not what was matched.  
REG_NEWLINE  Compile for newline-sensitive matching. By default, newline is a completely ordinary character with no special meaning in either REs or strings. With this flag, ‘[^’ bracket expressions and ‘.’ never match newline, a ‘^’ anchor matches the null string after any newline in the string in addition to its normal function, and the ‘$’ anchor matches the null string before any newline in the string in addition to its normal function.  
REG_PEND  The regular expression ends, not at the first NUL, but just before the character pointed to by the re_endp member of the structure pointed to by preg. The re_endp member is of type  
const char *. This flag permits inclusion of NULs in the RE; they are considered ordinary characters.  
@endcode

When successful, regcomp returns 0 and fills in the structure pointed to by preg. One member of that structure (other than re_endp) is publicized: re_nsub, of type 
 
  size_t, contains the number of parenthesized subexpressions within the RE (except that the value of this member is undefined if the REG_NOSUB flag was used). If regcomp fails, it returns a non-zero error code; see DIAGNOSTICS. 
The regexec function matches the compiled RE pointed to by preg against the string, subject to the flags in eflags, and reports results using nmatch, pmatch, and the returned value. The RE must have been compiled by a previous invocation of regcomp. The compiled form is not altered during execution of regexec, so a single compiled RE can be used simultaneously by multiple threads. 

By default, the NUL-terminated string pointed to by string is considered to be the text of an entire line, minus any terminating newline. The eflags argument is the bitwise OR of zero or more of the following flags: REG_NOTBOL  The first character of the string is not the beginning of a line, so the ‘^’ anchor should not match before it. This does not affect the behavior of newlines under REG_NEWLINE.  
REG_NOTEOL  The NUL terminating the string does not end a line, so the ‘\$’ anchor should not match before it. This does not affect the behavior of newlines under REG_NEWLINE.  
REG_STARTEND  
  The string is considered to start at string + pmatch [0]. rm_so and to have a terminating NUL located at string + pmatch [0]. rm_eo (there need not actually be a NUL at that location), regardless of the value of nmatch. See below for the definition of pmatch and nmatch. Note that a non-zero rm_so does not imply REG_NOTBOL; REG_STARTEND affects only the location of the string, not how it is matched.  



Normally, regexec returns 0 for success and the non-zero code REG_NOMATCH for failure. Other non-zero error codes may be returned in exceptional situations; see DIAGNOSTICS. 

If REG_NOSUB was specified in the compilation of the RE, or if nmatch is 0, regexec ignores the pmatch argument (but see below for the case where REG_STARTEND is specified). Otherwise, pmatch points to an array of nmatch structures of type 
 
  regmatch_t. Such a structure has at least the members rm_so and rm_eo, both of type  
  regoff_t (a signed arithmetic type at least as large as an  
  off_t and a  
  ssize_t), containing respectively the offset of the first character of a substring and the offset of the first character after the end of the substring. Offsets are measured from the beginning of the string argument given to regexec. An empty substring is denoted by equal offsets, both indicating the character following the empty substring. 
@code
The 0th member of the pmatch array is filled in to indicate what substring of string was matched by the entire RE. Remaining members report what substring was matched by parenthesized subexpressions within the RE; member i reports subexpression i, with subexpressions counted (starting at 1) by the order of their opening parentheses in the RE, left to right. Unused entries in the array (corresponding either to subexpressions that did not participate in the match at all, or to subexpressions that do not exist in the RE (that is, i > preg -> re_nsub)) have both rm_so and rm_eo set to -1. If a subexpression participated in the match several times, the reported substring is the last one it matched. (Note, as an example in particular, that when the RE ‘(b*)+’ matches ‘bbb,’ the parenthesized subexpression matches each of the three 'bs' and then an infinite number of empty strings following the last ‘b,’ so the reported substring is one of the empties.) 
@endcode

If REG_STARTEND is specified, pmatch must point to at least one 
 
  regmatch_t (even if nmatch is 0 or REG_NOSUB was specified), to hold the input offsets for REG_STARTEND. Use for output is still entirely controlled by nmatch; if nmatch is 0 or REG_NOSUB was specified, the value of pmatch [0] will not be changed by a successful regexec. 
The regerror function maps a non-zero errcode from either regcomp or regexec to a human-readable, printable message. If preg is non- NULL, the error code should have arisen from use of the 
 
  regex_t pointed to by preg, and if the error code came from regcomp, it should have been the result from the most recent regcomp using that  
  regex_t. The ( (regerror);
may be able to supply a more detailed message using information from the  
  regex_t.) The regerror function places the NUL-terminated message into the buffer pointed to by errbuf, limiting the length (including the NUL) to at most errbuf_size bytes. If the whole message will not fit, as much of it as will fit before the terminating NUL is supplied. In any case, the returned value is the size of buffer needed to hold the whole message (including terminating NUL). If errbuf_size is 0, errbuf is ignored but the return value is still correct. 
If the errcode given to regerror is first ORed with REG_ITOA, the "message" that results is the printable name of the error code, e.g. "REG_NOMATCH," rather than an explanation thereof. If errcode is REG_ATOI, then preg shall be non- NULL and the re_endp member of the structure it points to must point to the printable name of an error code; in this case, the result in errbuf is the decimal digits of the numeric value of the error code (0 if the name is not recognized). REG_ITOA and REG_ATOI are intended primarily as debugging facilities 

The regfree function frees any dynamically-allocated storage associated with the compiled RE pointed to by preg. The remaining 
 
  regex_t is no longer a valid compiled RE and the effect of supplying it to regexec or regerror is undefined. 
None of these functions references global variables except for tables of constants; all are safe for use from multiple threads if the arguments are safe. 
 


Examples:
@code
#include <stdio.h>
#include <regex.h>
int main()
{
   int ret,match=0;
   regex_t re;
   char errbuf[256];
   ret=regcomp(&re;,"[a-c]",REG_EXTENDED|REG_NOSUB);
   if(ret)
   {
      regerror(ret,&re;,errbuf,sizeof(errbuf));
      printf("compilation failed with error %s
",errbuf);
   }
   else
   {
      match=regexec(&re;,"access.txt|log.txt|passwd.txt",0,NULL,0);
      if(!match) printf("match found
");
      else printf("match not found");
      regfree(&re;);
   }
   return 0;
}

@endcode
 Output
@code
match found

@endcode

Diagnostics:

@code
Non-zero error codes from regcomp and regexec include the following: REG_NOMATCH The regexec function
failed to match REG_BADPAT invalid regular expression REG_ECOLLATE   invalid collating element REG_ECTYPE invalid character class REG_EESCAPE ' \ '
applied to unescapable character REG_ESUBREG invalid backreference number REG_EBRACK brackets ' [ ] '
not balanced REG_EPAREN parentheses ' ( ) '
not balanced REG_EBRACE braces ' { } '
not balanced REG_BADBR invalid repetition count(s) in ' { } ' REG_ERANGE invalid character range in ' [ ] ' REG_ESPACE ran out of memory REG_BADRPT ' ?, ' ' *, '
or ' + '
operand invalid REG_EMPTY empty (sub)expression REG_ASSERT cannot happen - you found a bug REG_INVARG invalid argument, e.g. negative-length string REG_ILLSEQ illegal byte sequence (bad multibyte character) 
 Non-zero error codes from regcomp and regexec include the following: REG_NOMATCH The regexec function
failed to match REG_BADPAT invalid regular expression REG_ECOLLATE   invalid collating element REG_ECTYPE invalid character class REG_EESCAPE ' \ '
applied to unescapable character REG_ESUBREG invalid backreference number REG_EBRACK brackets ' [ ] '
not balanced REG_EPAREN parentheses ' ( ) '
not balanced REG_EBRACE braces ' { } '
not balanced REG_BADBR invalid repetition count(s) in ' { } ' REG_ERANGE invalid character range in ' [ ] ' REG_ESPACE ran out of memory REG_BADRPT ' ?, ' ' *, '
or ' + '
operand invalid REG_EMPTY empty (sub)expression REG_ASSERT cannot happen - you found a bug REG_INVARG invalid argument, e.g. negative-length string REG_ILLSEQ illegal byte sequence (bad multibyte character) 
@endcode

 

@publishedAll
@externallyDefinedApi
*/

/** @fn  regerror(int errcode, const regex_t *  preg, char *  errbuf, size_t errbuf_size)
@param errcode
@param preg
@param errbuf
@param errbuf_size
Refer to  regcomp() for the documentation


 

@publishedAll
@externallyDefinedApi
*/

/** @fn  regexec(const regex_t *  preg, const char * __restrict string, size_t nmatch, regmatch_t pmatch[], int eflags)param preg
@param preg
@param string
@param nmatch
@param pmatch
@param eflags

Refer to  regcomp() for the documentation


 

@publishedAll
@externallyDefinedApi
*/

/** @fn  regfree(regex_t *preg)
@param preg

Refer to  regcomp() for the documentation


 

@publishedAll
@externallyDefinedApi
*/

/** @struct  regex_t

Contains the details of expressions, say no. of subexpressions.

@publishedAll
@externallyDefinedApi
*/

/** @struct  regmatch_t

Includes the following members,

@publishedAll
@externallyDefinedApi
*/

/** @var regmatch_t::rm_so
start of match
*/

/** @var regmatch_t::rm_eo
end of match. 
*/

/** @typedef  typedef	__off_t		regoff_t

signed arithmetic type that can hold the largest value that can be stored in either a type off_t or type ssize_t.

@publishedAll
@externallyDefinedApi
*/

/** @def  REG_EXTENDED	

regcomp() flags. Use Extended Regular Expressions.

@publishedAll
@externallyDefinedApi
*/


/** @def  REG_ICASE

regcomp() flags. Ignore case in match.

@publishedAll
@externallyDefinedApi
*/

/** @def  REG_NOSUB

regcomp() flags. Report only success or fail in regexec().

@publishedAll
@externallyDefinedApi
*/

/** @def  REG_NEWLINE

regcomp() flags. Change the handling of <newline>s.

@publishedAll
@externallyDefinedApi
*/

/** @def  REG_NOTBOL

regexec() flags. The first character of the string pointed to by string is not the beginning of the line. Therefore, the circumflex character ( '^' ), when taken as a special character, shall not match the beginning of string.

@publishedAll
@externallyDefinedApi
*/

/** @def  REG_NOTEOL

regexec() flags. The last character of the string pointed to by string is not the end of the line. Therefore, the dollar sign ( '$' ), when taken as a special character, shall not match the end of string.

@publishedAll
@externallyDefinedApi
*/

/** @def  REG_NOMATCH

regerror() flags. regexec() failed to match.

@publishedAll
@externallyDefinedApi
*/


/** @def  REG_BADPAT

regerror() flags. Invalid regular expression. 

@publishedAll
@externallyDefinedApi
*/

/** @def REG_ECOLLATE

regerror() flags. Invalid collating element referenced.

@publishedAll
@externallyDefinedApi
*/

/** @def REG_ECTYPE

regerror() flags. Invalid character class type referenced.

@publishedAll
@externallyDefinedApi
*/

/** @def REG_EESCAPE

regerror() flags. Trailing 'backslash' in pattern.

@publishedAll
@externallyDefinedApi
*/

/** @def REG_ESUBREG

regerror() flags. Number in "\\digit" invalid or in error.

@publishedAll
@externallyDefinedApi
*/

/** @def REG_EBRACK

regerror() flags. "[]" imbalance. 

@publishedAll
@externallyDefinedApi
*/

/** @def REG_EPAREN

regerror() flags. "\(\)" or "()" imbalance.

@publishedAll
@externallyDefinedApi
*/

/** @def REG_EBRACE

regerror() flags. "\{\}" imbalance.

@publishedAll
@externallyDefinedApi
*/

/** @def REG_BADBR

regerror() flags. Content of "\{\}" invalid: not a number, number too large, more than two numbers, first larger than second. 

@publishedAll
@externallyDefinedApi
*/

/** @def REG_ERANGE

regerror() flags. Invalid endpoint in range expression. 

@publishedAll
@externallyDefinedApi
*/


/** @def REG_ESPACE

regerror() flags.Out of memory. 

@publishedAll
@externallyDefinedApi
*/

/** @def REG_BADRPT

regerror() flags

@publishedAll
@externallyDefinedApi
*/

/** @def REG_ENOSYS

regerror() flags

@publishedAll
@externallyDefinedApi
*/






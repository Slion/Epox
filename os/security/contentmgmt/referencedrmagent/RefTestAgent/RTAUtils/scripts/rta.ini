[CreateDrmArchive]
ContentDescription= c:\RTA\testdata\content.xml
RightsDescription=c:\RTA\testdata\rights.xml
OutputFile= c:\output.drm

[Create2GBDrmArchive]
ContentDescription= c:\RTA\testdata\content2gb.xml
RightsDescription=c:\RTA\testdata\rights.xml
OutputFile= c:\output.drm

[DumpDrmArchive]
Filename = c:\output.contentrights
outputpath = c:\

[ImportDrmArchive]
source = c:\output.contentrights
target = c:\imported.content

[DumpRightsDb]
Filename = c:\rightsdb1.txt

[DumpRightsDb2]
Filename = c:\rightsdb2.txt

[DumpRightsDb3]
Filename = c:\rightsdb3.txt

[LoadOldDb]
DbFilename = c:\rta\testdata\rights_v0.db
TxtDumpFilename = c:\rta\rightsdump.txt
MinDumpSize = 1000

[CompareContentF32Agent]
URI2 = c:\rta\testdata\sample.txt
URI1 = c:\imported.content

[Compare2GBContentF32Agent]
URI2 = c:\rta\testdata\my2gbfile.avi
URI1 = c:\imported.content
[CompareContentTestAgent]
URI2 = c:\rta\testdata\sample.txt
URI1 = c:\imported.content

[SupplyDrm]
OutputPath = C:\
SourceFileName = C:\output.contentrights
SuggestedFileName = supplied.content
MimeType = application/x-rta.drm.contentrights
LeaveResult = 0

[CheckContentMime]
OutputPath = C:\
SourceFileName = C:\output.contentrights
SuggestedFileName = supplied.content
MimeType = application/x-rta.drm.contentrights
LeaveResult = 0
CheckContentMime = ETrue
ExpectedContentMime =text/plain

[CheckImport]
URI1 = c:\supplied.content
URI2 = c:\rta\testdata\sample.txt

[ClientSupplyDrm]
OutputPath = C:\
SourceFileName = C:\output.contentrights
SuggestedFileName = output.content
MimeType = application/x-rta.drm.contentrights
LeaveResult = 0

[CheckImport2]
URI1 = c:\output.content
URI2 = c:\rta\testdata\sample.txt

[ThreadSharing]
URI = c:\output.content
EnableSharing = true

[CreateDrmArchive2]
ContentDescription= c:\RTA\testdata\content2.xml
RightsDescription=c:\RTA\testdata\rights2.xml
OutputFile= c:\container.drm

[SupplyDrm2]
OutputPath = C:\
SourceFileName = C:\container.contentrights
SuggestedFileName = supplied2.drm
MimeType = application/x-rta.drm.contentrights
LeaveResult = 0

[Attribute]
uri	 =c:\output.content
uniqueid =DEFAULT
attribute =0
value	 =1

[AttributeSet]
uri	 =c:\output.content
uniqueid =DEFAULT
attribute1 =0
value1	 =1
attribute2 =1
value2	 =0

[StringAttribute]
uri	 =c:\output.content
uniqueid =DEFAULT
attribute =1
value	 =text/plain
result	 =0

[StringAttributeSet]
uri	 =c:\output.content
uniqueid =DEFAULT
attribute1 =1
value1	 =text/plain
attribute2 =0
value2	 =
result1	 =0
result2  =-17450

[CreateRights]
ContentDescription=
RightsDescription=c:\RTA\testdata\rights3.xml
OutputFile= c:\RTATest001.drm

[ImportRights]
source = c:\RTATest001.rights
target = c:\RTATest001.content

[DeleteRightsViaDeleteFile]
; At rights import time the client passes in a suggested out filename.
; If the client calls DeleteFile with this suggested filename, it wants
; RTA to delete the associated rights.
filename    =C:\RTATest001.content
result	    =0

[ExecuteIntentDisplayOk]
FileName       =c:\output.content
UniqueId       =c:\sample.txt
Intent         =2
ExpectedResult =0

[ExecuteIntentDisplayFail1]
FileName       =c:\output.content
UniqueId       =c:\sample.txt
Intent         =2
ExpectedResult =-17452

[ExecuteIntentDisplayFail2]
FileName       =c:\output.content
UniqueId       =c:\sample.txt
Intent         =2
ExpectedResult =-17451

[CreateDrmArchiveAudio]
; Create a self-contained DRM protected content file, which comprises content and rights.
ContentDescription = z:\rta\testdata\AudioContent.xml
RightsDescription = z:\rta\testdata\AudioRights.xml
OutputFile = c:\Audio.contentrights

[ImportDrmArchiveAudio]
; Create a DRM protected content file, without rights.  The rights are stripped
; from the input file and stored separately (in the Rights database).
source = c:\Audio.contentrights
target = c:\Audio.content

[OpenCorruptFile]
; Attempt to open a corrupted file. 
source = c:\rta\testdata\corruptcontent.content

[ContainerUniqueIdBoundaryCheck]
; boundary check on container unique id
filename = z:\rta\testdata\containeruniqueidboundarycheck.xml

[ContentNamedBoundaryCheck]
; boundary check on content name
filename = z:\rta\testdata\contentnameboundarycheck.xml

[ContentUniqueIdBoundaryCheck]
; boundary check on content unique id
filename = z:\rta\testdata\contentuniqueidboundarycheck.xml

[ContainerNoUniqueId]
; check that container unique id is specified
filename = z:\rta\testdata\containernouniqueid.xml

[ContentNoUniqueId]
; check that content unique id is specified
filename = z:\rta\testdata\contentnouniqueid.xml

[ContainerEmptyUniqueId]
; check that container unique id is not empty
filename = z:\rta\testdata\containeremptyuniqueid.xml

[ContentEmptyUniqueId]
; check that content unique id is not empty
filename = z:\rta\testdata\contentemptyuniqueid.xml

[CreateRights3Archive]
ContentDescription= c:\RTA\testdata\content.xml
RightsDescription=c:\RTA\testdata\rights3.xml
OutputFile= c:\RTA\Rights3.contentrights

[ImportRights3ClientCreateFiles]
source=c:\RTA\Rights3.contentrights
target=c:\RTA\RTATest001.content
importerMode=ClientCreateFiles

[ExecuteIntentRights3OK]
FileName       =C:\RTA\RTATest001.content
UniqueId       =c:\sample.txt
Intent         =2
ExpectedResult =0

[ExecuteIntentRights3Fail]
FileName       =C:\RTA\RTATest001.content
UniqueId       =c:\sample.txt
Intent         =2
ExpectedResult =-17452

[LoadRights3SavedDb]
DbFilename = c:\RTA\saved.db
TxtDumpFilename = c:\RTA\rightsdump.txt
MinDumpSize = 8

[DeleteRightsRights3WrongKey]
filename    =c:\RTA\output.content
result	    =-6

[DeleteRightsRights3OK]
filename    =c:\RTA\RTATest001.content
result	    =0

[ImportRights3SpecifyOutfile]
source=c:\RTA\Rights3.contentrights
target=c:\RTA\RtaAuto.content
importerMode=AgentCreateFiles

[DeleteRightsRights3SpecifyOutfileOK]
filename    =c:\RTA\RtaAuto.content
result	    =0

[MultipartContent]
ContentDescription=z:\RTA\testdata\content3.xml
ContentDescription2= c:\RTA\testdata\content.xml
OutputFile=c:\output.drm
OutputFile2=c:\output2.drm
ContentFile=c:\output.content
ContentFile2=c:\output2.content

[OpenFileWithNegativeLength]
; Attempt to open a  file which has negative length. 
source = z:\rta\testdata\negativelengthcontent.content

[RTABadFileHandleCheck]
source = c:\supplied.content
uniqueId =c:\sample.txt


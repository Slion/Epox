EXPORTS
	?Enumerate@CCryptoPluginEntry@@SAPAPBXVTUid@@AAH@Z @ 1 NONAME ; void const * * SoftwareCrypto::CCryptoPluginEntry::Enumerate(class TUid, int &)
	?GetExtendedCharacteristicsL@CCryptoPluginEntry@@SAXVTUid@@AAPAVCExtendedCharacteristics@CryptoSpi@@@Z @ 2 NONAME ; void CCryptoPluginEntry::GetExtendedCharacteristicsL(class TUid, class CryptoSpi::CExtendedCharacteristics * &)
	?CreateAsymmetricCipherL@CCryptoPluginEntry@@SAXAAPAVMAsymmetricCipher@CryptoSpi@@VTUid@@ABVCKey@3@11PBVCCryptoParams@3@@Z @ 3 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateAsymmetricCipherL(class CryptoSpi::MAsymmetricCipher * &, class TUid, class CryptoSpi::CKey const &, class TUid, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsymmetricSignerL@CCryptoPluginEntry@@SAXAAPAVMSigner@CryptoSpi@@VTUid@@ABVCKey@3@1PBVCCryptoParams@3@@Z @ 4 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateAsymmetricSignerL(class CryptoSpi::MSigner * &, class TUid, class CryptoSpi::CKey const &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsymmetricVerifierL@CCryptoPluginEntry@@SAXAAPAVMVerifier@CryptoSpi@@VTUid@@ABVCKey@3@1PBVCCryptoParams@3@@Z @ 5 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateAsymmetricVerifierL(class CryptoSpi::MVerifier * &, class TUid, class CryptoSpi::CKey const &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateHashL@CCryptoPluginEntry@@SAXAAPAVMHash@CryptoSpi@@VTUid@@1PBVCKey@3@PBVCCryptoParams@3@@Z @ 6 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateHashL(class CryptoSpi::MHash * &, class TUid, class TUid, class CryptoSpi::CKey const *, class CryptoSpi::CCryptoParams const *)
	?CreateKeyAgreementL@CCryptoPluginEntry@@SAXAAPAVMKeyAgreement@CryptoSpi@@VTUid@@ABVCKey@3@PBVCCryptoParams@3@@Z @ 7 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateKeyAgreementL(class CryptoSpi::MKeyAgreement * &, class TUid, class CryptoSpi::CKey const &, class CryptoSpi::CCryptoParams const *)
	?CreateKeyPairGeneratorL@CCryptoPluginEntry@@SAXAAPAVMKeyPairGenerator@CryptoSpi@@VTUid@@PBVCCryptoParams@3@@Z @ 8 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateKeyPairGeneratorL(class CryptoSpi::MKeyPairGenerator * &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateRandomL@CCryptoPluginEntry@@SAXAAPAVMRandom@CryptoSpi@@VTUid@@PBVCCryptoParams@3@@Z @ 9 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateRandomL(class CryptoSpi::MRandom * &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateSymmetricCipherL@CCryptoPluginEntry@@SAXAAPAVMSymmetricCipher@CryptoSpi@@VTUid@@ABVCKey@3@111PBVCCryptoParams@3@@Z @ 10 NONAME ; void SoftwareCrypto::CCryptoPluginEntry::CreateSymmetricCipherL(class CryptoSpi::MSymmetricCipher * &, class TUid, class CryptoSpi::CKey const &, class TUid, class TUid, class TUid, class CryptoSpi::CCryptoParams const *)

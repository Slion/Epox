EXPORTS
	??1CAsymmetricCipher@CryptoSpi@@UAE@XZ @ 1 NONAME ; CryptoSpi::CAsymmetricCipher::~CAsymmetricCipher(void)
	??1CAsyncAsymmetricCipher@CryptoSpi@@UAE@XZ @ 2 NONAME ; CryptoSpi::CAsyncAsymmetricCipher::~CAsyncAsymmetricCipher(void)
	??1CAsyncHash@CryptoSpi@@UAE@XZ @ 3 NONAME ; CryptoSpi::CAsyncHash::~CAsyncHash(void)
	??1CAsyncKeyAgreement@CryptoSpi@@UAE@XZ @ 4 NONAME ; CryptoSpi::CAsyncKeyAgreement::~CAsyncKeyAgreement(void)
	??1CAsyncKeyPairGenerator@CryptoSpi@@UAE@XZ @ 5 NONAME ; CryptoSpi::CAsyncKeyPairGenerator::~CAsyncKeyPairGenerator(void)
	??1CAsyncRandom@CryptoSpi@@UAE@XZ @ 6 NONAME ; CryptoSpi::CAsyncRandom::~CAsyncRandom(void)
	??1CAsyncSigner@CryptoSpi@@UAE@XZ @ 7 NONAME ; CryptoSpi::CAsyncSigner::~CAsyncSigner(void)
	??1CAsyncSymmetricCipher@CryptoSpi@@UAE@XZ @ 8 NONAME ; CryptoSpi::CAsyncSymmetricCipher::~CAsyncSymmetricCipher(void)
	??1CAsyncVerifier@CryptoSpi@@UAE@XZ @ 9 NONAME ; CryptoSpi::CAsyncVerifier::~CAsyncVerifier(void)
	??1CCryptoBigIntParam@CryptoSpi@@UAE@XZ @ 10 NONAME ; CryptoSpi::CCryptoBigIntParam::~CCryptoBigIntParam(void)
	??1CCryptoDesC16Param@CryptoSpi@@UAE@XZ @ 11 NONAME ; CryptoSpi::CCryptoDesC16Param::~CCryptoDesC16Param(void)
	??1CCryptoDesC8Param@CryptoSpi@@UAE@XZ @ 12 NONAME ; CryptoSpi::CCryptoDesC8Param::~CCryptoDesC8Param(void)
	??1CCryptoIntParam@CryptoSpi@@UAE@XZ @ 13 NONAME ; CryptoSpi::CCryptoIntParam::~CCryptoIntParam(void)
	??1CCryptoParam@CryptoSpi@@UAE@XZ @ 14 NONAME ; CryptoSpi::CCryptoParam::~CCryptoParam(void)
	??1CCryptoParams@CryptoSpi@@UAE@XZ @ 15 NONAME ; CryptoSpi::CCryptoParams::~CCryptoParams(void)
	??1CExtendedCharacteristics@CryptoSpi@@UAE@XZ @ 16 NONAME ; CryptoSpi::CExtendedCharacteristics::~CExtendedCharacteristics(void)
	??1CHash@CryptoSpi@@UAE@XZ @ 17 NONAME ; CryptoSpi::CHash::~CHash(void)
	??1CKey@CryptoSpi@@UAE@XZ @ 18 NONAME ; CryptoSpi::CKey::~CKey(void)
	??1CKeyAgreement@CryptoSpi@@UAE@XZ @ 19 NONAME ; CryptoSpi::CKeyAgreement::~CKeyAgreement(void)
	??1CKeyPairGenerator@CryptoSpi@@UAE@XZ @ 20 NONAME ; CryptoSpi::CKeyPairGenerator::~CKeyPairGenerator(void)
	??1CRandom@CryptoSpi@@UAE@XZ @ 21 NONAME ; CryptoSpi::CRandom::~CRandom(void)
	??1CRuleSelector@CryptoSpi@@UAE@XZ @ 22 NONAME ; CryptoSpi::CRuleSelector::~CRuleSelector(void)
	??1CSelectionRuleContent@CryptoSpi@@UAE@XZ @ 23 NONAME ; CryptoSpi::CSelectionRuleContent::~CSelectionRuleContent(void)
	??1CSelectionRules@CryptoSpi@@UAE@XZ @ 24 NONAME ; CryptoSpi::CSelectionRules::~CSelectionRules(void)
	??1CSigner@CryptoSpi@@UAE@XZ @ 25 NONAME ; CryptoSpi::CSigner::~CSigner(void)
	??1CSymmetricCipher@CryptoSpi@@UAE@XZ @ 26 NONAME ; CryptoSpi::CSymmetricCipher::~CSymmetricCipher(void)
	??1CVerifier@CryptoSpi@@UAE@XZ @ 27 NONAME ; CryptoSpi::CVerifier::~CVerifier(void)
	?AddCharacteristicL@CExtendedCharacteristics@CryptoSpi@@QAEXABVTDesC8@@VTUid@@@Z @ 28 NONAME ; void CryptoSpi::CExtendedCharacteristics::AddCharacteristicL(class TDesC8 const &, class TUid)
	?AddCharacteristicL@CExtendedCharacteristics@CryptoSpi@@QAEXHVTUid@@@Z @ 29 NONAME ; void CryptoSpi::CExtendedCharacteristics::AddCharacteristicL(int, class TUid)
	?AddL@CCryptoParams@CryptoSpi@@QAEXABVTDesC16@@VTUid@@@Z @ 30 NONAME ; void CryptoSpi::CCryptoParams::AddL(class TDesC16 const &, class TUid)
	?AddL@CCryptoParams@CryptoSpi@@QAEXABVTDesC8@@VTUid@@@Z @ 31 NONAME ; void CryptoSpi::CCryptoParams::AddL(class TDesC8 const &, class TUid)
	?AddL@CCryptoParams@CryptoSpi@@QAEXABVTInteger@@VTUid@@@Z @ 32 NONAME ; void CryptoSpi::CCryptoParams::AddL(class TInteger const &, class TUid)
	?AddL@CCryptoParams@CryptoSpi@@QAEXHVTUid@@@Z @ 33 NONAME ; void CryptoSpi::CCryptoParams::AddL(int, class TUid)
	?AddSelectionRuleL@CSelectionRules@CryptoSpi@@QAEXPAVCSelectionRuleContent@2@@Z @ 34 NONAME ; void CryptoSpi::CSelectionRules::AddSelectionRuleL(class CryptoSpi::CSelectionRuleContent *)
	?AgreeL@CAsyncKeyAgreement@CryptoSpi@@QAEXABVCKey@2@AAV32@PBVCCryptoParams@2@AAVTRequestStatus@@@Z @ 35 NONAME ; void CryptoSpi::CAsyncKeyAgreement::AgreeL(class CryptoSpi::CKey const &, class CryptoSpi::CKey &, class CryptoSpi::CCryptoParams const *, class TRequestStatus &)
	?AgreeL@CKeyAgreement@CryptoSpi@@QAEPAVCKey@2@ABV32@PBVCCryptoParams@2@@Z @ 36 NONAME ; class CryptoSpi::CKey * CryptoSpi::CKeyAgreement::AgreeL(class CryptoSpi::CKey const &, class CryptoSpi::CCryptoParams const *)
	?BlockSize@CSymmetricCipherBase@CryptoSpi@@QAEHXZ @ 37 NONAME ; int CryptoSpi::CSymmetricCipherBase::BlockSize(void)
	?Cancel@CAsyncAsymmetricCipher@CryptoSpi@@QAEXXZ @ 38 NONAME ; void CryptoSpi::CAsyncAsymmetricCipher::Cancel(void)
	?Cancel@CAsyncHash@CryptoSpi@@QAEXXZ @ 39 NONAME ; void CryptoSpi::CAsyncHash::Cancel(void)
	?Cancel@CAsyncKeyPairGenerator@CryptoSpi@@QAEXXZ @ 40 NONAME ; void CryptoSpi::CAsyncKeyPairGenerator::Cancel(void)
	?Cancel@CAsyncSigner@CryptoSpi@@QAEXXZ @ 41 NONAME ; void CryptoSpi::CAsyncSigner::Cancel(void)
	?Cancel@CAsyncSymmetricCipher@CryptoSpi@@QAEXXZ @ 42 NONAME ; void CryptoSpi::CAsyncSymmetricCipher::Cancel(void)
	?Cancel@CAsyncVerifier@CryptoSpi@@QAEXXZ @ 43 NONAME ; void CryptoSpi::CAsyncVerifier::Cancel(void)
	?CopyL@CAsyncHash@CryptoSpi@@QAEPAV12@XZ @ 44 NONAME ; class CryptoSpi::CAsyncHash * CryptoSpi::CAsyncHash::CopyL(void)
	?CopyL@CCryptoParams@CryptoSpi@@QAEAAV12@ABV12@@Z @ 45 NONAME ; class CryptoSpi::CCryptoParams & CryptoSpi::CCryptoParams::CopyL(class CryptoSpi::CCryptoParams const &)
	?CopyL@CHash@CryptoSpi@@QAEPAV12@XZ @ 46 NONAME ; class CryptoSpi::CHash * CryptoSpi::CHash::CopyL(void)
	?Count@CCryptoParams@CryptoSpi@@QBEHXZ @ 47 NONAME ; int CryptoSpi::CCryptoParams::Count(void) const
	?CreateAsymmetricCipherL@CAsymmetricCipherFactory@CryptoSpi@@SAXAAPAVCAsymmetricCipher@2@VTUid@@ABVCKey@2@11PBVCCryptoParams@2@@Z @ 48 NONAME ; void CryptoSpi::CAsymmetricCipherFactory::CreateAsymmetricCipherL(class CryptoSpi::CAsymmetricCipher * &, class TUid, class CryptoSpi::CKey const &, class TUid, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncAsymmetricCipherL@CAsymmetricCipherFactory@CryptoSpi@@SAXAAPAVCAsyncAsymmetricCipher@2@VTUid@@ABVCKey@2@11PBVCCryptoParams@2@@Z @ 49 NONAME ; void CryptoSpi::CAsymmetricCipherFactory::CreateAsyncAsymmetricCipherL(class CryptoSpi::CAsyncAsymmetricCipher * &, class TUid, class CryptoSpi::CKey const &, class TUid, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncHashL@CHashFactory@CryptoSpi@@SAXAAPAVCAsyncHash@2@VTUid@@1PBVCKey@2@PBVCCryptoParams@2@@Z @ 50 NONAME ; void CryptoSpi::CHashFactory::CreateAsyncHashL(class CryptoSpi::CAsyncHash * &, class TUid, class TUid, class CryptoSpi::CKey const *, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncKeyAgreementL@CKeyAgreementFactory@CryptoSpi@@SAXAAPAVCAsyncKeyAgreement@2@VTUid@@ABVCKey@2@PBVCCryptoParams@2@@Z @ 51 NONAME ; void CryptoSpi::CKeyAgreementFactory::CreateAsyncKeyAgreementL(class CryptoSpi::CAsyncKeyAgreement * &, class TUid, class CryptoSpi::CKey const &, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncKeyPairGeneratorL@CKeyPairGeneratorFactory@CryptoSpi@@SAXAAPAVCAsyncKeyPairGenerator@2@VTUid@@PBVCCryptoParams@2@@Z @ 52 NONAME ; void CryptoSpi::CKeyPairGeneratorFactory::CreateAsyncKeyPairGeneratorL(class CryptoSpi::CAsyncKeyPairGenerator * &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncRandomL@CRandomFactory@CryptoSpi@@SAXAAPAVCAsyncRandom@2@VTUid@@PBVCCryptoParams@2@@Z @ 53 NONAME ; void CryptoSpi::CRandomFactory::CreateAsyncRandomL(class CryptoSpi::CAsyncRandom * &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncSignerL@CSignatureFactory@CryptoSpi@@SAXAAPAVCAsyncSigner@2@VTUid@@ABVCKey@2@1PBVCCryptoParams@2@@Z @ 54 NONAME ; void CryptoSpi::CSignatureFactory::CreateAsyncSignerL(class CryptoSpi::CAsyncSigner * &, class TUid, class CryptoSpi::CKey const &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncSymmetricCipherL@CSymmetricCipherFactory@CryptoSpi@@SAXAAPAVCAsyncSymmetricCipher@2@VTUid@@ABVCKey@2@111PBVCCryptoParams@2@@Z @ 55 NONAME ; void CryptoSpi::CSymmetricCipherFactory::CreateAsyncSymmetricCipherL(class CryptoSpi::CAsyncSymmetricCipher * &, class TUid, class CryptoSpi::CKey const &, class TUid, class TUid, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateAsyncVerifierL@CSignatureFactory@CryptoSpi@@SAXAAPAVCAsyncVerifier@2@VTUid@@ABVCKey@2@1PBVCCryptoParams@2@@Z @ 56 NONAME ; void CryptoSpi::CSignatureFactory::CreateAsyncVerifierL(class CryptoSpi::CAsyncVerifier * &, class TUid, class CryptoSpi::CKey const &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateHashL@CHashFactory@CryptoSpi@@SAXAAPAVCHash@2@VTUid@@1PBVCKey@2@PBVCCryptoParams@2@@Z @ 57 NONAME ; void CryptoSpi::CHashFactory::CreateHashL(class CryptoSpi::CHash * &, class TUid, class TUid, class CryptoSpi::CKey const *, class CryptoSpi::CCryptoParams const *)
	?CreateKeyAgreementL@CKeyAgreementFactory@CryptoSpi@@SAXAAPAVCKeyAgreement@2@VTUid@@ABVCKey@2@PBVCCryptoParams@2@@Z @ 58 NONAME ; void CryptoSpi::CKeyAgreementFactory::CreateKeyAgreementL(class CryptoSpi::CKeyAgreement * &, class TUid, class CryptoSpi::CKey const &, class CryptoSpi::CCryptoParams const *)
	?CreateKeyPairGeneratorL@CKeyPairGeneratorFactory@CryptoSpi@@SAXAAPAVCKeyPairGenerator@2@VTUid@@PBVCCryptoParams@2@@Z @ 59 NONAME ; void CryptoSpi::CKeyPairGeneratorFactory::CreateKeyPairGeneratorL(class CryptoSpi::CKeyPairGenerator * &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateRandomL@CRandomFactory@CryptoSpi@@SAXAAPAVCRandom@2@VTUid@@PBVCCryptoParams@2@@Z @ 60 NONAME ; void CryptoSpi::CRandomFactory::CreateRandomL(class CryptoSpi::CRandom * &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateSignerL@CSignatureFactory@CryptoSpi@@SAXAAPAVCSigner@2@VTUid@@ABVCKey@2@1PBVCCryptoParams@2@@Z @ 61 NONAME ; void CryptoSpi::CSignatureFactory::CreateSignerL(class CryptoSpi::CSigner * &, class TUid, class CryptoSpi::CKey const &, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateSymmetricCipherL@CSymmetricCipherFactory@CryptoSpi@@SAXAAPAVCSymmetricCipher@2@VTUid@@ABVCKey@2@111PBVCCryptoParams@2@@Z @ 62 NONAME ; void CryptoSpi::CSymmetricCipherFactory::CreateSymmetricCipherL(class CryptoSpi::CSymmetricCipher * &, class TUid, class CryptoSpi::CKey const &, class TUid, class TUid, class TUid, class CryptoSpi::CCryptoParams const *)
	?CreateVerifierL@CSignatureFactory@CryptoSpi@@SAXAAPAVCVerifier@2@VTUid@@ABVCKey@2@1PBVCCryptoParams@2@@Z @ 63 NONAME ; void CryptoSpi::CSignatureFactory::CreateVerifierL(class CryptoSpi::CVerifier * &, class TUid, class CryptoSpi::CKey const &, class TUid, class CryptoSpi::CCryptoParams const *)
	?EnumerateCharacteristicsL@CCryptoSpiStateApi@CryptoSpi@@SAXAAV?$RPointerArray@VCCharacteristicsAndPluginName@CryptoSpi@@@@JH@Z @ 64 NONAME ; void CryptoSpi::CCryptoSpiStateApi::EnumerateCharacteristicsL(class RPointerArray<class CryptoSpi::CCharacteristicsAndPluginName> &, long, int)
	?Final@CAsyncHash@CryptoSpi@@QAEXABVTDesC8@@AAVTPtrC8@@AAVTRequestStatus@@@Z @ 65 NONAME ; void CryptoSpi::CAsyncHash::Final(class TDesC8 const &, class TPtrC8 &, class TRequestStatus &)
	?Final@CHash@CryptoSpi@@QAE?AVTPtrC8@@ABVTDesC8@@@Z @ 66 NONAME ; class TPtrC8 CryptoSpi::CHash::Final(class TDesC8 const &)
	?GenerateKeyPairL@CAsyncKeyPairGenerator@CryptoSpi@@QAEXHABVCCryptoParams@2@AAPAVCKeyPair@2@AAVTRequestStatus@@@Z @ 67 NONAME ; void CryptoSpi::CAsyncKeyPairGenerator::GenerateKeyPairL(int, class CryptoSpi::CCryptoParams const &, class CryptoSpi::CKeyPair * &, class TRequestStatus &)
	?GenerateKeyPairL@CKeyPairGenerator@CryptoSpi@@QAEXHABVCCryptoParams@2@AAPAVCKeyPair@2@@Z @ 68 NONAME ; void CryptoSpi::CKeyPairGenerator::GenerateKeyPairL(int, class CryptoSpi::CCryptoParams const &, class CryptoSpi::CKeyPair * &)
	?GenerateRandomBytesL@CAsyncRandom@CryptoSpi@@QAEXAAVTDes8@@AAVTRequestStatus@@@Z @ 69 NONAME ; void CryptoSpi::CAsyncRandom::GenerateRandomBytesL(class TDes8 &, class TRequestStatus &)
	?GenerateRandomBytesL@CRandom@CryptoSpi@@QAEXAAVTDes8@@@Z @ 70 NONAME ; void CryptoSpi::CRandom::GenerateRandomBytesL(class TDes8 &)
	?GetBigIntL@CCryptoParams@CryptoSpi@@QBEABVTInteger@@VTUid@@@Z @ 71 NONAME ; class TInteger const & CryptoSpi::CCryptoParams::GetBigIntL(class TUid) const
	?GetBigIntL@CKey@CryptoSpi@@QBEABVTInteger@@VTUid@@@Z @ 72 NONAME ; class TInteger const & CryptoSpi::CKey::GetBigIntL(class TUid) const
	?GetCharacteristicsL@CCryptoBase@CryptoSpi@@QAEXAAPBX@Z @ 73 NONAME ; void CryptoSpi::CCryptoBase::GetCharacteristicsL(void const * &)
	?GetExtendedCharacteristicsL@CCryptoBase@CryptoSpi@@QAEPBVCExtendedCharacteristics@2@XZ @ 74 NONAME ; class CryptoSpi::CExtendedCharacteristics const * CryptoSpi::CCryptoBase::GetExtendedCharacteristicsL(void)
	?GetMaximumInputLengthL@CAsymmetricCipherBase@CryptoSpi@@QAEHXZ @ 75 NONAME ; int CryptoSpi::CAsymmetricCipherBase::GetMaximumInputLengthL(void)
	?GetMaximumInputLengthL@CSignatureBase@CryptoSpi@@QBEHXZ @ 76 NONAME ; int CryptoSpi::CSignatureBase::GetMaximumInputLengthL(void) const
	?GetMaximumOutputLengthL@CAsymmetricCipherBase@CryptoSpi@@QAEHXZ @ 77 NONAME ; int CryptoSpi::CAsymmetricCipherBase::GetMaximumOutputLengthL(void)
	?GetMaximumOutputLengthL@CSignatureBase@CryptoSpi@@QBEHXZ @ 78 NONAME ; int CryptoSpi::CSignatureBase::GetMaximumOutputLengthL(void) const
	?GetParams@CCryptoParams@CryptoSpi@@QBEABV?$RPointerArray@VCCryptoParam@CryptoSpi@@@@XZ @ 79 NONAME ; class RPointerArray<class CryptoSpi::CCryptoParam> const & CryptoSpi::CCryptoParams::GetParams(void) const
	?GetTDesC16L@CCryptoParams@CryptoSpi@@QBEABVTDesC16@@VTUid@@@Z @ 80 NONAME ; class TDesC16 const & CryptoSpi::CCryptoParams::GetTDesC16L(class TUid) const
	?GetTDesC8CharacteristicL@CExtendedCharacteristics@CryptoSpi@@QBEABVTDesC8@@VTUid@@@Z @ 81 NONAME ; class TDesC8 const & CryptoSpi::CExtendedCharacteristics::GetTDesC8CharacteristicL(class TUid) const
	?GetTDesC8L@CCryptoParams@CryptoSpi@@QBEABVTDesC8@@VTUid@@@Z @ 82 NONAME ; class TDesC8 const & CryptoSpi::CCryptoParams::GetTDesC8L(class TUid) const
	?GetTDesC8L@CKey@CryptoSpi@@QBEABVTDesC8@@VTUid@@@Z @ 83 NONAME ; class TDesC8 const & CryptoSpi::CKey::GetTDesC8L(class TUid) const
	?GetTIntCharacteristicL@CExtendedCharacteristics@CryptoSpi@@QBEHVTUid@@@Z @ 84 NONAME ; int CryptoSpi::CExtendedCharacteristics::GetTIntCharacteristicL(class TUid) const
	?GetTIntL@CCryptoParams@CryptoSpi@@QBEHVTUid@@@Z @ 85 NONAME ; int CryptoSpi::CCryptoParams::GetTIntL(class TUid) const
	?GetTIntL@CKey@CryptoSpi@@QBEHVTUid@@@Z @ 86 NONAME ; int CryptoSpi::CKey::GetTIntL(class TUid) const
	?Hash@CAsyncHash@CryptoSpi@@QAEXABVTDesC8@@AAVTPtrC8@@AAVTRequestStatus@@@Z @ 87 NONAME ; void CryptoSpi::CAsyncHash::Hash(class TDesC8 const &, class TPtrC8 &, class TRequestStatus &)
	?Hash@CHash@CryptoSpi@@QAE?AVTPtrC8@@ABVTDesC8@@@Z @ 88 NONAME ; class TPtrC8 CryptoSpi::CHash::Hash(class TDesC8 const &)
	?InverseSignL@CAsyncVerifier@CryptoSpi@@QAEXAAPAVHBufC8@@ABVCCryptoParams@2@AAVTRequestStatus@@@Z @ 89 NONAME ; void CryptoSpi::CAsyncVerifier::InverseSignL(class HBufC8 * &, class CryptoSpi::CCryptoParams const &, class TRequestStatus &)
	?InverseSignL@CVerifier@CryptoSpi@@QAEXAAPAVHBufC8@@ABVCCryptoParams@2@@Z @ 90 NONAME ; void CryptoSpi::CVerifier::InverseSignL(class HBufC8 * &, class CryptoSpi::CCryptoParams const &)
	?IsOperationModeSupported@THashCharacteristics@CryptoSpi@@QBEHVTUid@@@Z @ 91 NONAME ; int CryptoSpi::THashCharacteristics::IsOperationModeSupported(class TUid) const
	?IsOperationModeSupported@TSymmetricCipherCharacteristics@CryptoSpi@@QBEHVTUid@@@Z @ 92 NONAME ; int CryptoSpi::TSymmetricCipherCharacteristics::IsOperationModeSupported(class TUid) const
	?IsPaddingModeSupported@TAsymmetricCipherCharacteristics@CryptoSpi@@QBEHVTUid@@@Z @ 93 NONAME ; int CryptoSpi::TAsymmetricCipherCharacteristics::IsPaddingModeSupported(class TUid) const
	?IsPaddingModeSupported@TAsymmetricSignatureCharacteristics@CryptoSpi@@QBEHVTUid@@@Z @ 94 NONAME ; int CryptoSpi::TAsymmetricSignatureCharacteristics::IsPaddingModeSupported(class TUid) const
	?IsPaddingModeSupported@TSymmetricCipherCharacteristics@CryptoSpi@@QBEHVTUid@@@Z @ 95 NONAME ; int CryptoSpi::TSymmetricCipherCharacteristics::IsPaddingModeSupported(class TUid) const
	?IsPresent@CCryptoParams@CryptoSpi@@QBEHVTUid@@@Z @ 96 NONAME ; int CryptoSpi::CCryptoParams::IsPresent(class TUid) const
	?IsPresent@CKey@CryptoSpi@@QBEHVTUid@@@Z @ 97 NONAME ; int CryptoSpi::CKey::IsPresent(class TUid) const
	?KeyParameters@CKey@CryptoSpi@@QBEABVCCryptoParams@2@XZ @ 98 NONAME ; class CryptoSpi::CCryptoParams const & CryptoSpi::CKey::KeyParameters(void) const
	?KeyProperty@CKey@CryptoSpi@@QBEABVTKeyProperty@2@XZ @ 99 NONAME ; class CryptoSpi::TKeyProperty const & CryptoSpi::CKey::KeyProperty(void) const
	?KeySize@CSymmetricCipherBase@CryptoSpi@@QAEHXZ @ 100 NONAME ; int CryptoSpi::CSymmetricCipherBase::KeySize(void)
	?ListExtendedCharacteristics@CExtendedCharacteristics@CryptoSpi@@QBEPBVCCryptoParams@2@XZ @ 101 NONAME ; class CryptoSpi::CCryptoParams const * CryptoSpi::CExtendedCharacteristics::ListExtendedCharacteristics(void) const
	?MaxFinalOutputLength@CSymmetricCipherBase@CryptoSpi@@QAEHH@Z @ 102 NONAME ; int CryptoSpi::CSymmetricCipherBase::MaxFinalOutputLength(int)
	?MaxOutputLength@CSymmetricCipherBase@CryptoSpi@@QAEHH@Z @ 103 NONAME ; int CryptoSpi::CSymmetricCipherBase::MaxOutputLength(int)
	?NewL@CCryptoBigIntParam@CryptoSpi@@SAPAV12@ABVTInteger@@VTUid@@@Z @ 104 NONAME ; class CryptoSpi::CCryptoBigIntParam * CryptoSpi::CCryptoBigIntParam::NewL(class TInteger const &, class TUid)
	?NewL@CCryptoDesC16Param@CryptoSpi@@SAPAV12@ABVTDesC16@@VTUid@@@Z @ 105 NONAME ; class CryptoSpi::CCryptoDesC16Param * CryptoSpi::CCryptoDesC16Param::NewL(class TDesC16 const &, class TUid)
	?NewL@CCryptoDesC8Param@CryptoSpi@@SAPAV12@ABVTDesC8@@VTUid@@@Z @ 106 NONAME ; class CryptoSpi::CCryptoDesC8Param * CryptoSpi::CCryptoDesC8Param::NewL(class TDesC8 const &, class TUid)
	?NewL@CCryptoIntParam@CryptoSpi@@SAPAV12@HVTUid@@@Z @ 107 NONAME ; class CryptoSpi::CCryptoIntParam * CryptoSpi::CCryptoIntParam::NewL(int, class TUid)
	?NewL@CCryptoParams@CryptoSpi@@SAPAV12@XZ @ 108 NONAME ; class CryptoSpi::CCryptoParams * CryptoSpi::CCryptoParams::NewL(void)
	?NewL@CExtendedCharacteristics@CryptoSpi@@SAPAV12@HH@Z @ 109 NONAME ; class CryptoSpi::CExtendedCharacteristics * CryptoSpi::CExtendedCharacteristics::NewL(int, int)
	?NewL@CKey@CryptoSpi@@SAPAV12@ABV12@@Z @ 110 NONAME ; class CryptoSpi::CKey * CryptoSpi::CKey::NewL(class CryptoSpi::CKey const &)
	?NewL@CKey@CryptoSpi@@SAPAV12@ABVTKeyProperty@2@ABVCCryptoParams@2@@Z @ 111 NONAME ; class CryptoSpi::CKey * CryptoSpi::CKey::NewL(class CryptoSpi::TKeyProperty const &, class CryptoSpi::CCryptoParams const &)
	?NewL@CKeyPair@CryptoSpi@@SAPAV12@PAVCKey@2@0@Z @ 112 NONAME ; class CryptoSpi::CKeyPair * CryptoSpi::CKeyPair::NewL(class CryptoSpi::CKey *, class CryptoSpi::CKey *)
	?NewL@CRuleSelector@CryptoSpi@@SAPAV12@PAVCSelectionRules@2@@Z @ 113 NONAME ; class CryptoSpi::CRuleSelector * CryptoSpi::CRuleSelector::NewL(class CryptoSpi::CSelectionRules *)
	?NewL@CSelectionRuleContent@CryptoSpi@@SAPAV12@VTUid@@0PAVCCryptoParam@2@W4TRuleOperator@2@H@Z @ 114 NONAME ; class CryptoSpi::CSelectionRuleContent * CryptoSpi::CSelectionRuleContent::NewL(class TUid, class TUid, class CryptoSpi::CCryptoParam *, enum CryptoSpi::TRuleOperator, int)
	?NewL@CSelectionRules@CryptoSpi@@SAPAV12@XZ @ 115 NONAME ; class CryptoSpi::CSelectionRules * CryptoSpi::CSelectionRules::NewL(void)
	?NewLC@CCryptoBigIntParam@CryptoSpi@@SAPAV12@ABVTInteger@@VTUid@@@Z @ 116 NONAME ; class CryptoSpi::CCryptoBigIntParam * CryptoSpi::CCryptoBigIntParam::NewLC(class TInteger const &, class TUid)
	?NewLC@CCryptoDesC16Param@CryptoSpi@@SAPAV12@ABVTDesC16@@VTUid@@@Z @ 117 NONAME ; class CryptoSpi::CCryptoDesC16Param * CryptoSpi::CCryptoDesC16Param::NewLC(class TDesC16 const &, class TUid)
	?NewLC@CCryptoDesC8Param@CryptoSpi@@SAPAV12@ABVTDesC8@@VTUid@@@Z @ 118 NONAME ; class CryptoSpi::CCryptoDesC8Param * CryptoSpi::CCryptoDesC8Param::NewLC(class TDesC8 const &, class TUid)
	?NewLC@CCryptoIntParam@CryptoSpi@@SAPAV12@HVTUid@@@Z @ 119 NONAME ; class CryptoSpi::CCryptoIntParam * CryptoSpi::CCryptoIntParam::NewLC(int, class TUid)
	?NewLC@CCryptoParams@CryptoSpi@@SAPAV12@XZ @ 120 NONAME ; class CryptoSpi::CCryptoParams * CryptoSpi::CCryptoParams::NewLC(void)
	?NewLC@CKey@CryptoSpi@@SAPAV12@ABV12@@Z @ 121 NONAME ; class CryptoSpi::CKey * CryptoSpi::CKey::NewLC(class CryptoSpi::CKey const &)
	?NewLC@CKey@CryptoSpi@@SAPAV12@ABVTKeyProperty@2@ABVCCryptoParams@2@@Z @ 122 NONAME ; class CryptoSpi::CKey * CryptoSpi::CKey::NewLC(class CryptoSpi::TKeyProperty const &, class CryptoSpi::CCryptoParams const &)
	?NewLC@CRuleSelector@CryptoSpi@@SAPAV12@PAVCSelectionRules@2@@Z @ 123 NONAME ; class CryptoSpi::CRuleSelector * CryptoSpi::CRuleSelector::NewLC(class CryptoSpi::CSelectionRules *)
	?PrivateKey@CKeyPair@CryptoSpi@@QBEABVCKey@2@XZ @ 124 NONAME ; class CryptoSpi::CKey const & CryptoSpi::CKeyPair::PrivateKey(void) const
	?ProcessFinalL@CAsyncSymmetricCipher@CryptoSpi@@QAEXABVTDesC8@@AAVTDes8@@AAVTRequestStatus@@@Z @ 125 NONAME ; void CryptoSpi::CAsyncSymmetricCipher::ProcessFinalL(class TDesC8 const &, class TDes8 &, class TRequestStatus &)
	?ProcessFinalL@CSymmetricCipher@CryptoSpi@@QAEXABVTDesC8@@AAVTDes8@@@Z @ 126 NONAME ; void CryptoSpi::CSymmetricCipher::ProcessFinalL(class TDesC8 const &, class TDes8 &)
	?ProcessL@CAsymmetricCipher@CryptoSpi@@QAEXABVTDesC8@@AAVTDes8@@@Z @ 127 NONAME ; void CryptoSpi::CAsymmetricCipher::ProcessL(class TDesC8 const &, class TDes8 &)
	?ProcessL@CAsyncAsymmetricCipher@CryptoSpi@@QAEXABVTDesC8@@AAVTDes8@@AAVTRequestStatus@@@Z @ 128 NONAME ; void CryptoSpi::CAsyncAsymmetricCipher::ProcessL(class TDesC8 const &, class TDes8 &, class TRequestStatus &)
	?ProcessL@CAsyncSymmetricCipher@CryptoSpi@@QAEXABVTDesC8@@AAVTDes8@@AAVTRequestStatus@@@Z @ 129 NONAME ; void CryptoSpi::CAsyncSymmetricCipher::ProcessL(class TDesC8 const &, class TDes8 &, class TRequestStatus &)
	?ProcessL@CSymmetricCipher@CryptoSpi@@QAEXABVTDesC8@@AAVTDes8@@@Z @ 130 NONAME ; void CryptoSpi::CSymmetricCipher::ProcessL(class TDesC8 const &, class TDes8 &)
	?PublicKey@CKeyPair@CryptoSpi@@QBEABVCKey@2@XZ @ 131 NONAME ; class CryptoSpi::CKey const & CryptoSpi::CKeyPair::PublicKey(void) const
	?ReplicateL@CAsyncHash@CryptoSpi@@QAEPAV12@XZ @ 132 NONAME ; class CryptoSpi::CAsyncHash * CryptoSpi::CAsyncHash::ReplicateL(void)
	?ReplicateL@CHash@CryptoSpi@@QAEPAV12@XZ @ 133 NONAME ; class CryptoSpi::CHash * CryptoSpi::CHash::ReplicateL(void)
	?Reset@CCryptoBase@CryptoSpi@@QAEXXZ @ 134 NONAME ; void CryptoSpi::CCryptoBase::Reset(void)
	?SetCryptoModeL@CAsymmetricCipherBase@CryptoSpi@@QAEXVTUid@@@Z @ 135 NONAME ; void CryptoSpi::CAsymmetricCipherBase::SetCryptoModeL(class TUid)
	?SetCryptoModeL@CSymmetricCipherBase@CryptoSpi@@QAEXVTUid@@@Z @ 136 NONAME ; void CryptoSpi::CSymmetricCipherBase::SetCryptoModeL(class TUid)
	?SetIvL@CSymmetricCipherBase@CryptoSpi@@QAEXABVTDesC8@@@Z @ 137 NONAME ; void CryptoSpi::CSymmetricCipherBase::SetIvL(class TDesC8 const &)
	?SetKeyL@CAsymmetricCipherBase@CryptoSpi@@QAEXABVCKey@2@@Z @ 138 NONAME ; void CryptoSpi::CAsymmetricCipherBase::SetKeyL(class CryptoSpi::CKey const &)
	?SetKeyL@CAsyncHash@CryptoSpi@@QAEXABVCKey@2@@Z @ 139 NONAME ; void CryptoSpi::CAsyncHash::SetKeyL(class CryptoSpi::CKey const &)
	?SetKeyL@CAsyncKeyAgreement@CryptoSpi@@QAEXABVCKey@2@PBVCCryptoParams@2@@Z @ 140 NONAME ; void CryptoSpi::CAsyncKeyAgreement::SetKeyL(class CryptoSpi::CKey const &, class CryptoSpi::CCryptoParams const *)
	?SetKeyL@CHash@CryptoSpi@@QAEXABVCKey@2@@Z @ 141 NONAME ; void CryptoSpi::CHash::SetKeyL(class CryptoSpi::CKey const &)
	?SetKeyL@CKeyAgreement@CryptoSpi@@QAEXABVCKey@2@PBVCCryptoParams@2@@Z @ 142 NONAME ; void CryptoSpi::CKeyAgreement::SetKeyL(class CryptoSpi::CKey const &, class CryptoSpi::CCryptoParams const *)
	?SetKeyL@CSignatureBase@CryptoSpi@@QAEXABVCKey@2@@Z @ 143 NONAME ; void CryptoSpi::CSignatureBase::SetKeyL(class CryptoSpi::CKey const &)
	?SetKeyL@CSymmetricCipherBase@CryptoSpi@@QAEXABVCKey@2@@Z @ 144 NONAME ; void CryptoSpi::CSymmetricCipherBase::SetKeyL(class CryptoSpi::CKey const &)
	?SetOperationModeL@CAsyncHash@CryptoSpi@@QAEXVTUid@@@Z @ 145 NONAME ; void CryptoSpi::CAsyncHash::SetOperationModeL(class TUid)
	?SetOperationModeL@CHash@CryptoSpi@@QAEXVTUid@@@Z @ 146 NONAME ; void CryptoSpi::CHash::SetOperationModeL(class TUid)
	?SetOperationModeL@CSymmetricCipherBase@CryptoSpi@@QAEXVTUid@@@Z @ 147 NONAME ; void CryptoSpi::CSymmetricCipherBase::SetOperationModeL(class TUid)
	?SetPaddingModeL@CAsymmetricCipherBase@CryptoSpi@@QAEXVTUid@@@Z @ 148 NONAME ; void CryptoSpi::CAsymmetricCipherBase::SetPaddingModeL(class TUid)
	?SetPaddingModeL@CSignatureBase@CryptoSpi@@QAEXVTUid@@@Z @ 149 NONAME ; void CryptoSpi::CSignatureBase::SetPaddingModeL(class TUid)
	?SetPaddingModeL@CSymmetricCipherBase@CryptoSpi@@QAEXVTUid@@@Z @ 150 NONAME ; void CryptoSpi::CSymmetricCipherBase::SetPaddingModeL(class TUid)
	?SetSelector@CCryptoSpiStateApi@CryptoSpi@@SAXPAVMPluginSelector@2@@Z @ 151 NONAME ; void CryptoSpi::CCryptoSpiStateApi::SetSelector(class CryptoSpi::MPluginSelector *)
	?SignL@CAsyncSigner@CryptoSpi@@QAEXABVTDesC8@@AAVCCryptoParams@2@AAVTRequestStatus@@@Z @ 152 NONAME ; void CryptoSpi::CAsyncSigner::SignL(class TDesC8 const &, class CryptoSpi::CCryptoParams &, class TRequestStatus &)
	?SignL@CSigner@CryptoSpi@@QAEXABVTDesC8@@AAVCCryptoParams@2@@Z @ 153 NONAME ; void CryptoSpi::CSigner::SignL(class TDesC8 const &, class CryptoSpi::CCryptoParams &)
	?Type@CCryptoParam@CryptoSpi@@QBEHXZ @ 154 NONAME ; int CryptoSpi::CCryptoParam::Type(void) const
	?Uid@CCryptoParam@CryptoSpi@@QBE?AVTUid@@XZ @ 155 NONAME ; class TUid CryptoSpi::CCryptoParam::Uid(void) const
	?UnsetSelector@CCryptoSpiStateApi@CryptoSpi@@SAXXZ @ 156 NONAME ; void CryptoSpi::CCryptoSpiStateApi::UnsetSelector(void)
	?Update@CAsyncHash@CryptoSpi@@QAEXABVTDesC8@@AAVTRequestStatus@@@Z @ 157 NONAME ; void CryptoSpi::CAsyncHash::Update(class TDesC8 const &, class TRequestStatus &)
	?Update@CHash@CryptoSpi@@QAEXABVTDesC8@@@Z @ 158 NONAME ; void CryptoSpi::CHash::Update(class TDesC8 const &)
	?Value@CCryptoBigIntParam@CryptoSpi@@QBEABVTInteger@@XZ @ 159 NONAME ; class TInteger const & CryptoSpi::CCryptoBigIntParam::Value(void) const
	?Value@CCryptoDesC16Param@CryptoSpi@@QBEABVTDesC16@@XZ @ 160 NONAME ; class TDesC16 const & CryptoSpi::CCryptoDesC16Param::Value(void) const
	?Value@CCryptoDesC8Param@CryptoSpi@@QBEABVTDesC8@@XZ @ 161 NONAME ; class TDesC8 const & CryptoSpi::CCryptoDesC8Param::Value(void) const
	?Value@CCryptoIntParam@CryptoSpi@@QBEHXZ @ 162 NONAME ; int CryptoSpi::CCryptoIntParam::Value(void) const
	?VerifyL@CAsyncVerifier@CryptoSpi@@QAEXABVTDesC8@@ABVCCryptoParams@2@AAHAAVTRequestStatus@@@Z @ 163 NONAME ; void CryptoSpi::CAsyncVerifier::VerifyL(class TDesC8 const &, class CryptoSpi::CCryptoParams const &, int &, class TRequestStatus &)
	?VerifyL@CVerifier@CryptoSpi@@QAEXABVTDesC8@@ABVCCryptoParams@2@AAH@Z @ 164 NONAME ; void CryptoSpi::CVerifier::VerifyL(class TDesC8 const &, class CryptoSpi::CCryptoParams const &, int &)


EXPORTS
	call_vector_1 @ 1 NONAME ; protected: __thiscall CBlockChainingMode::CBlockChainingMode(void)
	call_vector_2 @ 2 NONAME ; protected: __thiscall CDH::CDH(class CDHPrivateKey const &)
	call_vector_3 @ 3 NONAME ; protected: __thiscall CDHKeyPair::CDHKeyPair(void)
	call_vector_4 @ 4 NONAME ; protected: __thiscall CDHParameters::CDHParameters(class RInteger &,class RInteger &)
	call_vector_5 @ 5 NONAME ; protected: __thiscall CDHParameters::CDHParameters(void)
	call_vector_6 @ 6 NONAME ; protected: __thiscall CDHPrivateKey::CDHPrivateKey(class RInteger &,class RInteger &,class RInteger &)
	call_vector_7 @ 7 NONAME ; protected: __thiscall CDHPrivateKey::CDHPrivateKey(void)
	call_vector_8 @ 8 NONAME ; protected: __thiscall CDHPublicKey::CDHPublicKey(class RInteger &,class RInteger &,class RInteger &)
	call_vector_9 @ 9 NONAME ; protected: __thiscall CDHPublicKey::CDHPublicKey(void)
	call_vector_10 @ 10 NONAME ; protected: __thiscall CDSAKeyPair::CDSAKeyPair(void)
	call_vector_11 @ 11 NONAME ; protected: __thiscall CDSAParameters::CDSAParameters(class RInteger &,class RInteger &,class RInteger &)
	call_vector_12 @ 12 NONAME ; protected: __thiscall CDSAParameters::CDSAParameters(void)
	call_vector_13 @ 13 NONAME ; protected: __thiscall CDSAPrimeCertificate::CDSAPrimeCertificate(unsigned int)
	call_vector_14 @ 14 NONAME ; protected: __thiscall CDSAPrimeCertificate::CDSAPrimeCertificate(void)
	call_vector_15 @ 15 NONAME ; protected: __thiscall CDSAPrivateKey::CDSAPrivateKey(class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_16 @ 16 NONAME ; protected: __thiscall CDSAPrivateKey::CDSAPrivateKey(void)
	call_vector_17 @ 17 NONAME ; protected: __thiscall CDSAPublicKey::CDSAPublicKey(class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_18 @ 18 NONAME ; protected: __thiscall CDSAPublicKey::CDSAPublicKey(void)
	call_vector_19 @ 19 NONAME ; protected: __thiscall CDSASignature::CDSASignature(class RInteger &,class RInteger &)
	call_vector_20 @ 20 NONAME ; protected: __thiscall CDSASignature::CDSASignature(void)
	call_vector_21 @ 21 NONAME ; protected: __thiscall CPadding::CPadding(int)
	call_vector_22 @ 22 NONAME ; protected: __thiscall CPaddingNone::CPaddingNone(int)
	call_vector_23 @ 23 NONAME ; protected: __thiscall CPaddingPKCS1Encryption::CPaddingPKCS1Encryption(int)
	call_vector_24 @ 24 NONAME ; protected: __thiscall CPaddingPKCS1Signature::CPaddingPKCS1Signature(int)
	call_vector_25 @ 25 NONAME ; protected: __thiscall CPaddingSSLv3::CPaddingSSLv3(int)
	call_vector_26 @ 26 NONAME ; protected: __thiscall CRSAKeyPair::CRSAKeyPair(void)
	call_vector_27 @ 27 NONAME ; protected: __thiscall CRSAParameters::CRSAParameters(class RInteger &)
	call_vector_28 @ 28 NONAME ; protected: __thiscall CRSAParameters::CRSAParameters(void)
	call_vector_29 @ 29 NONAME ; protected: __thiscall CRSAPrivateKeyCRT::CRSAPrivateKeyCRT(class RInteger &,class RInteger &,class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_30 @ 30 NONAME ; protected: __thiscall CRSAPrivateKeyStandard::CRSAPrivateKeyStandard(class RInteger &,class RInteger &)
	call_vector_31 @ 31 NONAME ; protected: __thiscall CRSAPublicKey::CRSAPublicKey(class RInteger &,class RInteger &)
	call_vector_32 @ 32 NONAME ; protected: __thiscall CRSAPublicKey::CRSAPublicKey(void)
	call_vector_33 @ 33 NONAME ; protected: __thiscall CRSASignature::CRSASignature(class RInteger &)
	call_vector_34 @ 34 NONAME ; protected: __thiscall CRijndael::CRijndael(void)
	call_vector_35 @ 35 NONAME ; protected: __thiscall MCryptoSystem::MCryptoSystem(void)
	call_vector_36 @ 36 NONAME ; protected: __thiscall CDecryptor::CDecryptor(void)
	call_vector_37 @ 37 NONAME ; protected: __thiscall CEncryptor::CEncryptor(void)
	call_vector_38 @ 38 NONAME ; protected: __thiscall MSignatureSystem::MSignatureSystem(void)
	call_vector_39 @ 39 NONAME ; public: __thiscall RInteger::RInteger(void)
	call_vector_40 @ 40 NONAME ; protected: __thiscall TInteger::TInteger(void)
	call_vector_41 @ 41 NONAME ; protected: virtual __thiscall CBlockChainingMode::~CBlockChainingMode(void)
	call_vector_42 @ 42 NONAME ; public: virtual __thiscall CBufferedTransformation::~CBufferedTransformation(void)
	call_vector_43 @ 43 NONAME ; public: virtual __thiscall CDHKeyPair::~CDHKeyPair(void)
	call_vector_44 @ 44 NONAME ; public: virtual __thiscall CDHParameters::~CDHParameters(void)
	call_vector_45 @ 45 NONAME ; public: virtual __thiscall CDHPrivateKey::~CDHPrivateKey(void)
	call_vector_46 @ 46 NONAME ; public: virtual __thiscall CDHPublicKey::~CDHPublicKey(void)
	call_vector_47 @ 47 NONAME ; public: virtual __thiscall CDSAKeyPair::~CDSAKeyPair(void)
	call_vector_48 @ 48 NONAME ; public: virtual __thiscall CDSAParameters::~CDSAParameters(void)
	call_vector_49 @ 49 NONAME ; public: virtual __thiscall CDSAPrimeCertificate::~CDSAPrimeCertificate(void)
	call_vector_50 @ 50 NONAME ; public: virtual __thiscall CDSAPrivateKey::~CDSAPrivateKey(void)
	call_vector_51 @ 51 NONAME ; public: virtual __thiscall CDSAPublicKey::~CDSAPublicKey(void)
	call_vector_52 @ 52 NONAME ; public: virtual __thiscall CDSASignature::~CDSASignature(void)
	call_vector_53 @ 53 NONAME ; public: virtual __thiscall CRSAKeyPair::~CRSAKeyPair(void)
	call_vector_54 @ 54 NONAME ; public: virtual __thiscall CRSAParameters::~CRSAParameters(void)
	call_vector_55 @ 55 NONAME ; public: virtual __thiscall CRSAPrivateKeyCRT::~CRSAPrivateKeyCRT(void)
	call_vector_56 @ 56 NONAME ; public: virtual __thiscall CRSAPrivateKeyStandard::~CRSAPrivateKeyStandard(void)
	call_vector_57 @ 57 NONAME ; public: virtual __thiscall CRSAPublicKey::~CRSAPublicKey(void)
	call_vector_58 @ 58 NONAME ; public: virtual __thiscall CRSASignature::~CRSASignature(void)
	call_vector_59 @ 59 NONAME ; public: virtual __thiscall CRijndael::~CRijndael(void)
	call_vector_60 @ 60 NONAME ; public: int __thiscall TInteger::operator!(void)const 
	call_vector_61 @ 61 NONAME ; public: int __thiscall CDSASignature::operator==(class CDSASignature const &)const 
	call_vector_62 @ 62 NONAME ; public: int __thiscall CRSASignature::operator==(class CRSASignature const &)const 
	call_vector_63 @ 63 NONAME ; public: __thiscall RInteger::operator class TCleanupItem(void)
	call_vector_64 @ 64 NONAME ; public: class HBufC8 const * __thiscall CDH::AgreeL(class CDHPublicKey const &)const 
	call_vector_65 @ 65 NONAME ; public: unsigned int __thiscall TInteger::BitCount(void)const 
	call_vector_66 @ 66 NONAME ; public: int __thiscall CPadding::BlockSize(void)const 
	call_vector_67 @ 67 NONAME ; public: virtual int __thiscall CStreamCipher::BlockSize(void)const 
	call_vector_68 @ 68 NONAME ; public: class CBlockTransformation * __thiscall CBufferedTransformation::BlockTransformer(void)const 
	call_vector_69 @ 69 NONAME ; public: class HBufC8 * __thiscall TInteger::BufferLC(void)const 
	call_vector_70 @ 70 NONAME ; public: unsigned int __thiscall TInteger::ByteCount(void)const 
	call_vector_71 @ 71 NONAME ; public: static void __cdecl RInteger::CallClose(void *)
	call_vector_72 @ 72 NONAME ; public: void __thiscall RInteger::Close(void)
	call_vector_73 @ 73 NONAME ; protected: void __thiscall CBlockChainingMode::ConstructL(class CBlockTransformation *,class TDesC8 const &)
	call_vector_74 @ 74 NONAME ; protected: void __thiscall CDHKeyPair::ConstructL(class RInteger &,class RInteger &,class RInteger &)
	call_vector_75 @ 75 NONAME ; protected: void __thiscall CDHKeyPair::ConstructL(class RInteger &,class RInteger &)
	call_vector_76 @ 76 NONAME ; public: unsigned int __thiscall CDSAPrimeCertificate::Counter(void)const 
	call_vector_77 @ 77 NONAME ; public: class TInteger const & __thiscall CRSAPrivateKeyStandard::D(void)const 
	call_vector_78 @ 78 NONAME ; public: class TInteger const & __thiscall CRSAPrivateKeyCRT::DP(void)const 
	call_vector_79 @ 79 NONAME ; public: class TInteger const & __thiscall CRSAPrivateKeyCRT::DQ(void)const 
	call_vector_80 @ 80 NONAME ; public: class TInteger const & __thiscall CRSAPublicKey::E(void)const 
	call_vector_81 @ 81 NONAME ; public: class TInteger const & __thiscall CDHParameters::G(void)const 
	call_vector_82 @ 82 NONAME ; public: class TInteger const & __thiscall CDSAParameters::G(void)const 
	call_vector_83 @ 83 NONAME ; protected: __thiscall CRSASigner::CRSASigner(void)
	call_vector_84 @ 84 NONAME ; public: virtual int __thiscall CStreamCipher::MaxFinalOutputLength(int)const 
	call_vector_85 @ 85 NONAME ; protected: __thiscall CRSAVerifier::CRSAVerifier(void)
	call_vector_86 @ 86 NONAME ; public virtual int CRSAVerifer::VerifyL(class TDesC8 const &,class CRSASignature const &)const
	call_vector_87 @ 87 NONAME ; public: virtual int __thiscall CStreamCipher::MaxOutputLength(int)const 
	call_vector_88 @ 88 NONAME ; public: virtual int __thiscall CPadding::MaxPaddedLength(int)const 
	call_vector_89 @ 89 NONAME ; public: virtual int __thiscall CPadding::MaxUnPaddedLength(int)const 
	call_vector_90 @ 90 NONAME ; public: static class RInteger  __cdecl TInteger::ModularExponentiateL(class TInteger const &,class TInteger const &,class TInteger const &)
	call_vector_91 @ 91 NONAME ; public: class TInteger const & __thiscall CDHParameters::N(void)const 
	call_vector_92 @ 92 NONAME ; public: class TInteger const & __thiscall CRSAParameters::N(void)const 
	call_vector_93 @ 93 NONAME ; public: static class RInteger  __cdecl RInteger::NewEmptyL(unsigned int)
	call_vector_94 @ 94 NONAME ; public: static class C3DESDecryptor * __cdecl C3DESDecryptor::NewL(class TDesC8 const &)
	call_vector_95 @ 95 NONAME ; public: static class C3DESEncryptor * __cdecl C3DESEncryptor::NewL(class TDesC8 const &)
	call_vector_96 @ 96 NONAME ; public: static class CAESDecryptor * __cdecl CAESDecryptor::NewL(class TDesC8 const &)
	call_vector_97 @ 97 NONAME ; public: static class CAESEncryptor * __cdecl CAESEncryptor::NewL(class TDesC8 const &)
	call_vector_98 @ 98 NONAME ; public: static class CARC4 * __cdecl CARC4::NewL(class TDesC8 const &,unsigned int)
	call_vector_99 @ 99 NONAME ; public: static class CBufferedDecryptor * __cdecl CBufferedDecryptor::NewL(class CBlockTransformation *,class CPadding *)
	call_vector_100 @ 100 NONAME ; public: static class CBufferedEncryptor * __cdecl CBufferedEncryptor::NewL(class CBlockTransformation *,class CPadding *)
	call_vector_101 @ 101 NONAME ; public: static class CDESDecryptor * __cdecl CDESDecryptor::NewL(class TDesC8 const &,int)
	call_vector_102 @ 102 NONAME ; public: static class CDESEncryptor * __cdecl CDESEncryptor::NewL(class TDesC8 const &,int)
	call_vector_103 @ 103 NONAME ; public: static class CDH * __cdecl CDH::NewL(class CDHPrivateKey const &)
	call_vector_104 @ 104 NONAME ; public: static class CDHKeyPair * __cdecl CDHKeyPair::NewL(class RInteger &,class RInteger &,class RInteger &)
	call_vector_105 @ 105 NONAME ; public: static class CDHKeyPair * __cdecl CDHKeyPair::NewL(class RInteger &,class RInteger &)
	call_vector_106 @ 106 NONAME ; public: static class CDHPrivateKey * __cdecl CDHPrivateKey::NewL(class RInteger &,class RInteger &,class RInteger &)
	call_vector_107 @ 107 NONAME ; public: static class CDHPublicKey * __cdecl CDHPublicKey::NewL(class RInteger &,class RInteger &,class RInteger &)
	call_vector_108 @ 108 NONAME ; public: static class CDSAKeyPair * __cdecl CDSAKeyPair::NewL(unsigned int)
	call_vector_109 @ 109 NONAME ; public: static class CDSAParameters * __cdecl CDSAParameters::NewL(class RInteger &,class RInteger &,class RInteger &)
	call_vector_110 @ 110 NONAME ; public: static class CDSAPrimeCertificate * __cdecl CDSAPrimeCertificate::NewL(class TDesC8 const &,unsigned int)
	call_vector_111 @ 111 NONAME ; public: static class CDSAPrivateKey * __cdecl CDSAPrivateKey::NewL(class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_112 @ 112 NONAME ; public: static class CDSAPublicKey * __cdecl CDSAPublicKey::NewL(class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_113 @ 113 NONAME ; public: static class CDSASignature * __cdecl CDSASignature::NewL(class RInteger &,class RInteger &)
	call_vector_114 @ 114 NONAME ; public: static class CDSASigner * __cdecl CDSASigner::NewL(class CDSAPrivateKey const &)
	call_vector_115 @ 115 NONAME ; public: static class CDSAVerifier * __cdecl CDSAVerifier::NewL(class CDSAPublicKey const &)
	call_vector_116 @ 116 NONAME ; public: static class CModeCBCDecryptor * __cdecl CModeCBCDecryptor::NewL(class CBlockTransformation *,class TDesC8 const &)
	call_vector_117 @ 117 NONAME ; public: static class CModeCBCEncryptor * __cdecl CModeCBCEncryptor::NewL(class CBlockTransformation *,class TDesC8 const &)
	call_vector_118 @ 118 NONAME ; public: static class CNullCipher * __cdecl CNullCipher::NewL(void)
	call_vector_119 @ 119 NONAME ; public: static class CPaddingNone * __cdecl CPaddingNone::NewL(int)
	call_vector_120 @ 120 NONAME ; public: static class CPaddingPKCS1Encryption * __cdecl CPaddingPKCS1Encryption::NewL(int)
	call_vector_121 @ 121 NONAME ; public: static class CPaddingPKCS1Signature * __cdecl CPaddingPKCS1Signature::NewL(int)
	call_vector_122 @ 122 NONAME ; public: static class CPaddingSSLv3 * __cdecl CPaddingSSLv3::NewL(int)
	call_vector_123 @ 123 NONAME ; public: static class CRC2Decryptor * __cdecl CRC2Decryptor::NewL(class TDesC8 const &,int)
	call_vector_124 @ 124 NONAME ; public: static class CRC2Encryptor * __cdecl CRC2Encryptor::NewL(class TDesC8 const &,int)
	call_vector_125 @ 125 NONAME ; public: static class CRSAKeyPair * __cdecl CRSAKeyPair::NewL(unsigned int,enum TRSAPrivateKeyType)
	call_vector_126 @ 126 NONAME ; public: static class CRSAPKCS1v15Decryptor * __cdecl CRSAPKCS1v15Decryptor::NewL(class CRSAPrivateKey const &)
	call_vector_127 @ 127 NONAME ; public: static class CRSAPKCS1v15Encryptor * __cdecl CRSAPKCS1v15Encryptor::NewL(class CRSAPublicKey const &)
	call_vector_128 @ 128 NONAME ; public: static class CRSAPKCS1v15Signer * __cdecl CRSAPKCS1v15Signer::NewL(class CRSAPrivateKey const &)
	call_vector_129 @ 129 NONAME ; public: static class CRSAPKCS1v15Verifier * __cdecl CRSAPKCS1v15Verifier::NewL(class CRSAPublicKey const &)
	call_vector_130 @ 130 NONAME ; public: static class CRSAPrivateKeyCRT * __cdecl CRSAPrivateKeyCRT::NewL(class RInteger &,class RInteger &,class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_131 @ 131 NONAME ; public: static class CRSAPrivateKeyStandard * __cdecl CRSAPrivateKeyStandard::NewL(class RInteger &,class RInteger &)
	call_vector_132 @ 132 NONAME ; public: static class CRSAPublicKey * __cdecl CRSAPublicKey::NewL(class RInteger &,class RInteger &)
	call_vector_133 @ 133 NONAME ; public: static class CRSASignature * __cdecl CRSASignature::NewL(class RInteger &)
	call_vector_134 @ 134 NONAME ; public: static class RInteger  __cdecl RInteger::NewL(class TDesC8 const &)
	call_vector_135 @ 135 NONAME ; public: static class RInteger  __cdecl RInteger::NewL(class TInteger const &)
	call_vector_136 @ 136 NONAME ; public: static class RInteger  __cdecl RInteger::NewL(int)
	call_vector_137 @ 137 NONAME ; public: static class RInteger  __cdecl RInteger::NewL(unsigned int)
	call_vector_138 @ 138 NONAME ; public: static class RInteger  __cdecl RInteger::NewL(void)
	call_vector_139 @ 139 NONAME ; public: static class C3DESDecryptor * __cdecl C3DESDecryptor::NewLC(class TDesC8 const &)
	call_vector_140 @ 140 NONAME ; public: static class C3DESEncryptor * __cdecl C3DESEncryptor::NewLC(class TDesC8 const &)
	call_vector_141 @ 141 NONAME ; public: static class CAESDecryptor * __cdecl CAESDecryptor::NewLC(class TDesC8 const &)
	call_vector_142 @ 142 NONAME ; public: static class CAESEncryptor * __cdecl CAESEncryptor::NewLC(class TDesC8 const &)
	call_vector_143 @ 143 NONAME ; public: static class CARC4 * __cdecl CARC4::NewLC(class TDesC8 const &,unsigned int)
	call_vector_144 @ 144 NONAME ; public: static class CBufferedDecryptor * __cdecl CBufferedDecryptor::NewLC(class CBlockTransformation *,class CPadding *)
	call_vector_145 @ 145 NONAME ; public: static class CBufferedEncryptor * __cdecl CBufferedEncryptor::NewLC(class CBlockTransformation *,class CPadding *)
	call_vector_146 @ 146 NONAME ; public: static class CDESDecryptor * __cdecl CDESDecryptor::NewLC(class TDesC8 const &,int)
	call_vector_147 @ 147 NONAME ; public: static class CDESEncryptor * __cdecl CDESEncryptor::NewLC(class TDesC8 const &,int)
	call_vector_148 @ 148 NONAME ; public: static class CDH * __cdecl CDH::NewLC(class CDHPrivateKey const &)
	call_vector_149 @ 149 NONAME ; public: static class CDHKeyPair * __cdecl CDHKeyPair::NewLC(class RInteger &,class RInteger &,class RInteger &)
	call_vector_150 @ 150 NONAME ; public: static class CDHKeyPair * __cdecl CDHKeyPair::NewLC(class RInteger &,class RInteger &)
	call_vector_151 @ 151 NONAME ; public: static class CDHPrivateKey * __cdecl CDHPrivateKey::NewLC(class RInteger &,class RInteger &,class RInteger &)
	call_vector_152 @ 152 NONAME ; public: static class CDHPublicKey * __cdecl CDHPublicKey::NewLC(class RInteger &,class RInteger &,class RInteger &)
	call_vector_153 @ 153 NONAME ; public: static class CDSAKeyPair * __cdecl CDSAKeyPair::NewLC(unsigned int)
	call_vector_154 @ 154 NONAME ; public: static class CDSAPrimeCertificate * __cdecl CDSAPrimeCertificate::NewLC(class TDesC8 const &,unsigned int)
	call_vector_155 @ 155 NONAME ; public: static class CDSAPrivateKey * __cdecl CDSAPrivateKey::NewLC(class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_156 @ 156 NONAME ; public: static class CDSAPublicKey * __cdecl CDSAPublicKey::NewLC(class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_157 @ 157 NONAME ; public: static class CDSASignature * __cdecl CDSASignature::NewLC(class RInteger &,class RInteger &)
	call_vector_158 @ 158 NONAME ; public: static class CDSASigner * __cdecl CDSASigner::NewLC(class CDSAPrivateKey const &)
	call_vector_159 @ 159 NONAME ; public: static class CDSAVerifier * __cdecl CDSAVerifier::NewLC(class CDSAPublicKey const &)
	call_vector_160 @ 160 NONAME ; public: static class CModeCBCDecryptor * __cdecl CModeCBCDecryptor::NewLC(class CBlockTransformation *,class TDesC8 const &)
	call_vector_161 @ 161 NONAME ; public: static class CModeCBCEncryptor * __cdecl CModeCBCEncryptor::NewLC(class CBlockTransformation *,class TDesC8 const &)
	call_vector_162 @ 162 NONAME ; public: static class CNullCipher * __cdecl CNullCipher::NewLC(void)
	call_vector_163 @ 163 NONAME ; public: static class CPaddingNone * __cdecl CPaddingNone::NewLC(int)
	call_vector_164 @ 164 NONAME ; public: static class CPaddingPKCS1Encryption * __cdecl CPaddingPKCS1Encryption::NewLC(int)
	call_vector_165 @ 165 NONAME ; public: static class CPaddingPKCS1Signature * __cdecl CPaddingPKCS1Signature::NewLC(int)
	call_vector_166 @ 166 NONAME ; public: static class CPaddingSSLv3 * __cdecl CPaddingSSLv3::NewLC(int)
	call_vector_167 @ 167 NONAME ; public: static class CRC2Decryptor * __cdecl CRC2Decryptor::NewLC(class TDesC8 const &,int)
	call_vector_168 @ 168 NONAME ; public: static class CRC2Encryptor * __cdecl CRC2Encryptor::NewLC(class TDesC8 const &,int)
	call_vector_169 @ 169 NONAME ; public: static class CRSAKeyPair * __cdecl CRSAKeyPair::NewLC(unsigned int,enum TRSAPrivateKeyType)
	call_vector_170 @ 170 NONAME ; public: static class CRSAPKCS1v15Decryptor * __cdecl CRSAPKCS1v15Decryptor::NewLC(class CRSAPrivateKey const &)
	call_vector_171 @ 171 NONAME ; public: static class CRSAPKCS1v15Encryptor * __cdecl CRSAPKCS1v15Encryptor::NewLC(class CRSAPublicKey const &)
	call_vector_172 @ 172 NONAME ; public: static class CRSAPKCS1v15Signer * __cdecl CRSAPKCS1v15Signer::NewLC(class CRSAPrivateKey const &)
	call_vector_173 @ 173 NONAME ; public: static class CRSAPKCS1v15Verifier * __cdecl CRSAPKCS1v15Verifier::NewLC(class CRSAPublicKey const &)
	call_vector_174 @ 174 NONAME ; public: static class CRSAPrivateKeyCRT * __cdecl CRSAPrivateKeyCRT::NewLC(class RInteger &,class RInteger &,class RInteger &,class RInteger &,class RInteger &,class RInteger &)
	call_vector_175 @ 175 NONAME ; public: static class CRSAPrivateKeyStandard * __cdecl CRSAPrivateKeyStandard::NewLC(class RInteger &,class RInteger &)
	call_vector_176 @ 176 NONAME ; public: static class CRSAPublicKey * __cdecl CRSAPublicKey::NewLC(class RInteger &,class RInteger &)
	call_vector_177 @ 177 NONAME ; public: static class CRSASignature * __cdecl CRSASignature::NewLC(class RInteger &)
	call_vector_178 @ 178 NONAME ; public: static class RInteger  __cdecl RInteger::NewPrimeL(unsigned int,int)
	call_vector_179 @ 179 NONAME ; public: static class RInteger  __cdecl RInteger::NewRandomL(class TInteger const &,class TInteger const &)
	call_vector_180 @ 180 NONAME ; public: static class RInteger  __cdecl RInteger::NewRandomL(unsigned int,int)
	call_vector_181 @ 181 NONAME ; public: class TInteger const & __thiscall CDSAParameters::P(void)const 
	call_vector_182 @ 182 NONAME ; public: class TInteger const & __thiscall CRSAPrivateKeyCRT::P(void)const 
	call_vector_183 @ 183 NONAME ; public: void __thiscall CPadding::PadL(class TDesC8 const &,class TDes8 &)
	call_vector_184 @ 184 NONAME ; public: class CDSAPrimeCertificate const & __thiscall CDSAKeyPair::PrimeCertificate(void)const 
	call_vector_185 @ 185 NONAME ; public: class CDHPrivateKey const & __thiscall CDHKeyPair::PrivateKey(void)const 
	call_vector_186 @ 186 NONAME ; public: class CDSAPrivateKey const & __thiscall CDSAKeyPair::PrivateKey(void)const 
	call_vector_187 @ 187 NONAME ; public: class CRSAPrivateKey const & __thiscall CRSAKeyPair::PrivateKey(void)const 
	call_vector_188 @ 188 NONAME ; public: virtual void __thiscall CStreamCipher::Process(class TDesC8 const &,class TDes8 &)
	call_vector_189 @ 189 NONAME ; public: virtual void __thiscall CStreamCipher::ProcessFinalL(class TDesC8 const &,class TDes8 &)
	call_vector_190 @ 190 NONAME ; public: class CDHPublicKey const & __thiscall CDHKeyPair::PublicKey(void)const 
	call_vector_191 @ 191 NONAME ; public: class CDSAPublicKey const & __thiscall CDSAKeyPair::PublicKey(void)const 
	call_vector_192 @ 192 NONAME ; public: class CRSAPublicKey const & __thiscall CRSAKeyPair::PublicKey(void)const 
	call_vector_193 @ 193 NONAME ; public: class TInteger const & __thiscall CDSAParameters::Q(void)const 
	call_vector_194 @ 194 NONAME ; public: class TInteger const & __thiscall CRSAPrivateKeyCRT::Q(void)const 
	call_vector_195 @ 195 NONAME ; public: class TInteger const & __thiscall CRSAPrivateKeyCRT::QInv(void)const 
	call_vector_196 @ 196 NONAME ; public: class TInteger const & __thiscall CDSASignature::R(void)const 
	call_vector_197 @ 197 NONAME ; public: class TInteger const & __thiscall CDSASignature::S(void)const 
	call_vector_198 @ 198 NONAME ; public: class TInteger const & __thiscall CRSASignature::S(void)const 
	call_vector_199 @ 199 NONAME ; public: class TDesC8 const & __thiscall CDSAPrimeCertificate::Seed(void)const 
	call_vector_200 @ 200 NONAME ; public: void __thiscall CPadding::SetBlockSize(int)
	call_vector_201 @ 201 NONAME ; public: static enum TCrypto::TStrength  __cdecl TCrypto::Strength(void)
	call_vector_202 @ 202 NONAME ; public: static int __cdecl CDSAParameters::ValidPrimeLength(unsigned int)
	call_vector_203 @ 203 NONAME ; public: int __thiscall CDSAParameters::ValidatePrimesL(class CDSAPrimeCertificate const &)const 
	call_vector_204 @ 204 NONAME ; public: unsigned int __thiscall TInteger::WordCount(void)const 
	call_vector_205 @ 205 NONAME ; public: class TInteger const & __thiscall CDHPublicKey::X(void)const 
	call_vector_206 @ 206 NONAME ; public: class TInteger const & __thiscall CDSAPrivateKey::X(void)const 
	call_vector_207 @ 207 NONAME ; public: class TInteger const & __thiscall CDSAPublicKey::Y(void)const 
	call_vector_208 @ 208 NONAME ; public: class TInteger const & __thiscall CDHPrivateKey::x(void)const 
	call_vector_209 @ 209 NONAME ; public: static int __cdecl TCrypto::IsAsymmetricWeakEnoughL(int)
	call_vector_210 @ 210 NONAME ; public: static int __cdecl TCrypto::IsSymmetricWeakEnoughL(int)
	call_vector_211 @ 211 NONAME ; CPaddingPKCS7::CPaddingPKCS7(int)
	call_vector_212 @ 212 NONAME ; class CPaddingPKCS7 * CPaddingPKCS7::NewL(int)
	call_vector_213 @ 213 NONAME ; class CPaddingPKCS7 * CPaddingPKCS7::NewLC(int)
	call_vector_214 @ 214 NONAME ; void KeyIdentifierUtil::DHKeyIdentifierL(class RInteger const &, class TBuf8<20> &)
	call_vector_215 @ 215 NONAME ; void KeyIdentifierUtil::DSAKeyIdentifierL(class CDSAPublicKey const &, class TBuf8<20> &)
	call_vector_216 @ 216 NONAME ; void KeyIdentifierUtil::RSAKeyIdentifierL(class CRSAPublicKey const &, class TBuf8<20> &)
	call_vector_217 @ 217 NONAME ; class TInteger & TInteger::operator++(void)
	call_vector_218 @ 218 NONAME ; class TInteger & TInteger::operator--(void)
	call_vector_219 @ 219 NONAME ; class RInteger TInteger::InverseModL(class TInteger const &) const
	call_vector_220 @ 220 NONAME ; class RInteger TInteger::TimesL(class TInteger const &) const
	call_vector_221 @ 221 NONAME ; public: __thiscall RInteger::RInteger(class RInteger const &)
	call_vector_222 @ 222 NONAME ; public: class RInteger & __thiscall RInteger::operator=(class RInteger const &)
	call_vector_223 @ 223 NONAME ; public: class TInteger & __thiscall TInteger::operator*=(class TInteger const &)
	call_vector_224 @ 224 NONAME ; public: class TInteger & __thiscall TInteger::operator*=(int)
	call_vector_225 @ 225 NONAME ; public: class TInteger & __thiscall TInteger::operator+=(class TInteger const &)
	call_vector_226 @ 226 NONAME ; public: class TInteger & __thiscall TInteger::operator+=(int)
	call_vector_227 @ 227 NONAME ; public: class TInteger & __thiscall TInteger::operator-=(class TInteger const &)
	call_vector_228 @ 228 NONAME ; public: class TInteger & __thiscall TInteger::operator-=(int)
	call_vector_229 @ 229 NONAME ; public: class TInteger & __thiscall TInteger::operator/=(class TInteger const &)
	call_vector_230 @ 230 NONAME ; public: class TInteger & __thiscall TInteger::operator/=(int)
	call_vector_231 @ 231 NONAME ; public: class TInteger & __thiscall TInteger::operator%=(class TInteger const &)
	call_vector_232 @ 232 NONAME ; public: class TInteger & __thiscall TInteger::operator%=(int)
	call_vector_233 @ 233 NONAME ; public: class TInteger & __thiscall TInteger::operator>>=(unsigned int)
	call_vector_234 @ 234 NONAME ; public: class TInteger & __thiscall TInteger::operator<<=(unsigned int)
	call_vector_235 @ 235 NONAME ; public: int __thiscall TInteger::Bit(unsigned int)const 
	call_vector_236 @ 236 NONAME ; public: int __thiscall TInteger::ConvertToLongL(void)const 
	call_vector_237 @ 237 NONAME ; public: class RInteger  __thiscall TInteger::DividedByL(class TInteger const &)const 
	call_vector_238 @ 238 NONAME ; public: class RInteger  __thiscall TInteger::DividedByL(unsigned int)const 
	call_vector_239 @ 239 NONAME ; public: class RInteger  __thiscall TInteger::ExponentiateL(class TInteger const &)const 
	call_vector_240 @ 240 NONAME ; public: class RInteger  __thiscall TInteger::GCDL(class TInteger const &)const 
	call_vector_241 @ 241 NONAME ; public: int __thiscall TInteger::IsPrimeL(void)const 
	call_vector_242 @ 242 NONAME ; public: class RInteger  __thiscall TInteger::MinusL(class TInteger const &)const 
	call_vector_243 @ 243 NONAME ; public: static class RInteger  __cdecl TInteger::ModularMultiplyL(class TInteger const &,class TInteger const &,class TInteger const &)
	call_vector_244 @ 244 NONAME ; public: class RInteger  __thiscall TInteger::ModuloL(class TInteger const &)const 
	call_vector_245 @ 245 NONAME ; public: unsigned int __thiscall TInteger::ModuloL(unsigned int)const 
	call_vector_246 @ 246 NONAME ; public: void __thiscall TInteger::Negate(void)
	call_vector_247 @ 247 NONAME ; public: static class TInteger const & __cdecl TInteger::One(void)
	call_vector_248 @ 248 NONAME ; public: class RInteger  __thiscall TInteger::PlusL(class TInteger const &)const 
	call_vector_249 @ 249 NONAME ; public: void __thiscall TInteger::SetBit(unsigned int)
	call_vector_250 @ 250 NONAME ; public: int __thiscall TInteger::SignedCompare(class TInteger const &)const 
	call_vector_251 @ 251 NONAME ; public: int __thiscall TInteger::SignedCompare(int)const 
	call_vector_252 @ 252 NONAME ; public: class RInteger  __thiscall TInteger::SquaredL(void)const 
	call_vector_253 @ 253 NONAME ; public: static class TInteger const & __cdecl TInteger::Two(void)
	call_vector_254 @ 254 NONAME ; public: int __thiscall TInteger::UnsignedCompare(class TInteger const &)const 
	call_vector_255 @ 255 NONAME ; public: static class TInteger const & __cdecl TInteger::Zero(void)
	call_vector_256 @ 256 NONAME ; public: void __thiscall TInteger::CopyL(class TInteger const &,int)
	call_vector_257 @ 257 NONAME ; public: void __thiscall TInteger::CopyL(int,int)
	call_vector_258 @ 258 NONAME ; public: void __thiscall TInteger::Set(class RInteger const &)
	call_vector_259 @ 259 NONAME ; public: static int __cdecl CDES::IsWeakKey(class TDesC8 const &)
	call_vector_260 @ 260 NONAME ; public: class HBufC8 * __thiscall TInteger::BufferWithLeadingZerosLC(void)const 
	call_vector_261 @ 261 NONAME ; public: CMontgomeryStructure* __thiscall CMontgomeryStructure::NewLC(const TInteger&)
	call_vector_262 @ 262 NONAME ; public: void __thiscall CMontgomeryStructure::ExponentiateL(const TInteger&, const TInteger&) const

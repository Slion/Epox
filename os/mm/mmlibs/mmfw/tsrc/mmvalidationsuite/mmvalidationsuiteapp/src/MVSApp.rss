// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
// Part of the MVS Application for TechView
//


NAME NEWA

#include <techview/eikon.rh>
#include <uikon.rh>
#include <techview/eikon.hrh>
#include <uiklafgt/eikcore.rsg>
#include <eikcoctl.rsg>
#include <eikctl.rsg>
#include <eikfile.rsg>
#include <eikprint.rsg>

#include <mvsapp.mbg>


//enums for the resource file and application
#include "MVSApp.hrh"

//string defs
#include "MVSApp.rls"

RESOURCE RSS_SIGNATURE { }

RESOURCE TBUF
    {
    buf = "";
    }

RESOURCE EIK_APP_INFO
    {
    hotkeys = r_mvs_hotkeys;
    menubar = r_mvs_menubar;
    toolbar = r_mvs_toolbar;
    toolband = r_mvs_toolbar2;
    }

RESOURCE HOTKEYS r_mvs_hotkeys
    {
    control =
        {
        HOTKEY
            {
            command = EMVSCmdExit;
            key = HOTKEY_EEikCmdExit;
            },
		HOTKEY
            {
            command = EMVSCmdNew;
            key = HOTKEY_EMVSNew;
            },
		HOTKEY
            {
            command = EMVSCmdOpen;
            key = HOTKEY_EMVSOpen;
            },
		HOTKEY
            {
            command = EMVSCmdRecord;
            key = HOTKEY_EMVSRecord;
            },
		HOTKEY
            {
            command = EMVSCmdClose;
            key = HOTKEY_EMVSClose;
            },
		HOTKEY
			{
			command = EMVSButtonCancel;
			key = HOTKEY_EMVSCancel;
			}        
         };
	plain = 
		{
		HOTKEY
            {
            command = EMVSCmdPlay;
            key = HOTKEY_EMVSPlay;
            },
        HOTKEY
            {
            command = EMVSCmdPause;
            key = HOTKEY_EMVSPause;
            },
        HOTKEY
            {
            command = EMVSCmdStop;
            key = HOTKEY_EMVSStop;
            }
        };
    }

RESOURCE MENU_BAR r_mvs_menubar
    {
    titles =
        {
        MENU_TITLE
            {
            menu_pane = r_mvs_file_menu;
            txt = STRING_mvs_file_menu;
            },
        MENU_TITLE
            {
            menu_pane = r_mvs_edit_menu;
            txt = STRING_mvs_edit_menu;
            },
        MENU_TITLE
            {
            menu_pane = r_mvs_settings_menu;
            txt = STRING_mvs_settings_menu;
            },
        MENU_TITLE
        	{
        	menu_pane = r_mvs_controls_menu;
        	txt = STRING_mvs_controls_menu;	
        	}
        };
    }

RESOURCE MENU_PANE r_mvs_file_menu
    {
    items =
        {
        MENU_ITEM
            {
            command = EMVSCmdNew;
            txt = STRING_mvs_file_menu_record;
            },
        MENU_ITEM
            {
            command = EMVSCmdOpen;
            txt = STRING_mvs_file_menu_play;
            },
        MENU_ITEM
            {
            command = EMVSCmdClose;
            txt = STRING_mvs_file_menu_close;
            },
        MENU_ITEM
            {
            command = EMVSCmdSystemInfo;
            txt = STRING_mvs_file_menu_systeminfo;
            },
        MENU_ITEM
            {
            command = EMVSCmdExit;
            txt = STRING_mvs_file_menu_exit;
            }
        };
    }

RESOURCE MENU_PANE r_mvs_edit_menu
    {
    items =
        {
        MENU_ITEM
            {
            command = EMVSCmdSetCropWindow;
            txt = STRING_mvs_edit_menu_setcropwindow;
            },
        MENU_ITEM
            {
            command = EMVSCmdSetPlayWindow;
            txt = STRING_mvs_edit_menu_setplaywindow;
            },
        MENU_ITEM
            {
            command = EMVSCmdClearPlayWindow;
            txt = STRING_mvs_edit_menu_clearplaywindow;
            }
        };
    }


RESOURCE MENU_PANE r_mvs_settings_menu
    {
    items =
        {
        MENU_ITEM
            {
            command = EMVSCmdAudioSetting;
            txt = STRING_mvs_settings_audio_menu;
            },
        MENU_ITEM
            {
            command = EMVSVideoCmdSettings;
            txt = STRING_mvs_settings_video_menu;
            },
        MENU_ITEM
            {
            command = EMVSCmdEditMetadata;
            txt = STRING_mvs_settings_metadata_menu;
            },
        MENU_ITEM
        	{
        	command = EMVSCmdMultiScreen;
        	txt = STRING_mvs_multiscreen_option;
        	},
        MENU_ITEM
        	{
        	command = EMVSRegisterForNotification;
        	txt = STRING_mvs_settings_register_menu;
        	},
        MENU_ITEM
            {
            command = EMVSCmdClearLog;
            txt = STRING_mvs_settings_clearlog_menu;
#ifdef SYMBIAN_MULTIMEDIA_SUBTITLE_SUPPORT
            flags = EEikMenuItemSeparatorAfter;
            },
         MENU_ITEM
	        {
	        command = EMVSCmdEnableSubtitles;
	        txt = STRING_mvs_settings_menu_enable_subtitles;
	        },
	     MENU_ITEM
	        {
	        command = EMVSCmdDisableSubtitles;
	        txt = STRING_mvs_settings_menu_disable_subtitles;
#endif // SYMBIAN_MULTIMEDIA_SUBTITLE_SUPPORT
            }
        };
    }


RESOURCE MENU_PANE r_mvs_controls_menu
    {
    items =
        {
        MENU_ITEM
            {
            command = EMVSCmdPlay;
            txt = STRING_mvs_controls_menu_play;
            },
         MENU_ITEM
            {
            command = EMVSCmdPause;
            txt = STRING_mvs_controls_menu_pause;
            },
         MENU_ITEM
            {
            command = EMVSCmdStop;
            txt = STRING_mvs_controls_menu_stop;
            flags = EEikMenuItemSeparatorAfter;
            },
         MENU_ITEM
            {
            command = EMVSCmdRewind;
            txt = STRING_mvs_controls_menu_rewind;
            },
         MENU_ITEM
            {
            command = EMVSCmdFastForward;
            txt = STRING_mvs_controls_menu_forward;
            },
         MENU_ITEM
            {
            command = EMVSCmdRecord;
            txt = STRING_mvs_controls_menu_record;
            }
            
        };
    }
    
    

RESOURCE MENU_PANE r_mvs_settings_audio_menu
	{
    items=
        {
        MENU_ITEM
            {
            command = EMVSCmdSetVolume;
            txt = STRING_mvs_settings_audio_menu_setvolume;
            },
        MENU_ITEM
            {
            command = EMVSCmdSetRepeats;
            txt = STRING_mvs_settings_audio_menu_setrepeats;
            },
		MENU_ITEM
            {
            command = EMVSCmdSetPlayBalance;
            txt = STRING_mvs_settings_audio_menu_setplaybackbalance;
            },
        MENU_ITEM
            {
            command = EMVSCmdSetGain;
            txt = STRING_mvs_settings_audio_menu_setgain;
            },
        MENU_ITEM
            {
            command = EMVSCmdSetRecordBalance;
            txt = STRING_mvs_settings_audio_menu_setrecordbalance;
            },
        MENU_ITEM
            {
            command = EMVSCmdSetAudioPriority;
            txt = STRING_mvs_settings_audio_menu_setaudiopriority;
            }
		
        };
    }
   
  
RESOURCE TOOLBAND r_mvs_toolbar1
	{
	breadth=100;
	controls=
		{
		DLG_TBAR_SPACER
            {
			type=EEikCtSpacer;
			flags=EEikToolBarCtrlHasSetMinLength;
			length = 638;
			width=25;
			color=3;
            }   
        };
	}

RESOURCE TOOLBAND r_mvs_toolbar
    {
    breadth=30;
    controls=
        {
		TBAR_BUTTON
            {
            id=EMVSCmdPlay;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 30;
            bmpfile="*";
            bmpid=EMbmMvsappPlay;
            bmpmask=EMbmMvsappPlaymask;
            },
                  
        TBAR_BUTTON 
            {
            id=EMVSCmdPause;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 30;
            bmpfile="*";
            bmpid=EMbmMvsappPause;
            bmpmask=EMbmMvsappPausemask;
            },

        TBAR_BUTTON 
            {
            id=EMVSCmdStop;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 30;
            bmpfile="*";
            bmpid=EMbmMvsappStop;
            bmpmask=EMbmMvsappStopmask;
            },
        
        TBAR_BUTTON 
            {
            id=EMVSCmdRecord;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 30;
            bmpfile="*";
            bmpid=EMbmMvsappRec;
            bmpmask=EMbmMvsappRecmask;
            },  
            
		DLG_TBAR_SPACER
            {
			type=EEikCtSpacer;
			flags=EEikToolBarCtrlHasSetMinLength;
			length = 35;
			width=25;
			color=3;
            },  
        
		TBAR_BUTTON 
            {
            id=EMVSCmdSetRepeats;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 30;
            bmpfile="*";
            bmpid=EMbmMvsappCirc;
	        bmpmask=EMbmMvsappCircmask;
            },
        
        TBAR_BUTTON
            {
            id=EMVSCmdSetVolume;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 45;
            bmpfile="*";
            bmpid=EMbmMvsappSound;
	        bmpmask=EMbmMvsappSoundmask;
            },
            
        TBAR_BUTTON
            {
            id=EMVSCmdSetPlayBalance;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 45;
            bmpfile="*";
            bmpid=EMbmMvsappBalance;
	        bmpmask=EMbmMvsappBalancemask;
            },
            
        DLG_TBAR_SPACER
            {
			type=EEikCtSpacer;
			flags=EEikToolBarCtrlHasSetMinLength;
			length = 52;
			width=10;
			color=3;
            }, 
            
		TBAR_BUTTON 
            {
            id=EMVSCmdRewind;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 45;
            bmpfile="*";
            bmpid=EMbmMvsappRwd;
            bmpmask=EMbmMvsappRwdmask;
            },
	
		DLG_TBAR_SPACER
            {
			type=EEikCtSpacer;
			flags=EEikToolBarCtrlHasSetMinLength;
			length = 6;
			width=25;
			color=3;
            },   
        
		TBAR_BUTTON 
            {
            id=EMVSCmdFastForward;
            flags=EEikToolBarCtrlHasSetMinLength;
			length = 45;
            bmpfile="*";
            bmpid=EMbmMvsappFwd;
            bmpmask=EMbmMvsappFwdmask;
            },
		
		
		DLG_TBAR_SPACER
            {
			type=EEikCtSpacer;
			flags=EEikToolBarCtrlHasSetMinLength;
			length = 215;
			width=25;
			color=3;
            }                    	    
        };

    }
    
RESOURCE TOOLBAND r_mvs_toolbar2
	{
	breadth=5;
	controls=
		{
		DLG_TBAR_SPACER
            {
			type=EEikCtSpacer;
			flags=EEikToolBarCtrlHasSetMinLength;
			length = 638;
			width=25;
			color=3;
            }   
        };
	}

 //buttons
RESOURCE DLG_BUTTONS r_mvs_buttons_up_down_ok_cancel
	{
	buttons=
		{
		DLG_BUTTON
			{
			id = EMVSButtonDown;
			button = CMBUT {txt = STRING_r_mvs_buttons_down;};
			hotkey = EEikBidBlank;
			},
		DLG_BUTTON
			{
			id = EMVSButtonUp;
			button = CMBUT {txt = STRING_r_mvs_buttons_up;};
			hotkey = EEikBidSpace;
			},
		DLG_BUTTON
			{
			id = EMVSButtonCancel;
			button = CMBUT {txt = STRING_r_mvs_buttons_cancel;};
			hotkey = EEikBidCancel;
			},	
		DLG_BUTTON
			{
			id = EMVSButtonOk;
			button = CMBUT {txt = STRING_r_mvs_buttons_ok;};
			hotkey = EEikBidOk;
			}
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_setvolume
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setvolume_setvolume;
	buttons = r_mvs_buttons_up_down_ok_cancel;
    items=
		{
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setvolume_specifyvolume;
            type=EEikCtProgInfo;
			id=EMVSCmdSetVolume;
			control=PROGRESSINFO
				{
				finalval=KMVSProgressLabelMaxValue; // Maximum number of values the bar can have.
                width=200; // The width of the bar.
				text_type=EEikProgressTextPercentage;
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setvolume_specifyvolumeramp;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetVolumeRamp;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 10;
				};
            }
        };
	}

RESOURCE DLG_BUTTONS r_mvs_buttons_left_right_ok_cancel
	{
	buttons=
		{
		DLG_BUTTON
			{
			id = EMVSButtonLeft;
			button = CMBUT {txt = STRING_r_mvs_buttons_left;};
			},
		DLG_BUTTON
			{
			id = EMVSButtonRight;
			button = CMBUT {txt = STRING_r_mvs_buttons_right;};
			},
		DLG_BUTTON
			{
			id = EMVSButtonCancel;
			button = CMBUT {txt = STRING_r_mvs_buttons_cancel;};
			},
		DLG_BUTTON
			{
			id = EMVSButtonOk;
			button = CMBUT {txt = STRING_r_mvs_buttons_ok;};
			}
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_setbalance
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setbalance_setbalance;
	buttons = r_mvs_buttons_left_right_ok_cancel;
    items=
		{
         DLG_LINE
            {
			
            prompt=STRING_r_mvs_dialog_setbalance_specifybalance;
            type=EEikCtProgInfo;
			id=EMVSSetBalance;
			control=PROGRESSINFO
				{
				finalval=KMVSProgressLabelMaxValue; // Maximum number of values the bar can have.
                width=200; // The width of the bar.
				};
            },
		DLG_LINE
            {	
            prompt="";
            type=EEikCtLabel;
			id=EMVSSetBalanceLR;
			control= LABEL
				{
				txt = "Left                      Right    ";
				};
            }
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_setgain
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setgain_setgain;
	buttons = r_mvs_buttons_up_down_ok_cancel;
    items=
		{
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setgain_specifygain;
            type=EEikCtProgInfo;
			id=EMVSCmdSetGain;
			control=PROGRESSINFO
				{
				finalval=KMVSProgressLabelMaxValue; // Maximum number of values the bar can have.
                width=200; // The width of the bar.
				text_type=EEikProgressTextPercentage;
				};
            }
		};
	}

RESOURCE DIALOG r_mvs_dialog_setrepeats
	{
	flags = EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setrepeats_setrepeats;
	buttons = R_EIK_BUTTONS_CANCEL_OK;
    items=
		{
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setrepeats_specifyrepeats;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetRepeats;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setrepeats_specifytrailingsilence;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetTrailingSilence;
			control= NUMBER_EDITOR
				{
				min = 1;
				max = 10;
				};
            }
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_multiplescreen
	{
	flags = EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setscreen;
	buttons = R_EIK_BUTTONS_CANCEL_OK;
    items=
		{
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setscreen_specifyscreen;
            type=EEikCtNumberEditor;
			id=EMVSCmdMultiScreen;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            }
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_register
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_registerfornotification;
	buttons = R_EIK_BUTTONS_CANCEL_OK;
    items=
		{
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_registerfornotification_label;
            type=EEikCtCheckBox;
			id=EMVSRegisterForNotification;
            }
        };
	}

RESOURCE DLG_BUTTONS r_mvs_buttons_cancel_next
	{
	buttons=
		{
		DLG_BUTTON
			{
			id = EMVSButtonCancel;
			button = CMBUT {txt = STRING_r_mvs_buttons_cancel;};
			},
		DLG_BUTTON
			{
			id = EMVSButtonNext;
			button = CMBUT {txt = STRING_r_mvs_buttons_next;};
			hotkey = EEikBidOk;
			}
		};
	}
	
RESOURCE ARRAY r_mvs_array_none
    {
    items=
        {
        LBUF { txt= STRING_r_mvs_dialog_none; }
        };
    }
    
RESOURCE DIALOG r_mvs_dialog_selectplugins
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_selectplugins_selectplugins;
	buttons = r_mvs_buttons_cancel_next;
    items=
		{
		 DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectplugins_type;
            type=EEikCtHorOptionButList;
			id=EMVSCmdSelectMediaType;
			control= HOROPBUT
				{
				array_id=r_mvs_media_type_array;
				};
            },
            
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectplugins_format;
            type=EEikCtChoiceList;
			id=EMVSCmdSelectFormat;
			control= CHOICELIST
				{
				array_id = r_mvs_array_none;
				};
            },
            
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectplugins_controller;
            type=EEikCtChoiceList;
			id=EMVSCmdSelectControllerPlugin;
			control=CHOICELIST
				{
				array_id = r_mvs_array_none;
				};
            }
		
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_videoplugins
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_selectplugins_videoplugins;
	buttons = r_mvs_buttons_update_cancel;
    items=
		{       
        DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectvideomime_codec;
            type=EEikCtChoiceList;
			id=EMVSCmdSelectVideoMimeCodec;
			control= CHOICELIST
			    {
				};
            },
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectvideoframerate;
            type=EEikCtChoiceList;
			id=EMVSCmdSelectVideoFrameRate;
			control= CHOICELIST
			    {
			    };
            },
         DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectvideoFrameSize;
            type=EEikCtChoiceList;
			id=EMVSCmdSelectVideoFrameSize;
			control= CHOICELIST
			    {
			    };
            },
         DLG_LINE
            {
            type=EEikCtCheckBox;
            prompt=STRING_r_audioenabled_dialog_settings;
            id=EMVSEnableAudio;
            },
         DLG_LINE
            {
            type=EEikCtCheckBox;
            prompt=STRING_r_audio_dialog_settings;
            id=EMVSRestoreVideoSettings;
            }
        };
	}

RESOURCE ARRAY r_mvs_media_type_array
    {
    items=
        {
        OPBUT { id = EMVSHorOptButtonAudio;
				text=STRING_r_mvs_dialog_selectplugins_audiochkbox; },
        OPBUT { id = EMVSHorOptButtonVideo;
				text=STRING_r_mvs_dialog_selectplugins_videochkbox; }
        };
    }
    
RESOURCE DLG_BUTTONS r_mvs_buttons_update_cancel
	{
	buttons=
		{
		DLG_BUTTON
			{
			id = EMVSButtonCancel;
			button = CMBUT {txt = STRING_r_mvs_buttons_cancel;};
			hotkey = EEikBidCancel;
			},
		DLG_BUTTON
			{
			id = EMVSButtonUpdate;
			button = CMBUT {txt = STRING_r_mvs_buttons_ok;};
			hotkey = EEikBidOk;
			}
		};
	}
	
RESOURCE DLG_BUTTONS r_mvs_buttons_update
	{
	buttons=
		{
		DLG_BUTTON
			{
			id = EMVSButtonOnlyUpdate;
			button = CMBUT {txt = STRING_r_mvs_buttons_ok;};
			hotkey = EEikBidOk;
			}
		};
	}
	
RESOURCE DIALOG r_mvs_dialog_configuredataformat
	{
    flags=EEikDialogFlagWait;
	title=r_mvs_dialog_configuredataformat_configuredataformat;
	buttons = r_mvs_buttons_update_cancel;
    items=
		{         
        DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_selectplugins_codec;
            type=EEikCtChoiceList;
			id=EMVSCmdSelectCodec;
			control= CHOICELIST
				{
				};
            },
         
         DLG_LINE
            {	
            prompt=r_mvs_dialog_configuredataformat_bitrate;
            type=EEikCtChoiceList;
			id=EMVSSetBitrate;
			control= CHOICELIST
				{
				};
            },

		DLG_LINE
            {	
            prompt=r_mvs_dialog_configuredataformat_nochannels;
            type=EEikCtChoiceList;
			id=EMVSSetNoOfChannels;
			control= CHOICELIST
				{
				};
            },

		DLG_LINE
            {	
            prompt=r_mvs_dialog_configuredataformat_samplerate;
            type=EEikCtChoiceList;
			id=EMVSSetSamplerate;
			control= CHOICELIST
				{
				};
            },
        DLG_LINE
            {
            type=EEikCtCheckBox;
            prompt=STRING_r_audio_dialog_settings;
            id=EMVSRestoreAudioSettings;
            }
		};
	}

RESOURCE ARRAY r_mvs_dialog_configuredataformat_formats
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_configuredataformat_formats_wav; }
          };    

      }

RESOURCE ARRAY r_mvs_dialog_configuredataformat_codecs
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_configuredataformat_codecs_pcm16; }
          };    

      }
      
// The array associated with the configure data format dialog.

RESOURCE ARRAY r_mvs_dialog_configuredataformat_bitrates
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_configuredataformat_bitrates_128; }
          };    

      }


RESOURCE ARRAY r_mvs_dialog_configuredataformat_samplerates
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_8000; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_11025; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_16000; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_22050; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_32000; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_44100; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_samplerates_48000; }
		  };    

      }

RESOURCE ARRAY r_mvs_dialog_configuredataformat_no_of_channels
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_configuredataformat_nochannels_mono; },
		  LBUF { txt= STRING_r_mvs_dialog_configuredataformat_nochannels_stereo; }
          };    

      }


RESOURCE DIALOG r_mvs_dialog_setmetainfo
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setmetainfo_setmetainfo;
	buttons = r_mvs_buttons_update_cancel;
    items=
		{
         DLG_LINE
            {	
            prompt= STRING_r_mvs_dialog_viewmetainfo_title;
            type=EEikCtEdwin;
			id=EMVSMeta1;
			control= EDWIN
				{
				flags = 0;
				width = 15;
				lines = 1;
				maxlength = 20;
				};
            },

		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_viewmetainfo_author;
            type=EEikCtEdwin;
			id=EMVSMeta2;
			control= EDWIN
				{
				flags = 0;
				width = 15;
				lines = 1;
				maxlength = 20;
				};
            },

		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_viewmetainfo_copyright;
            type=EEikCtEdwin;
			id=EMVSMeta3;
			control= EDWIN
				{
				flags = 0;
				width = 10;
				lines = 1;
				maxlength = 15;
				};
            },

		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_viewmetainfo_revision;
            type=EEikCtEdwin;
			id=EMVSMeta4;
			control= EDWIN
				{
				flags = 0;
				width = 5;
				lines = 1;
				maxlength = 8;
				};
            },

		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_viewmetainfo_category;
            type=EEikCtEdwin;
			id=EMVSMeta5;
			control= EDWIN
				{
				flags = 0;
				width = 10;
				lines = 1;
				maxlength = 15;
				};
            },

		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_viewmetainfo_comments;
            type=EEikCtEdwin;
			id=EMVSMeta6;
			control= EDWIN
				{
				flags = 0;
				width = 15;
				lines = 2;
				maxlength = 40;
				};
            }
		};
	}


//
//
//SYSTEM INFO
RESOURCE DIALOG r_new_mvs_dialog_systeminfo
	{
    flags=EEikDialogFlagWait;
	title=STRING_mvs_file_menu_systeminfo;
	buttons = r_mvs_buttons_update;
    items=
		{
        DLG_LINE
            {
		    prompt="";
      		type=EEikCtEdwin;
			id=EMVSCmdSystemInfo;
			control=EDWIN
				{
				width=45;
				lines=25;
				};
            }
		 };
	}


//
//
//VIDEO SETTINGS
RESOURCE DIALOG r_mvs_video_dialog_videosetting
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_newvideo_dialog_video_videosetting;
	buttons = r_mvs_buttons_update_cancel;
    items=
		{
       	DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_rotation;
            type=EEikCtChoiceList;
			id=EMVSVideoRotationSettings;
			control= CHOICELIST
				{
				array_id = r_newmvs_dialog_setvideorotation_choicelist;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_scalewidth;
            type=EEikCtFlPtEd;
			id=EMVSCmdScaleWidth;
			control= FLPTED
				{
				min = 1;
				max = 1000;
				};
            trailer="%";
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_scaleheight;
            type=EEikCtFlPtEd;
			id=EMVSCmdScaleHeight;
			control= FLPTED 
				{
				min = 1;
				max = 1000;
				};
			trailer="%";
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_antialiasfiltering;
            type=EEikCtCheckBox;
            id=EMVSAntiAliasFiltering;
			},
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_____________________________________________________";
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "CROP REGION";         
				};
            },
		DLG_LINE
            {
            prompt=STRING_r_newvideo_dialog_video_top_left_x;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetTopLeftx;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_top_left_y;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetTopLefty;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_bottom_right_x;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetBottomRightx;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_bottom_right_y;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetBottomRighty; 
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_____________________________________________________";
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "VIDEO EXTENT REGION";
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_top_left_x;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetVideoExtentTopLeftx;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_top_left_y;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetVideoExtentTopLefty;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_bottom_right_x;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetVideoExtentBottomRightx;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_bottom_right_y;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetVideoExtentBottomRighty;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_____________________________________________________";
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "WINDOW CLIPPING REGION";
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_top_left_x;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetWindowClipTopLeftx;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_top_left_y;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetWindowClipTopLefty;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_bottom_right_x;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetWindowClipBottomRightx;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_bottom_right_y;
            type=EEikCtNumberEditor;
            id=EMVSCmdSetWindowClipBottomRighty;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_______________________________________________________";
				};
            },
        DLG_LINE
                {
                type=EEikCtCheckBox;
                prompt=STRING_r_newvideo_dialog_video_display_overlay_text;
                id=EMVSCmdSetDisplayOverlayText;
                },          
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_display_overlay_text;
            type=EEikCtEdwin;
            id=EMVSCmdSetOverlayText;
			control= EDWIN
				{
                width = 20;
                maxlength = 50;				
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_____________________________________________________";
				};
            },                        
        DLG_LINE
                {
                type=EEikCtCheckBox;
                prompt=STRING_r_newvideo_dialog_video_viewfinder;
                id=EMVSVideoCmdSettings;
                },          
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_cameraindex;
            type=EEikCtNumberEditor;
            id=EMVSVideoCmdSettings;
			control= NUMBER_EDITOR
				{
				min = 1;
				max = 1000;
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_______________________________________________________";
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_camerapriority;
            type=EEikCtNumberEditor;
            id=EMVSVideoCmdSettings;
			control= NUMBER_EDITOR
				{
				min = 1;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control= LABEL
				{
				
				};
            },
        DLG_LINE
            {
		    prompt="";
            type=EEikCtLabel;
			id=EMVSVideoCmdSettings;
			control=LABEL
				{
				txt = "_______________________________________________________";
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_auto_scale_type;
            type=EEikCtChoiceList;
			id=EMVSAutoScaleType;
			control= CHOICELIST
				{
				array_id = r_newmvs_dialog_setautoscale_type_choicelist;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_auto_scale_horiz;
            type=EEikCtChoiceList;
			id=EMVSAutoScaleHoriz;
			control= CHOICELIST
				{
				array_id = r_newmvs_dialog_setautoscale_horiz_choicelist;
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_auto_scale_horiz_pos;
            type=EEikCtNumberEditor;
            id=EMVSAutoScaleHorizPos;
			control= NUMBER_EDITOR
				{
				min = -1000;
				max = 1000;
				};
            },
        DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_auto_scale_vert;
            type=EEikCtChoiceList;
			id=EMVSAutoScaleVert;
			control= CHOICELIST
				{
				array_id = r_newmvs_dialog_setautoscale_vert_choicelist;
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_newvideo_dialog_video_auto_scale_vert_pos;
            type=EEikCtNumberEditor;
            id=EMVSAutoScaleVertPos;
			control= NUMBER_EDITOR
				{
				min = -1000;
				max = 1000;
				};
            },
         DLG_LINE
         	{
         	prompt=STRING_r_newvideo_dialog_pip;
         	type=EEikCtCheckBox;
         	id=EMVSPIP;
         	},
		 DLG_LINE
			{
			prompt=STRING_r_newvideo_dialog_crp;
			type=EEikCtCheckBox;
			id=EMVSCRP;
			}
		};
	}


RESOURCE ARRAY r_newmvs_dialog_setvideorotation_choicelist
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_setrotationnone; },
          LBUF { txt= STRING_r_mvs_dialog_setrotationClockwise90; },
          LBUF { txt= STRING_r_mvs_dialog_setrotationClockwise180; },
          LBUF { txt= STRING_r_mvs_dialog_setrotationClockwise270; }
          };

      }

RESOURCE ARRAY r_newmvs_dialog_setautoscale_type_choicelist
      {
      items=
          {
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_none; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_best_fit; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_clip; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_stretch; }
          };
      }

RESOURCE ARRAY r_newmvs_dialog_setautoscale_horiz_choicelist
      {
      items=
          {
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_left; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_center; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_right; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_custom; }
          };
      }

RESOURCE ARRAY r_newmvs_dialog_setautoscale_vert_choicelist
      {
      items=
          {
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_top; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_center; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_bottom; },
          LBUF { txt= STRING_r_newvideo_dialog_video_auto_scale_custom; }
          };
      }

/*//
//
//Audio Settings*/
RESOURCE DIALOG r_new_mvs_dialog_audiosetting
	{
    flags=EEikDialogFlagWait;
	title=STRING_mvs_file_menu_audiosetting;
	buttons = r_mvs_buttons_update_cancel;
    items=
		{
        DLG_LINE
            {
		    prompt=STRING_mvs_settings_audio_menu_setrepeats;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetRepeats;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 1000;
				};
            },
		DLG_LINE
            {	
            prompt=STRING_mvs_audiosetting_dialog_delay;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetTrailingSilence;
			control= NUMBER_EDITOR
				{
				min = 1;
				max = 10;
				};
			trailer="sec";
            },
        DLG_LINE
            {
            type=EEikCtCheckBox;
            prompt=STRING_r_audiosetting_dialog_playonopen;
            id=EMVSCmdAudioSetting;
            },      
        DLG_LINE
            {	
            prompt=STRING_mvs_settings_audio_menu_setaudiopriority;
            type=EEikCtChoiceList;
			id=EMVSCmdSetAudioPriority;
			control= CHOICELIST
				{
				array_id = r_newmvs_dialog_setaudiopriority_choicelist;
				};
            },
		DLG_LINE
            {	
            prompt= STRING_mvs_settings_audio_menu_setaudioprioritypreference;
            type=EEikCtChoiceList;
			id=EMVSCmdSetAudioPriorityPreference;
			control= CHOICELIST
				{
				array_id = r_newmvs_dialog_setprioritypreference_choicelist;
				};
            },
        DLG_LINE
            {
            type=EEikCtCheckBox;
            prompt=STRING_r_audiosetting_dialog_autopauseresume;
            id=EMVSAutoPauseResume;
            },
        DLG_LINE
            {	
            type=EEikCtNumberEditor;
            prompt=STRING_r_audiosetting_dialog_maxfilesize;
			id=EMVSCmdSetMaxFileSizeNum;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 2147483647;
				};
            }
       	};
	}

RESOURCE ARRAY r_newmvs_dialog_setaudiopriority_choicelist
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_setaudiopriority_min; },
          LBUF { txt= STRING_r_mvs_dialog_setaudiopriority_normal; },
          LBUF { txt= STRING_r_mvs_dialog_setaudiopriority_max; }
          };    

      }

RESOURCE ARRAY r_newmvs_dialog_setprioritypreference_choicelist
      {
      items=
          {
          LBUF { txt= STRING_r_mvs_dialog_setprioritypreference_None; },
          LBUF { txt= STRING_r_mvs_dialog_setprioritypreference_time; },
          LBUF { txt= STRING_r_mvs_dialog_setprioritypreference_quality; },
          LBUF { txt= STRING_r_mvs_dialog_setprioritypreference_both; }
          };    

      }



//
//
//SETPLAYWINDOW

RESOURCE DIALOG r_mvs_dialog_setplaywindow
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_setplaywindow ;
	buttons = r_mvs_buttons_update_cancel;
    items=
		{
	    DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setplaywindow_start;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetPlayWindowStart;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 2147483647;
				};
			trailer="ms";
		    },
		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_setplaywindow_end;
            type=EEikCtNumberEditor;
			id=EMVSCmdSetPlayWindowEnd;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 2147483647;//This will be updated when seeded
				};
			trailer="ms";
            }
		};
	}

//
//CROP DIALOG
// This dialog is used to crop the audio clip.
//	
RESOURCE DIALOG r_mvs_dialog_crop
	{
    flags=EEikDialogFlagWait;
	title=STRING_r_mvs_dialog_crop_crop;
	buttons = r_mvs_buttons_crop_cancel;
    items=
		{
		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_crop_leftright;
            type=EEikCtHorOptionButList;
			id=EMVSCmdCropLeftRight;
			control= HOROPBUT
				{
				array_id=r_mvs_crop_left_right_array;
				};
            },
		DLG_LINE
            {	
            prompt=STRING_r_mvs_dialog_crop_position;
            type=EEikCtNumberEditor;
			id=EMVSCmdCropPositionNumber;
			control= NUMBER_EDITOR
				{
				min = 0;
				max = 9999999;//This will be updated when seeded
				};
			trailer="sec";
            }
		};
	}

RESOURCE ARRAY r_mvs_crop_left_right_array
    {
    items=
        {
        OPBUT { id = EMVSHorOptButtonCropFromBeginning;
				text=STRING_r_mvs_crop_left_right_array_left; },
        OPBUT { id = EMVSHorOptButtonCropFromEnd;
				text=STRING_r_mvs_crop_left_right_array_right; }
        };
    }


RESOURCE PROGRESSINFO r_clip_progressinfo
	{
	text_type=0;
	splits_in_block=50;
	finalval=200;
	width=0;
	height=0;
	}
	
//
//
//
//Crop button
//
//
RESOURCE DLG_BUTTONS r_mvs_buttons_crop_cancel
	{
	buttons=
		{
		DLG_BUTTON
			{
			id = EMVSButtonCancel;
			button = CMBUT {txt = STRING_r_mvs_buttons_cancel;};
			hotkey = EEikBidCancel;
			},
		DLG_BUTTON
			{
			id = EMVSButtonUpdate;
			button = CMBUT {txt = STRING_r_mvs_buttons_crop;};
			hotkey = EEikBidOk;
			}
		};
	}

//
//View Related//
//
RESOURCE TBUF r_idle			{ buf =  STRING_KIdle;			}
RESOURCE TBUF r_playing			{ buf =  STRING_KPlaying;		}
RESOURCE TBUF r_ready			{ buf =  STRING_KReady;			}
RESOURCE TBUF r_paused			{ buf =  STRING_KPaused;		}
RESOURCE TBUF r_recording		{ buf =  STRING_KRecording;		}
RESOURCE TBUF r_nofile          { buf =  STRING_KNoFile;	    } 
RESOURCE TBUF r_open            { buf =  STRING_KOpen;			}
RESOURCE TBUF r_zerotime        { buf =  STRING_KZeroTime;  	}

RESOURCE TBUF r_dollardollar	{ buf =  STRING_KDollarDollar;	}
RESOURCE TBUF r_percent			{ buf =  STRING_KPercent;		}
RESOURCE TBUF r_volume			{ buf =  STRING_KVolume;		}
RESOURCE TBUF r_volumeramp		{ buf =  STRING_KVolumeRamp;	}
RESOURCE TBUF r_balance			{ buf =  STRING_KBalance;		}
RESOURCE TBUF r_cropstart		{ buf =  STRING_KCropStart;		}
RESOURCE TBUF r_cropend			{ buf =  STRING_KCropEnd;		}
RESOURCE TBUF r_norepeats		{ buf =  STRING_KNoRepeats;		}
RESOURCE TBUF r_repeatdelay		{ buf =  STRING_KRepeatDelay;	}
RESOURCE TBUF r_audiopriority	{ buf =  STRING_KAudioPriority;	}
RESOURCE TBUF r_gain			{ buf =  STRING_KGain;			}
RESOURCE TBUF r_tabspace		{ buf =  STRING_KTabSpace;		}
RESOURCE TBUF r_ms				{ buf =  STRING_Kms;			}
RESOURCE TBUF r_cliplength		{ buf =  STRING_KClipLength;	}
RESOURCE TBUF r_left			{ buf =  STRING_KLeftOpen;		}
RESOURCE TBUF r_right			{ buf =  STRING_KRightOpen;		}
RESOURCE TBUF r_close			{ buf =  STRING_KClose;			}
RESOURCE TBUF r_nocrop			{ buf =  STRING_KNoCrop;		}
RESOURCE TBUF r_welcome			{ buf =  STRING_KWelcome;		}
RESOURCE TBUF r_center			{ buf =  STRING_KCenter;		}
RESOURCE TBUF r_ramp			{ buf =  STRING_KRamp;			}
RESOURCE TBUF r_format			{ buf =  STRING_KFormat;		}
RESOURCE TBUF r_bitrate 		{ buf =  STRING_KBitRate;   	}
RESOURCE TBUF r_samplerate 		{ buf =  STRING_KSampleRate;   	}
RESOURCE TBUF r_channels 		{ buf =  STRING_KChannels;   	}
RESOURCE TBUF r_audioenabled    { buf =  STRING_KAudioEnabled;  }
RESOURCE TBUF r_audionotenabled { buf =  STRING_KAudioNotEnabled;  }

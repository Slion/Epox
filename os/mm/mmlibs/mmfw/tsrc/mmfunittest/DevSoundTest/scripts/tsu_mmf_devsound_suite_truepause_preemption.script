// Copyright (c) 2010 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//


PRINT 
PRINT 
PRINT IMPORTANT NOTE: THIS SCRIPT SHOULD ONLY BE RUN IN A3F. SCRIPT CREATED AS PART OF CR1566.
PRINT
PRINT 


LOAD_SUITE TSU_MMF_DEVSOUND_SUITE.dll

delay 1000

//! @SYMTestCaseID			MM-MMF-DEVSOUND-U-0082-HP
//! @SYMREQ				REQ11453
//!					REQ11455
//! @SYMPREQ				1540
//! @SYMTestCaseDec			Resume Audio Playback Rejection - Rejection scenario is between 2 instances that play audio
//! @SYMTestPriority			Normal
//! @SYMTestType			Normal Usecase
//! @SYMTestActions			1. Create a DevSound instance.
//!					2. Open files to be played by DevSound instances.
//!					3. Create a CPeriodic instance.
//!					4. Create a second DevSound instance to play audio using low priority settings.
//!					5. Initialise the first devsound instance to play audio and set its priority using a high value.
//!					5.1 Wait for InitializeComplete(KErrNone) callback response.
//!					6. Call PlayInitL() method for first DevSound instance and star timer events each 2 seconds.
//!					7. Wait for BufferToBeFilled(..) callback of first DevSound instance to fill the buffer with data.
//!					To continue receiving BTBF callbacks, is mandatory to call PlayData() method.
//!					8. On timer event call Pause() method.
//!					9. Wait for another timer event set the second devsound's priority to the lowest value, call IsResumeSupported() then Resume().
//! @SYMTestExpectedResults		Second DevSound instance PlayError() callback shall return aError = KErrInUse, KErrDied or KErrAccessDenied
//!					First DevSound IsResumeSupported() will return ETrue.
//!					First DevSound Resume()(will return KErrNone) is supported for PCM.
//!
PRINT Resume Audio Playback Rejection - Rejection scenario is between 2 instances that play audio
RUN_TEST_STEP 60000, TSU_MMF_DEVSOUND_SUITE, MM-MMF-DEVSOUND-U-0082-HP, c:\tsu_mmf_truepause_devsound.ini
TEST_COMPLETE

//! @SYMTestCaseID			MM-MMF-DEVSOUND-U-0083-HP
//! @SYMREQ				REQ11453
//!					REQ11455
//! @SYMPREQ				1540
//! @SYMTestCaseDec			Resume Audio Playback Pre-emption - Pre-emption scenario is between 2 instances that play audio
//! @SYMTestPriority			Normal
//! @SYMTestType			Normal Usecase
//! @SYMTestActions			1. Create a DevSound instance.
//!					2. Open files to be played by DevSound instances.
//!					3. Create a CPeriodic instance.
//!					4. Create a second DevSound instance to play audio using high priority settings.
//!					5. Initialise the first devsound instance to play audio and set its priority using a low value.					
//!					6. Call PlayInitL() method for first DevSound instance and star timer events each 2 seconds.
//!					7. Wait for BufferToBeFilled(..) callback of first DevSound instance to fill the buffer with data.
//!					To continue receiving BTBF callbacks, is mandatory to call PlayData() method.
//!					8. On timer event call Pause() method.
//!					9. Wait for another timer event set the second devsound's priority to the highest value, call IsResumeSupported() then Resume().
//! @SYMTestExpectedResults		First DevSound instance PlayError() callback shall return aError = KErrInUse, KErrDied or KErrAccessDenied.
//!					First DevSound IsResumeSupported() will return ETrue.
//!					First DevSound Resume must return with KErrNotReady.
//!
PRINT Resume Audio Playback Pre-emption - Pre-emption scenario is between 2 instances that play audio
RUN_TEST_STEP 60000, TSU_MMF_DEVSOUND_SUITE, MM-MMF-DEVSOUND-U-0083-HP, c:\tsu_mmf_truepause_devsound.ini
TEST_COMPLETE
//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description: 
//
//! @file
//! @SYMTestSuiteName		PBASE-F32-DUAL-DRIVE-Publicapi-RAM.script
//! @SYMScriptTestEnvironment	This test script requires a base ROM.
/////////////////////////////////////////////////////////////////////////////////////////////////////
//The device has to support Dual drive feature for single interface. The drive info has to be changed
//in dual_drive_env.ini before running the tests on the device which supports DUAL Drive with same interface.
//Example two MMC drives or two NAND drives etc.
/////////////////////////////////////////////////////////////////////////////////////////////////////
LOAD_SUITE	T_Sfsrv

START_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0001
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0001
//! @SYMAPI			    RFs::MkDirAll();TEntry::IsDir();RFs::RmDir()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Try creating directory on both the drives and also check whether it has been created or not.
//!                         And finally remove the directory created.
//!                         
//! @SYMTestActions		1. Create RFs instance.
//!				        2. Call RFs::MkDirAll() to create the directories.
//!                     3. Check the directory created using TEntry()
//!                     4. Remove the directory created.
//!                     5. Perform the above operation on both the drives concurrently
//!				
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	  Creates the directories on to both the drives concurrently.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs	        rfs1
        CREATE_OBJECT	TEntry		tEntry1	
		COMMAND		rfs1	    new
		COMMAND		rfs1	    Connect
		COMMAND		rfs1	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll_drive1
        COMMAND		rfs1	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll2_drive1
        COMMAND		rfs1	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll3_drive1
        COMMAND		rfs1	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll4_drive1
        COMMAND		tEntry1		new
        COMMAND		rfs1		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry_drive1
        COMMAND		tEntry1		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive1
        COMMAND		rfs1		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry2_drive1
        COMMAND		tEntry1		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive1
        COMMAND		rfs1		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry3_drive1
        COMMAND		tEntry1		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive1
        COMMAND		rfs1		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry4_drive1
        COMMAND		tEntry1		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive1
        COMMAND		tEntry1		~
        COMMAND		rfs1	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir_drive1
        COMMAND		rfs1	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir2_drive1
        COMMAND		rfs1	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir3_drive1
        COMMAND		rfs1	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir4_drive1
		COMMAND		rfs1	    Close
        COMMAND		rfs1	    ~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs	        rfs2
        CREATE_OBJECT	TEntry		tEntry2	
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		rfs2	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll_drive2
        COMMAND		rfs2	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll2_drive2
        COMMAND		rfs2	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll3_drive2
        COMMAND		rfs2	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll4_drive2
        COMMAND		tEntry2		new
        COMMAND		rfs2		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry_drive2
        COMMAND		tEntry2		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive2
        COMMAND		rfs2		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry2_drive2
        COMMAND		tEntry2		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive2
        COMMAND		rfs2		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry3_drive2
        COMMAND		tEntry2		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive2
        COMMAND		rfs2		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry4_drive2
        COMMAND		tEntry2		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive2
        COMMAND		tEntry2		~
        COMMAND		rfs2	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir_drive2
        COMMAND		rfs2	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir2_drive2
        COMMAND		rfs2	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir3_drive2
        COMMAND		rfs2	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir4_drive2
		COMMAND		rfs2	    Close
        COMMAND		rfs2	    ~
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0001


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0002
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0002
//! @SYMAPI			CFileMan::Attribs();CFileMan::Copy();Rfs::Att()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Copy files on to both the drives from system drive concurrenlty
//!				
//! @SYMTestActions		1. Call Copy() to copy files on to the mmc drives.	
//!				2. Set and Get the attribute of the file.
//!             3. Delete the file copied on to the drive.
//!             4. Perform above operation on both the  drive concurrently.
//!				
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	copying files on to both drives concurrently works successfully.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv	    \base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
        CREATE_OBJECT	RFs	        rfs1
		CREATE_OBJECT	RFile	    file1
        CREATE_OBJECT	CFileMan	fileMan1
		COMMAND		rfs1	    new
		COMMAND		rfs1	    Connect
		COMMAND		file1	    new
		COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0005_Open_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0005_NewL_drive1
        COMMAND		fileMan1    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0005_Copy_drive1
        COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0005_Open2_drive1
        COMMAND		fileMan1    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0005_Copy2_drive1
        COMMAND		rfs1        Att		    PBASE-F32-DualDrive-Publicapi-RAM-0005_Att1_drive1
        COMMAND     fileMan1    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0005_Attribs1_drive1
        COMMAND		rfs1        Att		    PBASE-F32-DualDrive-Publicapi-RAM-0005_Att2_drive1
        COMMAND     fileMan1    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0005_Attribs2_drive1
        COMMAND		rfs1        Att		    PBASE-F32-DualDrive-Publicapi-RAM-0005_Att1_drive1
        COMMAND     rfs1        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0005_Delete_drive1
        COMMAND     rfs1        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0005_Delete2_drive1
		COMMAND		fileMan1    ~
		COMMAND		file1	    Close
		COMMAND		file1	    ~
		COMMAND		rfs1	    Close
		COMMAND		rfs1	    ~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs     rfs2
		CREATE_OBJECT	RFile	file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0005_Open_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0005_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0005_Copy_drive2
        COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0005_Open2_drive2
        COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0005_Copy2_drive2
        COMMAND		rfs2        Att		    PBASE-F32-DualDrive-Publicapi-RAM-0005_Att1_drive2
        COMMAND     fileMan2    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0005_Attribs1_drive2
        COMMAND		rfs2        Att		    PBASE-F32-DualDrive-Publicapi-RAM-0005_Att2_drive2
        COMMAND     fileMan2    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0005_Attribs2_drive2
        COMMAND		rfs2        Att		    PBASE-F32-DualDrive-Publicapi-RAM-0005_Att1_drive2
        COMMAND     rfs2        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0005_Delete_drive2
        COMMAND     rfs2        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0005_Delete2_drive2
		COMMAND		fileMan2    ~
		COMMAND		file2	    Close
		COMMAND		file2	    ~
		COMMAND		rfs2	    Close
		COMMAND		rfs2	    ~
END_TEST_BLOCK	
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0002

START_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0003
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0003
//! @SYMAPI			RFile::Replace();RFile::Read();RFile::Write()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc	create a file on to the both the drive, write and read the content of file and delete the file after the operation.
//!				Uses API elements: Open().
//! @SYMTestActions		1. Create RFs session
//!				2. Open the files 
//!             3. Write the contents on to the file.
//!				4. Close files.
//!				5. Open file the files.
//!				6. Read the content of the filess.
//!				7. Close file.
//!				8. Delete files.
//!				9. Perform the above operation on both the drives concurrently
//!
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	 Can perform both read and write opearation on both the drives concurrently
//!
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs	        rfs1
		CREATE_OBJECT	RFile	    file1
        CREATE_OBJECT	CFileMan	fileMan1
		COMMAND		rfs1	    new		
		COMMAND		rfs1	    Connect		
		COMMAND		file1	    new	
        COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open1_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0008_NewL_drive1
		COMMAND		fileMan1    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0008_Copy_drive1
        COMMAND		file1	    Close        
		COMMAND		file1	    Replace		PBASE-F32-DualDrive-Publicapi-RAM-0008_Replace_drive1
		COMMAND		file1	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0008_Write_drive1
		COMMAND		file1	    Close		
		COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open_drive1
		COMMAND		file1	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0008_Read_drive1
		COMMAND		file1	    Close		
		COMMAND		file1	    ~		
		COMMAND		rfs1	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0008_Delete_drive1
		COMMAND		rfs1	    ~		
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	        rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open1_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0008_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0008_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Replace		PBASE-F32-DualDrive-Publicapi-RAM-0008_Replace_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0008_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0008_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0008_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE 		PBASE-F32-DualDrive-Publicapi-RAM-0003



START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0004
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0004
//! @SYMAPI			CFileMan::Rename()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Rename the files on the mmc drives.
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename() to rename the file in one drive with different name.
//!				4.Call CFileMan::Rename() to rename the file in second drive with different name.
//!				5.Delete the renamed file.
//!             6.Close the Rfs session.
//!             7.Perform the above operation on both the drives concurrently
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Files get renamed on both the drives.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs1
		CREATE_OBJECT	RFile			file1
		CREATE_OBJECT	CFileMan	    fileMan1
		COMMAND		rfs1		new		
		COMMAND		rfs1		Connect
		COMMAND		file1		new
        COMMAND		file1	    Open		    PBASE-F32-DualDrive-Publicapi-RAM-0009_Open_drive1
		COMMAND		fileMan1	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0009_NewL_drive1
		COMMAND		fileMan1    Copy		    PBASE-F32-DualDrive-Publicapi-RAM-0009_Copy_drive1
		COMMAND		fileMan1	Rename		    PBASE-F32-DualDrive-Publicapi-RAM-0009_Rename_drive1
		COMMAND		file1		Open			PBASE-F32-DualDrive-Publicapi-RAM-0009_Open_drive1
		COMMAND		file1		Close
		COMMAND		fileMan1	~
		COMMAND		file1		~
		COMMAND		rfs1		~		
END_TEST_BLOCK	
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs2
		CREATE_OBJECT	RFile			file2
		CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2		new		
		COMMAND		rfs2		Connect
		COMMAND		file2		new
        COMMAND		file2	    Open		    PBASE-F32-DualDrive-Publicapi-RAM-0009_Open_drive2
		COMMAND		fileMan2	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0009_NewL_drive2
		COMMAND		fileMan2    Copy		    PBASE-F32-DualDrive-Publicapi-RAM-0009_Copy_drive2
		COMMAND		fileMan2	Rename		    PBASE-F32-DualDrive-Publicapi-RAM-0009_Rename_drive2
		COMMAND		file2		Open			PBASE-F32-DualDrive-Publicapi-RAM-0009_Open_drive2
		COMMAND		file2		Close
		COMMAND		fileMan2	~
		COMMAND		file2		~
		COMMAND		rfs2		~		
END_TEST_BLOCK	
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0004


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0005
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0005
//! @SYMAPI			    CFileMan:Move()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Move the files between the two drives
//!											
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move()  to move the file from drive1 to drive2.
//!				4.Call CFileMan::Move(), to move the file from drive2 to drive2.
//!             5.Delete the moved files.
//!             6 Delete the directory in which the file is moved.
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Files are moved across the drives..
//! @SYMTestType		CIT
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs1
		CREATE_OBJECT	RFile			file1
		CREATE_OBJECT	CFileMan	    fileMan1
		COMMAND		rfs1		new
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDir			PBASE-F32-DualDrive-Publicapi-RAM-0010_MkDir_drive1
        COMMAND		rfs1		MkDir			PBASE-F32-DualDrive-Publicapi-RAM-0010_MkDir_drive2
		COMMAND		file1		new
		COMMAND		fileMan1	NewL		    PBASE-F32-DualDrive-Publicapi-RAM-0010_NewL_drive1
		COMMAND		fileMan1	Move		    PBASE-F32-DualDrive-Publicapi-RAM-0010_Move_drive1
		COMMAND		file1		Open		    PBASE-F32-DualDrive-Publicapi-RAM-0010_Open_drive1
		COMMAND		file1		Close
		COMMAND		fileMan1	Move		    PBASE-F32-DualDrive-Publicapi-RAM-0010_Move_drive2
		COMMAND		file1		Open		    PBASE-F32-DualDrive-Publicapi-RAM-0010_Open_drive2
		COMMAND		file1		Close
        COMMAND     fileMan1    Attribs         PBASE-F32-DualDrive-Publicapi-RAM-0010_Attribs_drive1
        COMMAND     fileMan1    Attribs         PBASE-F32-DualDrive-Publicapi-RAM-0010_Attribs_drive2
        COMMAND		rfs1		Delete		    PBASE-F32-DualDrive-Publicapi-RAM-0010_Delete_drive1
        COMMAND		rfs1		Delete		    PBASE-F32-DualDrive-Publicapi-RAM-0010_Delete_drive2
		COMMAND		rfs1		RmDir		    PBASE-F32-DualDrive-Publicapi-RAM-0010_RmDir_drive1
        COMMAND		rfs1		RmDir		    PBASE-F32-DualDrive-Publicapi-RAM-0010_RmDir_drive2
		COMMAND		fileMan1	~
		COMMAND		file1		~
		COMMAND		rfs1		~		
END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0005

START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0006
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0006
//! @SYMAPI			    CFileMan:Move()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		02/07/2008 
//! @SYMTestCaseDesc		Move the files from system drive to dual drive and back in to systemdrive CONCURRENTly.
//!											
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move()  to move the file from system drive to the one of the dual drive drive.
//!				4.Call CFileMan::Move(), to move the file from dual drive to the systemdrive .
//!             5.Delete the directory in which the file is moved.
//!             6.Perform the above operation concurrently on both the dual drives
//!             
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Files are moved from systemdrive to dual drives concurrantly.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs1
		CREATE_OBJECT	RFile			file1
		CREATE_OBJECT	CFileMan	    fileMan1
		COMMAND		rfs1		new
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDir			PBASE-F32-DualDrive-Publicapi-RAM-0011_MkDir_drive1
        COMMAND		file1		new
		COMMAND		fileMan1	NewL		    PBASE-F32-DualDrive-Publicapi-RAM-0011_NewL_drive1
		COMMAND		fileMan1	Move		    PBASE-F32-DualDrive-Publicapi-RAM-0011_Move_drive1
		COMMAND     fileMan1    Move            PBASE-F32-DualDrive-Publicapi-RAM-0011_Move2_drive1
        COMMAND		file1		Open		    PBASE-F32-DualDrive-Publicapi-RAM-0011_Open2_drive1
        COMMAND		rfs1		RmDir		    PBASE-F32-DualDrive-Publicapi-RAM-0011_RmDir_drive1
        COMMAND		file1		Close
        COMMAND		fileMan1	~
		COMMAND		file1		~
		COMMAND		rfs1		~		
END_TEST_BLOCK	
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs2
		CREATE_OBJECT	RFile			file2
		CREATE_OBJECT	CFileMan	    fileMan2
		COMMAND		rfs2		new
		COMMAND		rfs2		Connect
		COMMAND		rfs2		MkDir			PBASE-F32-DualDrive-Publicapi-RAM-0011_MkDir_drive2
        COMMAND		file2		new
		COMMAND		fileMan2	NewL		    PBASE-F32-DualDrive-Publicapi-RAM-0011_NewL_drive2
		COMMAND		fileMan2	Move		    PBASE-F32-DualDrive-Publicapi-RAM-0011_Move_drive2
		COMMAND     fileMan2    Move            PBASE-F32-DualDrive-Publicapi-RAM-0011_Move2_drive2
        COMMAND		file2		Open		    PBASE-F32-DualDrive-Publicapi-RAM-0011_Open2_drive2
        COMMAND		rfs2		RmDir		    PBASE-F32-DualDrive-Publicapi-RAM-0011_RmDir_drive2
        COMMAND		file2		Close
        COMMAND		fileMan2	~
		COMMAND		file2		~
		COMMAND		rfs2		~		
END_TEST_BLOCK	
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0006

START_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0007
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0007
//! @SYMAPI			    RFs::Volume();RFs::SetVolumeLabel()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		02/07/2008 
//! @SYMTestCaseDesc		Get the Volume information for drives concurrently
//! @SYMTestActions		1. Call Connect().
//!				2. Saving volume label.
//!				3. Call SetVolumeLabel() passing "Test" as first parameter and the drive number as a second parameter.
//!				4. Call Volume() passing  TVolumeInfo reference as first parameter and the drive number as a second parameter.
//!				5. Restoring volume label.
//!				6. Perform above operation concurrantly on both the drives.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults Set and get the volume information of both the drives concurrently.
//! @SYMTestType		CIT

CONCURRENT
	START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs	rfs1
		COMMAND		rfs1	new		
		COMMAND		rfs1	Connect		
		COMMAND		rfs1	Volume		        PBASE-F32-DualDrive-Publicapi-RAM-0012_Volume_drive1
		COMMAND		rfs1	SetVolumeLabel		PBASE-F32-DualDrive-Publicapi-RAM-0012_SetVolumeLabel_drive1
		COMMAND		rfs1	Volume		        PBASE-F32-DualDrive-Publicapi-RAM-0012_Volume_drive1
		COMMAND		rfs1	SetVolumeLabel		PBASE-F32-DualDrive-Publicapi-RAM-0012_SetVolumeLabel_drive1
		COMMAND		rfs1	Close		
		COMMAND		rfs1	~		
	END_TEST_BLOCK
    START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs	rfs2
		COMMAND		rfs2	new		
		COMMAND		rfs2	Connect		
		COMMAND		rfs2	Volume		        PBASE-F32-DualDrive-Publicapi-RAM-0012_Volume_drive2
		COMMAND		rfs2	SetVolumeLabel		PBASE-F32-DualDrive-Publicapi-RAM-0012_SetVolumeLabel_drive2
		COMMAND		rfs2	Volume		        PBASE-F32-DualDrive-Publicapi-RAM-0012_Volume_drive2
		COMMAND		rfs2	SetVolumeLabel		PBASE-F32-DualDrive-Publicapi-RAM-0012_SetVolumeLabel_drive2
		COMMAND		rfs2	Close		
		COMMAND		rfs2	~		
	END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0007

START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0008
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0008
//! @SYMAPI			    CFileMan:Move();RFile::Read();RFile::Write()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		02/07/2008 
//! @SYMTestCaseDesc		Move the file from system drive to one of the dual drive concurrenlty with the read/write operation on another dual drive
//!											
//! @SYMTestActions		1.Move the file from systemdrive to dual drive and back from dual drive to system drive.
//!				2.Write and read the content of the file from other drive in concurrent with above action on another drive
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	File is moved in concurrent with read/write operation on another drive.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs1
		CREATE_OBJECT	RFile			file1
		CREATE_OBJECT	CFileMan	    fileMan1
		COMMAND		rfs1		new
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDir			PBASE-F32-DualDrive-Publicapi-RAM-0011_MkDir_drive1
        COMMAND		file1		new
		COMMAND		fileMan1	NewL		    PBASE-F32-DualDrive-Publicapi-RAM-0011_NewL_drive1
		COMMAND		fileMan1	Move		    PBASE-F32-DualDrive-Publicapi-RAM-0011_Move_drive1
		COMMAND     fileMan1    Move            PBASE-F32-DualDrive-Publicapi-RAM-0011_Move2_drive1
        COMMAND		file1		Open		    PBASE-F32-DualDrive-Publicapi-RAM-0011_Open2_drive1
        COMMAND		rfs1		RmDir		    PBASE-F32-DualDrive-Publicapi-RAM-0011_RmDir_drive1
        COMMAND		file1		Close
        COMMAND		fileMan1	~
		COMMAND		file1		~
		COMMAND		rfs1		~		
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open1_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0008_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0008_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Replace		PBASE-F32-DualDrive-Publicapi-RAM-0008_Replace_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0008_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0008_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0008_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0008

START_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0009
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0009
//! @SYMAPI			    RFs::MkDirAll();TEntry::IsDir();RFs::RmDir()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Try creating directory and removing directory with read and write operation concurrantly on dual drives.
//!                         
//! @SYMTestActions		1. Create RFs instance.
//!				        2. Call RFs::MkDirAll() to create the directories.
//!                     3. Check the directory created using TEntry()
//!                     4. Remove the directory.
//!                     5. Perform Read/Write operation on a file on different drive in concurrent with the above operation
//!				
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	  Creates the directories on to both the drives in concurrent with the read/write operation on the other drive.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs	        rfs1
        CREATE_OBJECT	TEntry		tEntry1	
		COMMAND		rfs1	    new
		COMMAND		rfs1	    Connect
		COMMAND		rfs1	    MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0002_MkdirAll_drive1
        COMMAND		tEntry1		new
        COMMAND		rfs1		Entry       PBASE-F32-DualDrive-Publicapi-RAM-0002_Entry_drive1
        COMMAND		tEntry1		IsDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_IsDir_drive1
        COMMAND		tEntry1		~
        COMMAND		rfs1	    RmDir       PBASE-F32-DualDrive-Publicapi-RAM-0002_RmDir_drive1
		COMMAND		rfs1	    Close
        COMMAND		rfs1	    ~
	END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open1_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0008_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0008_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Replace		PBASE-F32-DualDrive-Publicapi-RAM-0008_Replace_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0008_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0008_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0008_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE 			PBASE-F32-DualDrive-Publicapi-RAM-0009


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0010
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0010
//! @SYMAPI			CDirScan::SetScanDataL();CDirScan::NextL()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		02/07/2008 
//! @SYMTestCaseDesc		Testcase to get the filtered list of filess from  both the drives CONCURRENTly

//! @SYMTestActions		1.Call Create a RFs session and call it's Connect() function.
//!				2.Call RFs::MkDirAll() and <Drive>\dirscan\TempDir\ as parameter
//!				3.Call CDirScan::NewL() and connected file server session as parameter.
//!				4.Call CDirScan::SetScanDataL() and <Drive>\dirscan\ as first parameter, KEntryAttNormal as second
//!				  parameter, ESortByName as third parameter and EScanDownTree as fourth parameter
//!				5.Call CDirScan::NextL() and CDir object as parameter.
//!				6.Call CDirScan::FullPath() to verify the expected directory path.
//!				7.Call CDir::Count() to verify the number of entries returned.
//!				8.Call CDir::operator[] to verify the entries returned.
//!				9.Call RFs::RmDir() and <Drive>\dirscan\TempDir\ as parameter
//!             10. Perform above operation on other drive concurrently
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Filters the file set with KEntryAttNormal as attribute mask on both the drives
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv		\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs		rfs1
		CREATE_OBJECT	CFileMan	fileMan1
        CREATE_OBJECT	TEntry		tEntry1
		CREATE_OBJECT	CDirScan	cdirScan1
		CREATE_OBJECT	CDir		cdir1
		COMMAND		rfs1		new			
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0015_NewL_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy1_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy2_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy3_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy4_drive1
		COMMAND		rfs1		MkDirAll			PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll2_drive1
		COMMAND		tEntry1		new
		COMMAND		cdirScan1	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0015_CDirScan_NewL_drive1
		COMMAND		cdirScan1	SetScanDataL		PBASE-F32-DualDrive-Publicapi-RAM-0015_SetScanDataL_drive1
		COMMAND		cdirScan1	NextL			PBASE-F32-DualDrive-Publicapi-RAM-0015_NextL_drive1
		COMMAND		cdirScan1	FullPath		PBASE-F32-DualDrive-Publicapi-RAM-0015_FullPath_drive1
		COMMAND		cdir1		Count			PBASE-F32-DualDrive-Publicapi-RAM-0015_Count_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index1_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index2_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index3_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index4_drive1
		COMMAND		cdir1		~
		COMMAND		cdirScan1	~
		COMMAND		rfs1		RmDir			PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir1_drive1
		COMMAND		tEntry1		~
		COMMAND		fileMan1	Delete		PBASE-F32-DualDrive-Publicapi-RAM-0015_Delete_drive1
		COMMAND		rfs1		RmDir			PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir2_drive1
		COMMAND		fileMan1	~
		COMMAND		rfs1		~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv		\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs		rfs2
		CREATE_OBJECT	CFileMan	fileMan2
        CREATE_OBJECT	TEntry		tEntry2
		CREATE_OBJECT	CDirScan	cdirScan2
		CREATE_OBJECT	CDir		cdir2
		COMMAND		rfs2		new			
		COMMAND		rfs2		Connect
		COMMAND		rfs2		MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0015_NewL_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy1_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy2_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy3_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy4_drive2
		COMMAND		rfs2		MkDirAll			PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll2_drive2
		COMMAND		tEntry2		new
		COMMAND		cdirScan2	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0015_CDirScan_NewL_drive2
		COMMAND		cdirScan2	SetScanDataL		PBASE-F32-DualDrive-Publicapi-RAM-0015_SetScanDataL_drive2
		COMMAND		cdirScan2	NextL			PBASE-F32-DualDrive-Publicapi-RAM-0015_NextL_drive2
		COMMAND		cdirScan2	FullPath		PBASE-F32-DualDrive-Publicapi-RAM-0015_FullPath_drive2
		COMMAND		cdir2		Count			PBASE-F32-DualDrive-Publicapi-RAM-0015_Count_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index1_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index2_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index3_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index4_drive2
		COMMAND		cdir2		~
		COMMAND		cdirScan2	~
		COMMAND		rfs2		RmDir			PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir1_drive2
		COMMAND		tEntry2		~
		COMMAND		fileMan2	Delete		PBASE-F32-DualDrive-Publicapi-RAM-0015_Delete_drive2
	    COMMAND		rfs2		RmDir		PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir2_drive2
		COMMAND		fileMan2	~
		COMMAND		rfs2		~
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0010


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0011
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0011
//! @SYMAPI			    CDirScan::SetScanDataL();RFile::Read();RFile::Write()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		02/07/2008 
//! @SYMTestCaseDesc		Testcase to get the filtered list of files in concurrant with read/write operation
//! @SYMTestActions		1. Filter the files with attribute normal.
//!                     2. Perform write/ read operation in concurrant.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority	High
//! @SYMTestExpectedResults	Filters the file set with KEntryAttNormal as attribute mask in concurrant with read/write operation on another drive
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv		\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs		rfs1
		CREATE_OBJECT	CFileMan	fileMan1
        CREATE_OBJECT	TEntry		tEntry1
		CREATE_OBJECT	CDirScan	cdirScan1
		CREATE_OBJECT	CDir		cdir1
		COMMAND		rfs1		new			
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDirAll		PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0015_NewL_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy1_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy2_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy3_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy4_drive1
		COMMAND		rfs1		MkDirAll			PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll2_drive1
		COMMAND		tEntry1		new
		COMMAND		cdirScan1	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0015_CDirScan_NewL_drive1
		COMMAND		cdirScan1	SetScanDataL		PBASE-F32-DualDrive-Publicapi-RAM-0015_SetScanDataL_drive1
		COMMAND		cdirScan1	NextL			PBASE-F32-DualDrive-Publicapi-RAM-0015_NextL_drive1
		COMMAND		cdirScan1	FullPath		PBASE-F32-DualDrive-Publicapi-RAM-0015_FullPath_drive1
		COMMAND		cdir1		Count			PBASE-F32-DualDrive-Publicapi-RAM-0015_Count_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index1_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index2_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index3_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index4_drive1
		COMMAND		cdir1		~
		COMMAND		cdirScan1	~
		COMMAND		rfs1		RmDir			PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir1_drive1
		COMMAND		tEntry1		~
		COMMAND		fileMan1	Delete		PBASE-F32-DualDrive-Publicapi-RAM-0015_Delete_drive1
		COMMAND		fileMan1	RmDir		PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir2_drive1
		COMMAND		fileMan1	~
		COMMAND		rfs1		~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open1_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0008_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0008_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Replace		PBASE-F32-DualDrive-Publicapi-RAM-0008_Replace_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0008_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0008_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0008_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0011


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0012
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0012
//! @SYMAPI			CFileMan::Attribs();CFileMan::Copy();RFile::Read();RFile::Write()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Copy files on to the drive in concurrent with read/write operation on the other drive.
//!				
//! @SYMTestActions		1. Call Connect().
//!				2. Call Copy() to copy files on to the mmc drives.
//!             3. Perform read/write operation on the other drive concurrenlty
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Copying of file will be done concurranlty with the read/write operation
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv	    \base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
        CREATE_OBJECT	RFs	        rfs1
		CREATE_OBJECT	RFile	    file1
        CREATE_OBJECT	CFileMan	fileMan1
		COMMAND		rfs1	    new
		COMMAND		rfs1	    Connect
		COMMAND		file1	    new
		COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0005_Open_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0005_NewL_drive1
		COMMAND		fileMan1    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0005_Copy_drive1
        COMMAND     fileMan1    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0005_Attribs_drive1
        COMMAND     rfs1        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0005_Delete_drive1
		COMMAND		fileMan1    ~
		COMMAND		file1	    Close
		COMMAND		file1	    ~
		COMMAND		rfs1	    Close
		COMMAND		rfs1	    ~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open1_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0008_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0008_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Replace		PBASE-F32-DualDrive-Publicapi-RAM-0008_Replace_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0008_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0008_Open_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0008_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0008_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0012

START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0013
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0013
//! @SYMAPI			CFileMan::Attribs();CFileMan::Copy()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Copies large file on to the drive in cuncurrent with read/write operation on the large file on the other drive.
//!				
//! @SYMTestActions		
//!				1. Call Copy() to copy files on to the mmc drives.
//!             2. Perform read/write operation on the other drive concurrenlty
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Copying of file will be done concurranlty with the read/write operation
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv	    \base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
        CREATE_OBJECT	RFs	        rfs1
		CREATE_OBJECT	RFile	    file1
        CREATE_OBJECT	CFileMan	fileMan1
		COMMAND		rfs1	    new
		COMMAND		rfs1	    Connect
		COMMAND		file1	    new
		COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0020_Open_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0020_NewL_drive1
		COMMAND		fileMan1    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0020_Copy_drive1
        COMMAND     fileMan1    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0020_Attribs_drive1
        COMMAND     rfs1        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0020_Delete_drive1
		COMMAND		fileMan1    ~
		COMMAND		file1	    Close
		COMMAND		file1	    ~
		COMMAND		rfs1	    Close
		COMMAND		rfs1	    ~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0018_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0018_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open2_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0018_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open2_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0018_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0018_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0013


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0014
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0014
//! @SYMAPI			    CFileMan:Move();RFile::Read();RFile::Write()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		03/07/2008 
//! @SYMTestCaseDesc		Move the much large file in concurrant with the read/write operation on the file on another drive concurrenlty 
//!											
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move()  to move the file from system drive to one of the dual drive.
//!				4.Perform Read/write operation on the other drive
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	File moving and read/write operation on diff drives performed successfully
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	50	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs				rfs1
		CREATE_OBJECT	RFile			file1
		CREATE_OBJECT	CFileMan	    fileMan1
		COMMAND		rfs1		new
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDir			PBASE-F32-DualDrive-Publicapi-RAM-0021_MkDir_drive1
        COMMAND		file1		new
		COMMAND		fileMan1	NewL		    PBASE-F32-DualDrive-Publicapi-RAM-0021_NewL_drive1
		COMMAND		fileMan1	Move		    PBASE-F32-DualDrive-Publicapi-RAM-0021_Move_drive1
		COMMAND     fileMan1    Move            PBASE-F32-DualDrive-Publicapi-RAM-0021_Move2_drive1
        COMMAND		file1		Open		    PBASE-F32-DualDrive-Publicapi-RAM-0021_Open2_drive1
        COMMAND		rfs1		RmDir		    PBASE-F32-DualDrive-Publicapi-RAM-0021_RmDir_drive1
        COMMAND		file1		Close
        COMMAND		fileMan1	~
		COMMAND		file1		~
		COMMAND		rfs1		~		
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0018_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0018_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open2_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0018_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open2_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0018_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0018_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0014


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0015
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0015
//! @SYMAPI			CDirScan::SetScanDataL;CDirScan::NextL()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		02/07/2008 
//! @SYMTestCaseDesc		Testcase to get the filtered list of filess from  both the drives concurrently

//! @SYMTestActions		1.Call Create a RFs session and call it's Connect() function.
//!				2.Call RFs::MkDirAll() and <Drive>\dirscan\TempDir\ as parameter
//!				3.Call CDirScan::NewL() and connected file server session as parameter.
//!				4.Call CDirScan::SetScanDataL() and <Drive>\dirscan\ as first parameter, KEntryAttReadOnly as second
//!				  parameter, ESortByName as third parameter and EScanDownTree as fourth parameter
//!				5.Call CDirScan::NextL() and CDir object as parameter.
//!				6.Call CDirScan::FullPath() to verify the expected directory path.
//!				7.Call CDir::Count() to verify the number of entries returned.
//!				8.Call CDir::operator[] to verify the entries returned.
//!				9.Call RFs::RmDir() and <Drive>\dirscan\TempDir\ as parameter
//!             10. Perform above operation on both the drives concurrently
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Filters the file set with KEntryAttReadOnly as attribute mask on one drive and KEntryAttrNormal on other drives
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	100	T_Sfsrv		\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs		rfs1
		CREATE_OBJECT	CFileMan	fileMan1
        CREATE_OBJECT	TEntry		tEntry1
		CREATE_OBJECT	CDirScan	cdirScan1
		CREATE_OBJECT	CDir		cdir1
		COMMAND		rfs1		new			
		COMMAND		rfs1		Connect
		COMMAND		rfs1		MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0023_MkDirAll_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0023_NewL_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0023_Copy1_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0023_Copy2_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0023_Copy3_drive1
		COMMAND		fileMan1	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0023_Copy4_drive1
        COMMAND		rfs1        SetAtt      PBASE-F32-DualDrive-Publicapi-RAM-0023_SetAtt1_drive1
        COMMAND		rfs1        SetAtt      PBASE-F32-DualDrive-Publicapi-RAM-0023_SetAtt2_drive1
		COMMAND		tEntry1		new
		COMMAND		cdirScan1	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0023_CDirScan_NewL_drive1
		COMMAND		cdirScan1	SetScanDataL	PBASE-F32-DualDrive-Publicapi-RAM-0023_SetScanDataL_drive1
		COMMAND		cdirScan1	NextL			PBASE-F32-DualDrive-Publicapi-RAM-0023_NextL_drive1
		COMMAND		cdirScan1	FullPath		PBASE-F32-DualDrive-Publicapi-RAM-0023_FullPath_drive1
		COMMAND		cdir1		Count			PBASE-F32-DualDrive-Publicapi-RAM-0023_Count_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0023_index1_drive1
		COMMAND		cdir1		[]			PBASE-F32-DualDrive-Publicapi-RAM-0023_index2_drive1
        COMMAND		rfs1        SetAtt      PBASE-F32-DualDrive-Publicapi-RAM-0023_SetAtt4_drive1
        COMMAND		rfs1        SetAtt      PBASE-F32-DualDrive-Publicapi-RAM-0023_SetAtt5_drive1
		COMMAND		cdir1		~
		COMMAND		cdirScan1	~
		COMMAND		tEntry1		~
		COMMAND		fileMan1	Delete		PBASE-F32-DualDrive-Publicapi-RAM-0023_Delete_drive1
		COMMAND		rfs1    	RmDir		PBASE-F32-DualDrive-Publicapi-RAM-0023_RmDir2_drive1
		COMMAND		fileMan1	~
		COMMAND		rfs1		~
END_TEST_BLOCK
START_TEST_BLOCK	100	T_Sfsrv		\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFs		rfs2
		CREATE_OBJECT	CFileMan	fileMan2
        CREATE_OBJECT	TEntry		tEntry2
		CREATE_OBJECT	CDirScan	cdirScan2
		CREATE_OBJECT	CDir		cdir2
		COMMAND		rfs2		new			
		COMMAND		rfs2		Connect
		COMMAND		rfs2		MkDirAll	PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0015_NewL_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy1_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy2_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy3_drive2
		COMMAND		fileMan2	Copy		PBASE-F32-DualDrive-Publicapi-RAM-0015_Copy4_drive2
		COMMAND		rfs2		MkDirAll			PBASE-F32-DualDrive-Publicapi-RAM-0015_MkDirAll2_drive2
		COMMAND		tEntry2		new
		COMMAND		cdirScan2	NewL			PBASE-F32-DualDrive-Publicapi-RAM-0015_CDirScan_NewL_drive2
		COMMAND		cdirScan2	SetScanDataL		PBASE-F32-DualDrive-Publicapi-RAM-0015_SetScanDataL_drive2
		COMMAND		cdirScan2	NextL			PBASE-F32-DualDrive-Publicapi-RAM-0015_NextL_drive2
		COMMAND		cdirScan2	FullPath		PBASE-F32-DualDrive-Publicapi-RAM-0015_FullPath_drive2
		COMMAND		cdir2		Count			PBASE-F32-DualDrive-Publicapi-RAM-0015_Count_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index1_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index2_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index3_drive2
		COMMAND		cdir2		[]			PBASE-F32-DualDrive-Publicapi-RAM-0015_index4_drive2
		COMMAND		cdir2		~
		COMMAND		cdirScan2	~
		COMMAND		rfs2		RmDir			PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir1_drive2
		COMMAND		tEntry2		~
		COMMAND		fileMan2	Delete		PBASE-F32-DualDrive-Publicapi-RAM-0015_Delete_drive2
		COMMAND		fileMan2	RmDir		PBASE-F32-DualDrive-Publicapi-RAM-0015_RmDir2_drive2
		COMMAND		fileMan2	~
		COMMAND		rfs2		~
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0015


START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0017
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0017
//! @SYMAPI			RFormat::Open();RFormat::Next();RFile::Copy()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		03/07/2008 
//! @SYMTestCaseDesc		Format the one drive concurrenlty with Copy operation on other drive.
//!				Uses API elements: Format()
//! @SYMTestActions		1. Call Format() on the drive.
//!				        2. Try Copying files on to the other drive concurrantly with above operation
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	formats the one drive with the read/write operation on another drive concurrently.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	1000	T_Sfsrv	    \base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
        CREATE_OBJECT	RFs	        rfs1
		CREATE_OBJECT	RFile	    file1
        CREATE_OBJECT	CFileMan	fileMan1
		COMMAND		rfs1	    new
		COMMAND		rfs1	    Connect
		COMMAND		file1	    new
		COMMAND		file1	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0020_Open_drive1
		COMMAND		fileMan1	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0020_NewL_drive1
		COMMAND		fileMan1    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0020_Copy_drive1
        COMMAND     fileMan1    Attribs     PBASE-F32-DualDrive-Publicapi-RAM-0020_Attribs_drive1
        COMMAND     rfs1        Delete      PBASE-F32-DualDrive-Publicapi-RAM-0020_Delete_drive1
		COMMAND		fileMan1    ~
		COMMAND		file1	    Close
		COMMAND		file1	    ~
		COMMAND		rfs1	    Close
		COMMAND		rfs1	    ~
END_TEST_BLOCK
START_TEST_BLOCK	1000	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFormat	format2
		CREATE_OBJECT	RFs	rfs2
		COMMAND		rfs2	new
		COMMAND		rfs2	Connect
		COMMAND		format2	new
		COMMAND		format2	Open		PBASE-F32-DualDrive-Publicapi-RAM-0004_Open_drive2
		COMMAND		format2	Next
		COMMAND		format2	Close
		COMMAND		format2	~
		COMMAND		rfs2	Close
		COMMAND		rfs2	~
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0017

START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0018
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0018
//! @SYMAPI			RFormat::Open();RFormat::Next();RFile::Read();RFile::Write()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		03/07/2008 
//! @SYMTestCaseDesc		Format the one drive concurrenlty with read/write operation on large file on another drive.
//!				Uses API elements: Format()
//! @SYMTestActions		1. Call Format() on the drive.
//!				        2. Try Writing and reading operation on the drive concurrantly with above operation
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	formats the one drive with the read/write operation on another drive concurrently.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	1000	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFormat	format1
		CREATE_OBJECT	RFs	rfs1
		COMMAND		rfs1	new
		COMMAND		rfs1	Connect
		COMMAND		format1	new
		COMMAND		format1	Open		PBASE-F32-DualDrive-Publicapi-RAM-0004_Open_drive1
		COMMAND		format1	Next
		COMMAND		format1	Close
		COMMAND		format1	~
		COMMAND		rfs1	Close
		COMMAND		rfs1	~
END_TEST_BLOCK
START_TEST_BLOCK	1000	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini
		CREATE_OBJECT	RFs	rfs2
		CREATE_OBJECT	RFile	    file2
        CREATE_OBJECT	CFileMan	fileMan2
		COMMAND		rfs2	    new
		COMMAND		rfs2	    Connect
		COMMAND		file2	    new
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open_drive2
		COMMAND		fileMan2	NewL		PBASE-F32-DualDrive-Publicapi-RAM-0018_NewL_drive2
		COMMAND		fileMan2    Copy		PBASE-F32-DualDrive-Publicapi-RAM-0018_Copy_drive2
        COMMAND		file2	    Close
        COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open2_drive2
		COMMAND		file2	    Write		PBASE-F32-DualDrive-Publicapi-RAM-0018_Write_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    Open		PBASE-F32-DualDrive-Publicapi-RAM-0018_Open2_drive2
		COMMAND		file2	    Read		PBASE-F32-DualDrive-Publicapi-RAM-0018_Read_drive2
		COMMAND		file2	    Close		
		COMMAND		file2	    ~		
		COMMAND		rfs2	    Delete		PBASE-F32-DualDrive-Publicapi-RAM-0018_Delete_drive2
		COMMAND		rfs2	    ~		
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0018

START_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0016
//! @SYMTestCaseID		PBASE-F32-DualDrive-Publicapi-RAM-0016
//! @SYMAPI			RFormat::Open();RFormat::Next()
//! @SYMAuthor			Nirmala Bailur 
//! @SYMCreationDate		30/05/2008 
//! @SYMTestCaseDesc		Try to format both the drives.
//!				Uses API elements: Format()
//! @SYMTestActions		
//!				        1. Call Format() on both the drives.	
//!				        2. Call Close().
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		High
//! @SYMTestExpectedResults	Function Format() returns KErrNone and formats both the drives.
//! @SYMTestType		CIT
CONCURRENT
START_TEST_BLOCK	1000	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFormat	format1
		CREATE_OBJECT	RFs	rfs1
		COMMAND		rfs1	new
		COMMAND		rfs1	Connect
		COMMAND		format1	new
		COMMAND		format1	Open		PBASE-F32-DualDrive-Publicapi-RAM-0004_Open_drive1
		COMMAND		format1	Next
		COMMAND		format1	Close
		COMMAND		format1	~
		COMMAND		rfs1	Close
		COMMAND		rfs1	~
END_TEST_BLOCK
START_TEST_BLOCK	1000	T_Sfsrv	\base\PBASE-F32-DUAL-DRIVE-Publicapi-RAM.ini 
		CREATE_OBJECT	RFormat	format2
		CREATE_OBJECT	RFs	rfs2
		COMMAND		rfs2	new
		COMMAND		rfs2	Connect
		COMMAND		format2	new
		COMMAND		format2	Open		PBASE-F32-DualDrive-Publicapi-RAM-0004_Open_drive2
		COMMAND		format2	Next
		COMMAND		format2	Close
		COMMAND		format2	~
		COMMAND		rfs2	Close
		COMMAND		rfs2	~
END_TEST_BLOCK
CONSECUTIVE
END_TESTCASE			PBASE-F32-DualDrive-Publicapi-RAM-0016






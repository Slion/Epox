//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description: 
//
//! @file
//! @SYMTestSuiteName		pbase-f32-sfsrv-publicapi-ram
//!	@SYMScriptTestEnvironment	This test script requires a basic ROM.
//! @SYMScriptAuthor 		Jaanus Randveer
//! @SYMScriptCreationDate		18/19/2007
//! @SYMScriptDescription		The test script contains API tests for the following functions of CFileMan class:
//!	CFileMan *NewL(RFs &aFs)
//!	CFileMan *NewL(RFs &aFs, MFileManObserver *anObserver)
//!	TAction CurrentAction()
//!	void GetCurrentTarget(TFileName &aFile)
//!	void GetCurrentSource(TFileName &aFile)
//!	TInt BytesTransferredByCopyStep()
//!	TInt Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!	TInt Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!	TInt Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite)
//!	TInt Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus)
//!	TInt Delete(const TDesC &aName, TUint aSwitch=0)
//!	TInt Delete(const TDesC &aName, TUint aSwitch, TRequestStatus &aStatus)
//!	TInt Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite)
//!	TInt Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus)
//!	TInt Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite)
//!	TInt Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus)
//!	TInt RmDir(const TDesC &aDirName)
//!	TInt RmDir(const TDesC &aDirName, TRequestStatus &aStatus)
//!	TInt Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches=EOverWrite)
//!	TInt Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches, TRequestStatus &aStatus)
//!	void SetObserver(MFileManObserver *anObserver)
//!	const TEntry &CurrentEntry()
//!	TPtrC AbbreviatedPath()
//!	TPtrC FullPath()
//!	TInt GetLastError()
//!	TFileManError GetMoreInfoAboutError()


LOAD_SUITE	T_SfSrv

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2000
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2000
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Setup the environent to Test CFileMan by copying the testdata.
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!             3.Call CFileMan::Copy() to copy the testdata file required for further tests.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	TestDatas copied to particular directory.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDirAll 	PBASE-F32-FileMan-PublicApi-MkDirAll-Install
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy-Install
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2000


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2001
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2001
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Constructor NewL(RFs &aFs) test.
//! 				Uses API elements: NewL();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	CFileMan object is not NULL.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL	
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2001


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2002
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2002
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Constructor NewL(RFs &aFs, MFileManObserver *anObserver) test.
//! 				Uses API elements: NewL();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs, MFileManObserver *anObserver) and connected file server session as first parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	CFileMan object is not NULL.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-2002-001-NewL_command004		
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2002


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2003
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2003
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function CurrentAction() test.
//!											Gets action during copy process.
//! 				Uses API elements: NewL(), CurrentAction();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::CurrentAction().
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	CurrentAction() returns ECopy.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy					PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	CurrentAction	PBASE-F32-FileMan-PublicApi-2003-001-CurrentAction_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2003-001-Delete_command009
		COMMAND		RFs1		RmDir						PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2003


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2004
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2004
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function GetCurrentTarget(TFileName &aFile) test.
//!											Gets file target path during copy process.
//! 				Uses API elements: NewL(), GetCurrentTarget(), SetObserver(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::GetCurrentTarget(TFileName &aFile).
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	GetCurrentTarget() returns {TestPath}fileman\Copy\Test3.txt.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy					PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	GetCurrentTarget	PBASE-F32-FileMan-PublicApi-2004-001-GetCurrentTarget_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2004-001-Delete_command009
		COMMAND		RFs1		RmDir						PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2004


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2005
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2005
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function GetCurrentSource(TFileName &aFile) test.
//!											Gets file source path during copy process.
//! 				Uses API elements: NewL(), GetCurrentSource(), SetObserver(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::GetCurrentSource(TFileName &aFile).
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	GetCurrentSource() returns {TestPath}fileman\Test3.txt.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir					PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver		
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	GetCurrentSource	PBASE-F32-FileMan-PublicApi-2005-001-GetCurrentSource_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2005-001-Delete_command009
		COMMAND		RFs1		RmDir						PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2005


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2006
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2006
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function BytesTransferredByCopyStep() test.
//!											Gets the number of bytes transferred during a copy process.
//! 				Uses API elements: NewL(), SetObserver(), BytesTransferredByCopyStep(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::BytesTransferredByCopyStep().
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	BytesTransferredByCopyStep() returns actual size of copyed file "51192".
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir					PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	BytesTransferredByCopyStep	PBASE-F32-FileMan-PublicApi-2006-001-BytesTransferredByCopyStep_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2006-001-Delete_command009
		COMMAND		RFs1		RmDir						PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2006


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2007
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2007
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) test.
//!											Sets file attributes synchronously to read-only.
//! 				Uses API elements: NewL(), Attribs();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call RFs::Att() to check that file has KEntryAttNormal as attribute.
//!				4.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//!				5.Call RFs::Att() to check that attribute was set to KEntryAttReadOnly
//!				6.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//!				7.Call RFs::Att() to check that file have KEntryAttNormal as attribute.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribs() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		RFs1	Att		PBASE-F32-FileMan-PublicApi-2007-001-Att_command005
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2007-001-Attribs_command006
		COMMAND		RFs1	Att		PBASE-F32-FileMan-PublicApi-2007-001-Att_command007
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2007-001-Attribs_command008
		COMMAND		RFs1	Att		PBASE-F32-FileMan-PublicApi-2007-001-Att_command009
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2007


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2008
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2008
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus) test.
//!											Sets file attributes asynchronously to read-only.
//! 				Uses API elements: NewL(), Attribs();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call RFs::Att() to check that file has KEntryAttNormal as attribute.
//!				4.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter
//!				  and iStatus as fourth parameter.
//!				5.Call RFs::Att() to check that attribute was set to KEntryAttReadOnly
//!				6.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter
//!				  and iStatus as fourth parameter.
//!				7.Call RFs::Att() to check that file have KEntryAttNormal as attribute.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribs() returns KErrNone and second Attrib returns KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		RFs1	Att	PBASE-F32-FileMan-PublicApi-2008-001-Att_command005
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2008-001-Attribs_command006
		OUTSTANDING
		COMMAND		RFs1	Att	PBASE-F32-FileMan-PublicApi-2008-001-Att_command007
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2008-001-Attribs_command008
    COMMAND !Error=-14	CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2008-001-Attribs_command008
		OUTSTANDING
		COMMAND		RFs1	Att	PBASE-F32-FileMan-PublicApi-2008-001-Att_command009
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2008


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2009
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2009
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Sets file attributes synchronously to normal and copies file synchronously from one directory to another.
//! 				Uses API elements: NewL(), Attribs(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!			     	  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile		RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir			PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2009-001-Copy_command006
		COMMAND		RFile1	Open		PBASE-F32-FileMan-PublicApi-2009-001-Open_command007
		COMMAND		RFile1  Close
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2009-001-Delete_command008
		COMMAND		RFs1			RmDir			PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2009


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2010
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2010
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) test.
//!											Sets file attributes synchronously to normal and copies file asynchronously from one directory to another.
//! 				Uses API elements: NewL(), Attribs(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter, 
//!				  and iStatus as sixth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir			PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy			PBASE-F32-FileMan-PublicApi-2010-001-Copy_command006
		OUTSTANDING
		COMMAND		RFile1		Open			PBASE-F32-FileMan-PublicApi-2010-001-Open_command007
		COMMAND		RFile1  	Close
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2010-001-Delete_command008
		OUTSTANDING
		COMMAND		RFs1			RmDir			PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2010


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2011
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2011
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0) test.
//!											Copies file asynchronously from one directory to another and deletes synchronously copied file.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), and {TestPath}fileman\Test1.txt as parameter
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Delete() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect		
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy			PBASE-F32-FileMan-PublicApi-2011-001-Copy_command006
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2011-001-Delete_command007
		COMMAND	!Error=-1	RFile1		Open		PBASE-F32-FileMan-PublicApi-2011-001-Open_command008
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFile1			~
		COMMAND		CFileMan1		~
		COMMAND		RFs1				~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2011


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2012
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2012
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus) test.
//!											Copies file asynchronously from one directory to another and deletes asynchronously copied file.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and iStatus as last parameter.
//!				4.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and CFileMan::EOverWrite as second parameter,
//!				 	and iStatus as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Delete() returns KErrNone and second delete returns KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new		
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir			PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy			PBASE-F32-FileMan-PublicApi-2012-001-Copy_command006
		OUTSTANDING
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2012-001-Delete_command007
		COMMAND !Error=-14	CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2012-001-Delete_command007
		OUTSTANDING
		COMMAND	!Error=-1 	RFile1	Open		PBASE-F32-FileMan-PublicApi-2012-001-Open_command008
		COMMAND		RFs1			RmDir			PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1	~
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2012


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2013
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2013
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Moves file synchronously from one directory to another.
//! 				Uses API elements: NewL(), Move();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).	
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).	
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter.	
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir			PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2013-001-Move_command006
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2013-001-Open_command007
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2013-001-Move_command008
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2013-001-Open_command009
		COMMAND		RFile1		Close
		COMMAND		RFs1			RmDir		PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2013


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2014
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2014
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) test.
//!											Moves file asynchronously from one directory to another.
//! 				Uses API elements: NewL(), Move();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as fourth parameter.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL	PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2014-001-Move_command006
		OUTSTANDING
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2014-001-Open_command007
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2014-001-Move_command008
		OUTSTANDING
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2014-001-Open_command009
		COMMAND		RFile1		Close
		COMMAND		RFs1			RmDir		PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFile1		~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2014


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2015
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2015
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Renames file name synchronously.
//! 				Uses API elements: NewL(), Rename();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Renamed.txt as second parameter.
//!				4.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Renamed.txt as first parameter, 
//!				  and {TestPath}fileman\Test1.txt as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2015-001-Rename_command005
		COMMAND		RFile1		Open			PBASE-F32-FileMan-PublicApi-2015-001-Open_command006
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2015-001-Rename_command007
		COMMAND		RFile1		Open			PBASE-F32-FileMan-PublicApi-2015-001-Open_command008
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2015


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2016
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2016
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) test.
//!											Renames file name asynchronously.
//! 				Uses API elements: NewL(), Rename();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Renamed.txt as first parameter, 
//!				  and {TestPath}fileman\Test1.txt as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as last parameter.
//!				4.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Renamed.txt as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new
		COMMAND		RFs1		Connect
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2016-001-Rename_command005
		OUTSTANDING
		COMMAND		RFile1		Open			PBASE-F32-FileMan-PublicApi-2016-001-Open_command006
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2016-001-Rename_command007
		OUTSTANDING
		COMMAND		RFile1		Open			PBASE-F32-FileMan-PublicApi-2016-001-Open_command008
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2016


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2017
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2017
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName) test.
//!											Test removes newly created directory synchronously.
//! 				Uses API elements: NewL(), RmDir();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call RFs::MkDir(), and {TestPath}fileman\Removable\ as parameter.
//!				3.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				4.Call CFileMan::RmDir(const TDesC &aDirName) and {TestPath}fileman\Removable\ as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	RmDir() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs			RFs1
		CREATE_OBJECT	RDir		RDir1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new		
		COMMAND		RFs1			Connect		
		COMMAND		RFs1			MkDir			PBASE-F32-FileMan-PublicApi-2017-001-MkDir_command004
		COMMAND		RDir1			new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		RDir1			Open		PBASE-F32-FileMan-PublicApi-2017-001-Open_command006
		COMMAND		RDir1			Close
		COMMAND		CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2017-001-RmDir_command007
		COMMAND	!Error=-12		RDir1			Open		PBASE-F32-FileMan-PublicApi-2017-001-Open_command008
		COMMAND		CFileMan1	~
		COMMAND		RDir1			~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2017


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2018
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2018
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName, TRequestStatus &aStatus) test.
//!											Test removes newly created directory asynchronously.
//! 				Uses API elements: NewL(), RmDir();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call RFs::MkDir(), and {TestPath}fileman\Removable\ as parameter.
//!				3.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				4.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Removable\ as first parameter, 
//!				  and iStatus as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	1st RmDir returns KErrNone and Second call returns KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RDir			RDir1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect		
		COMMAND		RFs1			MkDir			PBASE-F32-FileMan-PublicApi-2018-001-MkDir_command004
		COMMAND		RDir1			new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		RDir1			Open		PBASE-F32-FileMan-PublicApi-2018-001-Open_command006
		COMMAND		RDir1			Close
		COMMAND		CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2018-001-RmDir_command007
		COMMAND	!Error=-14	CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2018-001-RmDir_command007
		OUTSTANDING
		COMMAND	!Error=-12	RDir1			Open		PBASE-F32-FileMan-PublicApi-2018-001-Open_command008
		COMMAND		CFileMan1	~
		COMMAND		RDir1			~			
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2018


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2019
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2019
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches=EOverWrite) test.
//!											Opens file then copies file content to another file synchronously.
//! 				Uses API elements: NewL(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call RFile::Open() to open file.
//!				4.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches=EOverWrite),
//!				  and RFile object as first object, 
//!				  and {TestPath}fileman\Test1_RFs.txt as second parameter.				
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!				  and {TestPath}fileman\Test1_RFs.txt as first parameter,
//!				  and 0 as second parameter.
//!				6.RFs::Close().
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RFile		RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFile1		new
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2019-001-Open_command006
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2019-001-Copy_command008
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2019-001-Open_command009
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete	PBASE-F32-FileMan-PublicApi-2019-001-Delete_command010
		COMMAND		CFileMan1	~
		COMMAND		RFile1		Close
		COMMAND		RFile1		~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2019


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2020
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2020
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches, TRequestStatus &aStatus) test.
//!											Opens file then copies file content to another file asynchronously.
//! 				Uses API elements: NewL(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call RFile::Open() to open file.
//!				4.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches, TRequestStatus &aStatus),
//!				  and RFile object as first object, 
//!				  and {TestPath}fileman\Test1_RFs.txt as second parameter,
//!				  and iStatus as last parameter.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!				  and {TestPath}fileman\Test1_RFs.txt as first parameter,
//!				  and 0 as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	1st Copy() returns KErrNone and second returns KErrInUse
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RFile		RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFile1		new
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2020-001-Open_command006
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2020-001-Copy_command008
		COMMAND   !Error=-14	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2020-001-Copy_command008
		OUTSTANDING
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2020-001-Open_command009
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2020-001-Delete_command010
		COMMAND		CFileMan1	~		
		COMMAND		RFile1		Close
		COMMAND		RFile1		~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2020


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2021
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2021
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function SetObserver(MFileManObserver *anObserver) test.
//!											Sets observer.
//! 				Uses API elements: NewL(), SetObserver();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	No Panic and Error code returned.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver		
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2021


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2022
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2022
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function CurrentEntry() test.
//!											Gets the entry currently being copied.
//! 				Uses API elements: NewL(), SetObserver(), CurrentEntry(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::CurrentEntry().
//!				6.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\Test3.txt as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	CurrentEntry() returns TEntry in which iName is "Test3.txt".
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir					PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy					PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	CurrentEntry	PBASE-F32-FileMan-PublicApi-2022-001-CurrentEntry_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2022-001-Delete_command009
		COMMAND		RFs1		RmDir						PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1			~
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2022


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2023
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2023
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function AbbreviatedPath() test.
//!											Gets the abbreviated path of the file currently being copied.
//! 				Uses API elements: NewL(), SetObserver(), AbbreviatedPath(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::AbbreviatedPath().
//!				6.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\Test3.txt as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	AbbreviatedPath() returns \.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy			PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	AbbreviatedPath	PBASE-F32-FileMan-PublicApi-2023-001-AbbreviatedPath_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2023-001-Delete_command009
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2023


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2024
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2024
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function FullPath() test.
//!											Gets the full path of the file currently being copied.
//! 				Uses API elements: NewL(), SetObserver(), FullPath(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::FullPath().
//!				6.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\Test3.txt as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	FullPath() returns {TestPath}fileman\.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy			PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	FullPath	PBASE-F32-FileMan-PublicApi-2024-001-FullPath_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2024-001-Delete_command009
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2024


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2025
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2025
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function GetLastError() test.
//!											Gets the latest error code returned during copy process
//! 				Uses API elements: NewL(), SetObserver(), GetLastError(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::GetLastError().
//!				6.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\Test3.txt as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	GetLastError() returns KErrNone.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir						PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL					PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy					PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	GetLastError	PBASE-F32-FileMan-PublicApi-2025-001-GetLastError_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2025-001-Delete_command009
		COMMAND		RFs1		RmDir						PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2025


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2026
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2026
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function GetMoreInfoAboutError() test.
//!											Gets additional information about the latest error returned during copy process
//! 				Uses API elements: NewL(), SetObserver(), GetMoreInfoAboutError(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::SetObserver().
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//!				5.Call CFileMan::GetMoreInfoAboutError().
//!				6.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\Test3.txt as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	GetMoreInfoAboutError() returns ENoExtraInformation.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy			PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	GetMoreInfoAboutError	PBASE-F32-FileMan-PublicApi-2026-001-GetMoreInfoAboutError_command008
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2026-001-Delete_command009
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2026


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2027
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2027
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy() test.
//!											Copy File from one drive to another (RAM Drive).
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}Test3.txt as first parameter, 
//!				  and {RamDrive}fileman\Copy\ as second parameter.
//!				4.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {RamDrive}fileman\Copy\Test3.txt as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	File successfully copied from one drive to another.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDirAll				PBASE-F32-FileMan-PublicApi-2027-001-MkDirAll_command004
		COMMAND		RFile1	new
		COMMAND		CFileMan1	NewL			PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy	PBASE-F32-FileMan-PublicApi-2027-001-Copy_command006
		COMMAND		RFile1		Open	PBASE-F32-FileMan-PublicApi-2027-001-Open_command007
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2027-001-Delete_command008
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-2027-001-RmDir_command009
		COMMAND		CFileMan1	~
		COMMAND		RFile1	~
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2027

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2028
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2028
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Copy file with ReadOnly and Hidden atributes and check that the copied file have the same attributes.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				6.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				7.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\Test1.txt as parameter.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File attributes unchanged after Copy().
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile		RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2028-001-Att_command006
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2028-001-Attribs_command007
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2028-001-Att_command008
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2028-001-Open_command010
		COMMAND		RFile1		Close
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2028-001-Att_command011
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2028-001-Attribs_command012
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2028-001-Delete_command013
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2028-001-Attribs_command014
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~		
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2028


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2029
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2029
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Attribs(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Set KEntryAttHidden attribute non recursivly and recursivly and then check that is was set correctly.
//! 				Uses API elements: NewL(), Attribs(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test3.txt as second parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test\Test1.txt as second parameter.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				6.Check that only for Test1.txt attribute was set.
//!				7.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and ERecurse as fifth parameter.
//!				9.Check that KEntryAttHidden was set for Test1.txt and for Test3.txt.
//!				10.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and ERecurse as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	All attributes are set correctly.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_Copy-Test
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2029-001-Copy_command002
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2029-001-Attribs_command003
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2029-001-Att_command004
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2029-001-Att_command005
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2029-001-Attribs_command006
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2029-001-Attribs_command007
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2029-001-Att_command008
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2029-001-Att_command009
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2029-001-Attribs_command010
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2029-001-Delete_command011
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_Copy-Test
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2029


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2030
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2030
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Attribs(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Set KEntryAttHidden attribute non recursivly and recursivly and then check that is was set correctly.
//! 				Uses API elements: NewL(), Attribs(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test3.txt as second parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test\Test1.txt as second parameter.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!					and iStatus.
//!				6.Check that only for Test1.txt attribute was set.
//!				7.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!					and iStatus.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and ERecurse as fifth parameter.
//!					and iStatus.
//!				8.Check that KEntryAttHidden was set for Test1.txt and for Test3.txt.
//!				10.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and ERecurse as fifth parameter.
//!					and iStatus.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	All attributes are set correctly.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_Copy-Test
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_EOverWrite
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2030-001-Copy_command002
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2030-001-Attribs_command003
				OUTSTANDING
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2030-001-Att_command004
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2030-001-Att_command005
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2030-001-Attribs_command006
				OUTSTANDING
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2030-001-Attribs_command007
				OUTSTANDING
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2030-001-Att_command008
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2030-001-Att_command009
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2030-001-Attribs_command010
				OUTSTANDING
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2030-001-Delete_command011
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_Copy-Test
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2030

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2031
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2031
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Copy files using aSwitch=0 and aSwitch=ERecursive.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter.
//!					and aSwitch=ERecurse.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() return KErrPathNotFound when non recursive copy.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2031-001-Copy_command002
		COMMAND !Error=-12		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2031-001-Copy_command003
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2031-001-Copy_command004
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2031-001-Delete_command005
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2031-001-Delete_command006
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2031-001-RmDir_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2031


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2032
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2032
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Copy files using aSwitch=0 and aSwitch=ERecursive.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				  and iStatus as parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0,
//!				  and iStatus as parameter.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter.
//!					and aSwitch=ERecurse,
//!				  and iStatus as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() return KErrPathNotFound when non recursive copy.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2032-001-Copy_command002
				OUTSTANDING
		COMMAND !AsyncError=-12		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2032-001-Copy_command003
				OUTSTANDING
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2032-001-Copy_command004
				OUTSTANDING
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2032-001-Delete_command005
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2032-001-Delete_command006
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2032-001-RmDir_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2032


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2033
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2033
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Move files using aSwitch=0 and aSwitch=ERecursive.
//! 				Uses API elements: NewL(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0.
//!				5.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter.
//!					and aSwitch=ERecurse.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() return KErrPathNotFound when non recursive Move.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2033-001-Copy_command002
		COMMAND !Error=-12		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2033-001-Move_command003
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2033-001-Move_command004
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2033-001-Delete_command005
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2033-001-RmDir_command006
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2033


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2034
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2034
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Move files using aSwitch=0 and aSwitch=ERecursive.
//! 				Uses API elements: NewL(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				  and iStatus as parameter.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0,
//!				  and iStatus as parameter.
//!				5.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter.
//!					and aSwitch=ERecurse,
//!				  and iStatus as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() return KErrPathNotFound when non recursive Move.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2034-001-Copy_command002
		COMMAND !AsyncError=-12		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2034-001-Move_command003
				OUTSTANDING
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2034-001-Move_command004
				OUTSTANDING
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2034-001-Delete_command005
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2034-001-RmDir_command006
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2034


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2035
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2035
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) test.
//!											Sets attributes for files(using wildcard) synchronously to read-only.
//! 				Uses API elements: NewL(), Copy(), Attribs();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\* as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and aSwitch=0 as fifth parameter.
//!				6.Call RFs::Att() to check that attribute was set for both files (Test1.txt, Test2.txt).
//!				7.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\* as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and aSwitch=0 as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribs() returns KErrNone and attributes successfuly were changed for both files.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new		
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2035-001-Attribs_command007
		COMMAND		RFs1	Att					PBASE-F32-FileMan-PublicApi-2035-001-Att_command008
		COMMAND		RFs1	Att					PBASE-F32-FileMan-PublicApi-2035-001-Att_command009
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2035-001-Attribs_command010
		COMMAND		CFileMan1	Delete	PBASE-F32-FileMan-PublicApi-2035-001-Delete_command011
		COMMAND		RFs1			RmDir		PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2035

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2036
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2036
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus) test.
//!											Sets attributes for files(using wildcard) synchronously to read-only.
//! 				Uses API elements: NewL(), Copy(), Attribs();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Copy\* as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and aSwitch=0 as fifth parameter.
//!				  and iStatus as fourth parameter.
//!				6.Call RFs::Att() to check that attribute was set for both files (Test1.txt, Test2.txt).
//!				7.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Copy\* as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and aSwitch=0 as fifth parameter.
//!				  and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribs() returns KErrNone and attributes successfuly were changed for both files.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new		
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2036-001-Attribs_command007
				OUTSTANDING
		COMMAND		RFs1	Att					PBASE-F32-FileMan-PublicApi-2036-001-Att_command008
		COMMAND		RFs1	Att					PBASE-F32-FileMan-PublicApi-2036-001-Att_command009
		COMMAND		CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2036-001-Attribs_command010
				OUTSTANDING
		COMMAND		CFileMan1	Delete	PBASE-F32-FileMan-PublicApi-2036-001-Delete_command011
		COMMAND		RFs1			RmDir		PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2036


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2037
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2037
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) test.
//!											Copy files using wildcard synchronously.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\* as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				4.Check that copied more that one file. Test1.txt and Test2.txt are exists.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribs() returns KErrNone and attributes successfuly were changed for both files.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2037-001-Copy_command005
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2037-001-Open_command006
		COMMAND		RFile1		Close
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2037-001-Open_command007
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete	PBASE-F32-FileMan-PublicApi-2037-001-Delete_command008
		COMMAND		RFs1			RmDir		PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2037

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2038
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2038
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0, TRequestStatus &aStatus) test.
//!											Copy files using wildcard asynchronously.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\* as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!					and iStatus.
//!				4.Check that copied more that one file. Test1.txt and Test2.txt are exists.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribs() returns KErrNone and attributes successfuly were changed for both files.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2038-001-Copy_command005
				OUTSTANDING
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2038-001-Open_command006
		COMMAND		RFile1		Close
		COMMAND		RFile1		Open		PBASE-F32-FileMan-PublicApi-2038-001-Open_command007
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete	PBASE-F32-FileMan-PublicApi-2038-001-Delete_command008
		COMMAND		RFs1			RmDir		PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2038


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2039
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2039
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Move files synchronously using path with trailing slash and without
//! 				Uses API elements: NewL(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\* as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=ERecurse,
//!				5.Check that "Copy1" contains files (Test1.txt and Test2.txt) and "Copy" doesn't.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy1 as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				7.Check that folder "Copy1" now exists only "\Copy\Copy1\"
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() return KErrPathNotFound when non recursive Move.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	RDir			RDir1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		RDir1			new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2039-001-Copy_command002
		COMMAND 	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2039-001-Move_command003
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2039-001-Open_command004
		COMMAND		RFile1		Close
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2039-001-Open_command005
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2039-001-Move_command006
		COMMAND	!Error=-12	RDir1			Open				PBASE-F32-FileMan-PublicApi-2039-001-Open_command007
		COMMAND		RDir1			Open				PBASE-F32-FileMan-PublicApi-2039-001-Open_command008
		COMMAND		RDir1			Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2039-001-Delete_command009
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2039-001-RmDir_command010
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFile1		~
		COMMAND		RDir1			~
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2039


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2040
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2040
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Move files synchronously using path with trailing slash and without
//! 				Uses API elements: NewL(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\* as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=ERecurse,
//!				5.Check that "Copy1" contains files (Test1.txt and Test2.txt) and does not contains folder "Copy".
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy1 as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				7.Check that folder "Copy1" was moved to "\Copy\Copy1\"
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() moves only files if trailing slash exists and whole folder if no trailing slash.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	RDir			RDir1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		RDir1			new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2040-001-Copy_command002
		COMMAND 	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2040-001-Move_command003
				OUTSTANDING
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2040-001-Open_command004
		COMMAND		RFile1		Close
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2040-001-Open_command005
		COMMAND		RFile1		Close
		COMMAND	!Error=-12	RDir1			Open				PBASE-F32-FileMan-PublicApi-2040-001-Open_command006
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2040-001-Move_command007
				OUTSTANDING
		COMMAND	!Error=-12	RDir1			Open				PBASE-F32-FileMan-PublicApi-2040-001-Open_command008
		COMMAND		RDir1			Open				PBASE-F32-FileMan-PublicApi-2040-001-Open_command009
		COMMAND		RDir1			Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2040-001-Delete_command010
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2040-001-RmDir_command011
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFile1		~
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2040


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2041
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2041
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Synchronously Move files with ReadOnly and Hidden atributes and check that the moved files have the same attributes.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test2.txt as second parameter.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch = ERecurse.
//!				7.Check that files have the same attributes.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy1\ as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy1\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File attributes unchanged after Move().
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_EOverWrite
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2041-001-Attribs_command004
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2041-001-Move_command005
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2041-001-Att_command006
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2041-001-Att_command007
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2041-001-Attribs_command008
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2041-001-Delete_command009
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2041-001-RmDir_command010
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2041


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2042
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2042
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Asynchronously Move files with ReadOnly and Hidden atributes and check that the moved files have the same attributes.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test2.txt as second parameter.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch = ERecurse,
//!					and iStatus.
//!				7.Check that files have the same attributes.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy1\ as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy1\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File attributes unchanged after Move().
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_EOverWrite
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2042-001-Attribs_command004
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2042-001-Move_command005
				OUTSTANDING
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2042-001-Att_command006
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2042-001-Att_command007
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2042-001-Attribs_command008
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2042-001-Delete_command009
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2042-001-RmDir_command010
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2042


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2043
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2043
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch) test.
//!											Synchronously Rename file with ReadOnly and Hidden atributes and check that the renamed file have the same attributes.
//! 				Uses API elements: NewL(), Copy(), Rename(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				6.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test.txt as second parameter,
//!					and aSwitch = 0.
//!				7.Check that files have the same attributes.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\Test.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File attributes unchanged after Rename().
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2043-001-Attribs_command004
		COMMAND		CFileMan1	Rename			PBASE-F32-FileMan-PublicApi-2043-001-Rename_command005
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2043-001-Att_command006
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2043-001-Attribs_command007
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2043-001-Delete_command008
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2043


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2044
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2044
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) test.
//!											Asynchronously Rename file with ReadOnly and Hidden atributes and check that the renamed file have the same attributes.
//! 				Uses API elements: NewL(), Copy(), Rename(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				5.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly|KEntryAttHidden as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				6.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test.txt as second parameter,
//!					and aSwitch = 0,
//!					and iStatus.
//!				7.Check that files have the same attributes.
//!				8.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Copy\Test.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly|KEntryAttHidden as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File attributes unchanged after Rename().
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2044-001-Attribs_command004
		COMMAND		CFileMan1	Rename			PBASE-F32-FileMan-PublicApi-2044-001-Rename_command005
					OUTSTANDING
		COMMAND		RFs1			Att					PBASE-F32-FileMan-PublicApi-2044-001-Att_command006
		COMMAND		CFileMan1	Attribs			PBASE-F32-FileMan-PublicApi-2044-001-Attribs_command007
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2044-001-Delete_command008
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2044


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2045
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2045
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Call asynchronous 3 Copy() functions at once.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and Opened RFile handle "{TestPath}fileman\Test1.txt" as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter,
//!					and aSwitch = 0,
//!					and iStatus.
//!				4.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and Opened RFile handle "{TestPath}fileman\Test2.txt" as first parameter, 
//!				  and {TestPath}fileman\Copy\Test2.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				5.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and Opened RFile handle "{TestPath}fileman\Test3.txt" as first parameter, 
//!				  and {TestPath}fileman\Copy\Test3.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				6.Check that only first file was copied other copy calls return KErrInUse.
//!				7.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All files were copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2045-001-Copy_command002
		COMMAND !Error=-14 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2045-001-Copy_command003
		COMMAND !Error=-14 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2045-001-Copy_command004
					OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2045-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND !Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2045-001-Open_command006
		COMMAND !Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2045-001-Open_command007
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2045-001-Delete_command008
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2045


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2046
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2046
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Call asynchronous 3 Move() functions at once.
//! 				Uses API elements: NewL(), Cope(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test2.txt as second parameter.
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test3.txt as second parameter.
//!					and aSwitch = 0.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test1.txt as second parameter,
//!					and aSwitch = 0,
//!					and iStatus.
//!				7.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test2.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				8.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test3.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				9.Check that only first file was moved other Move calls return KErrInUse.
//!				10.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				11.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All files were moved.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND 	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2046-001-Move_command002
		COMMAND	!Error=-14 	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2046-001-Move_command003
		COMMAND	!Error=-14 	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2046-001-Move_command004
					OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2046-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1		RFile1		Open				PBASE-F32-FileMan-PublicApi-2046-001-Open_command006
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2046-001-Open_command007
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2046-001-Delete_command008
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2046-001-Delete_command009
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		RFile1		~
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2046


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2047
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2047
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Call asynchronous 3 Rename() functions at once.
//! 				Uses API elements: NewL(), Cope(), Rename(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test2.txt as second parameter.
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test3.txt as second parameter.
//!					and aSwitch = 0.
//!				6.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1_new.txt as second parameter,
//!					and aSwitch = 0,
//!					and iStatus.
//!				7.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test2_new.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				8.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test3_new.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				9.Check that only first file was renamed other Rename calls return KErrInUse.
//!				10.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All files were moved.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new					
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND		CFileMan1	Rename			PBASE-F32-FileMan-PublicApi-2047-001-Rename_command002
		COMMAND	!Error=-14 	CFileMan1	Rename			PBASE-F32-FileMan-PublicApi-2047-001-Rename_command003
		COMMAND	!Error=-14 	CFileMan1	Rename			PBASE-F32-FileMan-PublicApi-2047-001-Rename_command004
					OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2047-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2047-001-Open_command006
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2047-001-Open_command007
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2047-001-Delete_command008
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFile1		~
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2047



//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////								//////
//////		 ///////////////////////////////////		//////
//////		 ///				 ///		//////
//////		 ///	  NEGATIVE TESTS	 ///		//////
//////		 ///				 ///		//////	
//////		 ///////////////////////////////////		//////
//////								//////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//ATTRIBS
//Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//
////////////////////////////////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2103
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2103
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) negative test.
//!											Try to set attribute KEntryAttDir synchronously for file!
//!											And then check that it was not set for file
//! 				Uses API elements: NewL(), Attribs().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and KEntryAttDir as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Attribute	KEntryAttDir wasn't set for file. 
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND			CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2103-001-Attribs_command005
		COMMAND			RFs1			Att			PBASE-F32-FileMan-PublicApi-2103-001-Att_command006
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2103


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2104
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2104
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) negative test.
//!											Try to set attributes synchronously with wrong file path!
//! 				Uses API elements: NewL(), Attribs().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\\\Test2.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Function Attribs() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2104-001-Attribs_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2104


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//ATTRIBS
//Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2105
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2105
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus) 
//!											negative test.
//!											Try to set attribute KEntryAttDir asynchronously for file!
//!											And then check that it was not set for file
//! 				Uses API elements: NewL(), Attribs().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttDir as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter, 
//!				  and iStatus as sixth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Attribute	KEntryAttDir wasn't set for file.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND			CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2105-001-Attribs_command005
		OUTSTANDING
		COMMAND			RFs1			Att			PBASE-F32-FileMan-PublicApi-2105-001-Att_command006
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2105


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2106
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2106
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus) 
//!											negative test.
//!											Try to set attributes asynchronously with wrong file path!
//! 				Uses API elements: NewL(), Attribs().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\\\Test2.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter, 
//!				  and iStatus as sixth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Function Attribs() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL								PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2106-001-Attribs_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2106


///////////////////////////////////////////////////////////////////////
//
//COPY
//Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite)
//
///////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2107
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2107
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Sets file attributes to normal and tries to copy non-existing file synchronously from one directory to another.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test123.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-1	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2107-001-Copy_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2107


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2108
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2108
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Sets file attributes to normal and tries to copy file with wrong path name from one directory to another synchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\\\\\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2108-001-Copy_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2108


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2109
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2109
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Sets file attributes to normal and tries to copy file from one directory to directory with wrong path name synchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!			     	  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\/\/\Copy\ as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2109-001-Copy_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2109


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2110
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2110
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Sets file attributes to normal and tries to copy file from one directory to non-existing directory synchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!			     	  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\NotExist\ as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrPathNotFound
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs	RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1	new		
		COMMAND			RFs1	Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-12	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2110-001-Copy_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1	~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2110


/////////////////////////////////////////////////////////////////////////////////////
//
//COPY
//Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus)
//
/////////////////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2111
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2111
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Sets file attributes to normal and tries to copy non-existing file from one directory to another asynchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter, 
//!				  and iStatus as sixth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test123.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-1	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2111-001-Copy_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2111


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2112
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2112
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Sets file attributes to normal and tries to copy file with wrong path name from one directory to another asynchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter, 
//!				  and iStatus as sixth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\\\\\\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2112-001-Copy_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2112


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2113
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2113
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Sets file attributes to normal and tries to copy file from one directory to directory with wrong path name asynchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter, 
//!				  and iStatus as sixth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\/\/\Copy\ as second parameter,
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1	new		
		COMMAND			RFs1	Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2113-001-Copy_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2113


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2114
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2114
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Sets file attributes to normal and tries to copy file from one directory to non-existing directory asynchronously.
//! 				Uses API elements: NewL(), Attribs(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch, TRequestStatus &aStatus)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, and TTime(0) as fourth parameter, 
//!				  and CFileMan::EOverWrite as fifth parameter, 
//!				  and iStatus as sixth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\NotExist\ as second parameter,
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrPathNotFound
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-12	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2114-001-Copy_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2114


//////////////////////////////////////////////
//
//DELETE
//Delete(const TDesC &aName, TUint aSwitch=0)
//
//////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2115
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2115
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0) negative test.
//!											Tries to delete non-existing file synchronously.
//! 				Uses API elements: NewL(), Delete().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), and {TestPath}fileman\Test123.txt as parameter
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Delete() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-1	CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2115-001-Delete_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2115


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2116
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2116
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0) negative test.
//!											Tries to delete file with wrong path name synchronously.
//! 				Uses API elements: NewL(), Delete().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), and {TestPath}fileman\\\\\Test3.txt as parameter
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Delete() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2116-001-Delete_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2116


//////////////////////////////////////////////////////////////////////
//
//DELETE
//Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus)
//
//////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2117
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2117
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus) negative test.
//!											Tries to delete non-existing file asynchronously.
//! 				Uses API elements: NewL(), Delete().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test123.txt as first parameter, 
//!				  and CFileMan::EOverWrite as second parameter,
//!				  and iStatus as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Delete() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-1	CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2117-001-Delete_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2117


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2118
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2118
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus) negative test.
//!											Tries to delete file with wrong path name asynchronously.
//! 				Uses API elements: NewL(), Delete().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\\\\\Test3.txt as first parameter, 
//!				  and CFileMan::EOverWrite as second parameter,
//!				  and iStatus as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Delete() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2118-001-Delete_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2118


////////////////////////////////////////////////////////////////////////
//
//MOVE
//Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite)
//
////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2119
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2119
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to move non-existing file from one directory to another synchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).	
//!				  and {TestPath}fileman\Test123.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.	
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-1	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2119-001-Move_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2119


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2120
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2120
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to move file with wrong path name from one directory to another synchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).	
//!				  and {TestPath}fileman\\\\\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter.	
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2120-001-Move_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2120


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2121
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2121
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to move file from one directory to directory with wrong path name synchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).	
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\\\Copy\ as second parameter.	
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2121-001-Move_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2121


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2122
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2122
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to move file from one directory to non-existing directory synchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).	
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\NotExist\ as second parameter.	
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrPathNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-12	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2122-001-Move_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2122


//////////////////////////////////////////////////////////////////////////////////////
//
//MOVE
//Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus)
//
//////////////////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2123
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2123
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to move non-existing file from one directory to another asynchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test123.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-1	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2123-001-Move_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2123


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2124
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2124
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to move file with wrong path name from one directory to another asynchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\\\\\\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2124-001-Move_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2124


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2125
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2125
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to move file from one directory to directory with wrong path name asynchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\\\Copy\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2125-001-Move_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2125


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2126
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2126
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to move file from one directory to non-existing directory asynchronously.
//! 				Uses API elements: NewL(), Move().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\NotExist\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() returns KErrPathNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-12	CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2126-001-Move_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2126


//////////////////////////////////////////////////////////////////////////
//
//RENAME
//Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite)
//
//////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2127
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2127
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to rename non-existing file name synchronously.
//! 				Uses API elements: NewL(), Rename().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test123.txt as first parameter, 
//!				  and {TestPath}fileman\Renamed.txt as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-1	CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2127-001-Rename_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2127


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2128
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2128
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to rename file with wrong path name synchronously.
//! 				Uses API elements: NewL(), Rename().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\\\\\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Renamed.txt as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2128-001-Rename_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2128


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2129
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2129
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) negative test.
//!											Tries to rename file synchronously when new file path is wrong.
//! 				Uses API elements: NewL(), Rename().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\\\Renamed.txt as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2129-001-Rename_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2129


////////////////////////////////////////////////////////////////////////////////////////
//
//RENAME
//Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus)
//
////////////////////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2130
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2130
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to rename non-existing file name asynchronously.
//! 				Uses API elements: NewL(), Rename().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test123.txt as first parameter, 
//!				  and {TestPath}fileman\Renamed.txt as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-1	CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2130-001-Rename_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2130


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2131
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2131
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to rename file with wrong path name asynchronously.
//! 				Uses API elements: NewL(), Rename().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\\\\\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Renamed.txt as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2131-001-Rename_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2131


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2132
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2132
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus) negative test.
//!											Tries to rename file asynchronously when new file path is wrong.
//! 				Uses API elements: NewL(), Rename().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus).
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\\\Renamed.txt as second parameter,
//!				  and CFileMan::EOverWrite as third parameter, 
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Rename() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2132-001-Rename_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2132


//////////////////////////////
//
//REMOVE DIRECTORY
//RmDir(const TDesC &aDirName)
//
//////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2133
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2133
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName) negative test.
//!											Tries to remove non-existing directory synchronously.
//! 				Uses API elements: NewL(), RmDir().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::RmDir(const TDesC &aDirName) and {TestPath}fileman\Copy123\ as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	RmDir() returns KErrPathNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-12	CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2133-001-RmDir_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2133


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2134
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2134
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName) negative test.
//!											Tries to remove directory with wrong path name synchronously.
//! 				Uses API elements: NewL(), RmDir().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::RmDir(const TDesC &aDirName) and {TestPath}fileman\\\\\Copy\ as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	RmDir() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2134-001-RmDir_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2134


////////////////////////////////////////////////////////
//
//REMOVE DIRECTORY
//RmDir(const TDesC &aDirName, TRequestStatus &aStatus)
//
////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2135
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2135
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName, TRequestStatus &aStatus) negative test.
//!											Tries to remove non-existing directory asynchronously.
//! 				Uses API elements: NewL(), RmDir().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy123\ as first parameter, 
//!				  and iStatus as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	RmDir() returns KErrPathNotFound.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-12	CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2135-001-RmDir_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2135


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2136
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2136
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName, TRequestStatus &aStatus) negative test.
//!											Tries to remove directory with wrong path name asynchronously.
//! 				Uses API elements: NewL(), RmDir().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\\\\\Copy\ as first parameter, 
//!				  and iStatus as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	RmDir() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2136-001-RmDir_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2136


//////////////////////////////////////////////////////////////////////////
//
//COPY
//Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches=EOverWrite)
//
//////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2137
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2137
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches=EOverWrite) negative test.
//!											Opens file then tries to copy file content to another file with wrong path name synchronously.
//! 				Uses API elements: NewL(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call RFile::Open() to open file.
//!				4.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches=EOverWrite),
//!				  and RFile object as first object, 
//!				  and {TestPath}fileman\\\\\test.txt as second parameter.				
//!				5.RFs::Close().
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RFile		RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			RFile1		new
		COMMAND			RFile1		Open		PBASE-F32-FileMan-PublicApi-2137-001-Open_command006
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!Error=-28	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2137-001-Copy_command008
		COMMAND			CFileMan1	~
		COMMAND			RFile1		Close
		COMMAND			RFile1		~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2137


////////////////////////////////////////////////////////////////////////////////////////
//
//COPY
//Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches, TRequestStatus &aStatus)
//
////////////////////////////////////////////////////////////////////////////////////////

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2138
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2138
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches, TRequestStatus &aStatus) negative test.
//!											Opens file then tries to copy file content to another file with wrong path name asynchronously.
//! 				Uses API elements: NewL(), Copy().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call RFile::Open() to open file.
//!				4.Call CFileMan::Copy(const RFile &anOld, const TDesC &aNew, TUint aSwitches, TRequestStatus &aStatus),
//!				  and RFile object as first object, 
//!				  and {TestPath}fileman\\\\\test.txt as second parameter,
//!				  and iStatus as last parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() returns KErrBadName.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RFile		RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			RFile1		new
		COMMAND			RFile1		Open		PBASE-F32-FileMan-PublicApi-2138-001-Open_command006
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND	!AsyncError=-28	CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2138-001-Copy_command008
		OUTSTANDING
		COMMAND			CFileMan1	~
		COMMAND			RFile1		Close
		COMMAND			RFile1		~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2138

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2139
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2139
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) negative test.
//!											Try to set attribute KEntryAttReadOnly and unset the same attribute KEntryAttReadOnly synchronously for file!
//!											And then check that it was not set for file
//! 				Uses API elements: NewL(), Attribs().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Function Attribs() returns Panic with code 21.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND			CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2139-001-Attribs_command005
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK !PanicCode=21 !PanicString="FSCLIENT panic"
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2139

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2140
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2140
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0) negative test.
//!											Try to set attribute KEntryAttReadOnly and unset the same attribute KEntryAttReadOnly asynchronously for file!
//!											And then check that it was not set for file
//! 				Uses API elements: NewL(), Attribs().
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and 0 as fifth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Function Attribs() returns Panic with code 21. 
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND			RFs1		new		
		COMMAND			RFs1		Connect
		COMMAND			CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND !AsyncError=21			CFileMan1	Attribs	PBASE-F32-FileMan-PublicApi-2140-001-Attribs_command005
		OUTSTANDING
		COMMAND			CFileMan1	~		
		COMMAND			RFs1		~		
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2140

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2141
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2141
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Copy same file to the same location a three times with a different aSwitch parameter
//! 				Uses API elements: NewL(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	After second Copy() returns KAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir			PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND !Error=-11		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2141-001-Delete_command009
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2141


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2142
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2142
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Copy same file to the same location a three times with a different aSwitch parameter
//! 				Uses API elements: NewL(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0 as third parameter,
//!					and iStatus as fourth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!					and iStatus as fourth parameter.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!					and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	After second Copy() returns KAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir			PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2142-001-Copy_command006
					OUTSTANDING
		COMMAND !AsyncError=-11		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2142-001-Copy_command007
					OUTSTANDING
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2142-001-Copy_command008
					OUTSTANDING
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2142-001-Delete_command009
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2142


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2143
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2143
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Move same file to the same location a three times with a different aSwitch parameter
//! 				Uses API elements: NewL(), Move(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Move\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Move\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!				5.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Move\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Move\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!				7.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Move\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	After second Move() returns KAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir			PBASE-F32-FileMan-PublicApi-2143-001-MkDir_command004
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2143-001-Move_command006
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2143-001-Copy_command007
		COMMAND !Error=-11		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2143-001-Move_command008
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2143-001-Move_command009
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2143-001-Copy_command010
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2143-001-Delete_command011
		COMMAND		RFs1		RmDir		PBASE-F32-FileMan-PublicApi-2143-001-RmDir_command012
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2143


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2144
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2144
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Move same file to the same location a three times with a different aSwitch parameter
//! 				Uses API elements: NewL(), Move(), Copy;
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Move\ as second parameter,
//!					and aSwitch = 0 as third parameter,
//!					and iStatus as fourth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Move\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!				5.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Move\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!					and iStatus as fourth parameter.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Move\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!					and iStatus as fourth parameter.
//!				7.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Move\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	After second Move() returns KAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2144-001-MkDir_command004
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2144-001-Move_command006
					OUTSTANDING
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2144-001-Copy_command007
		COMMAND !AsyncError=-11		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2144-001-Move_command008
					OUTSTANDING
		COMMAND		CFileMan1	Move		PBASE-F32-FileMan-PublicApi-2144-001-Move_command009
					OUTSTANDING
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2144-001-Copy_command010
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2144-001-Delete_command011
		COMMAND		RFs1		RmDir		PBASE-F32-FileMan-PublicApi-2144-001-RmDir_command012
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2144


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2145
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2145
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Rename same file to the same location a three times with a different aSwitch parameter
//! 				Uses API elements: NewL(), Rename(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Rename\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Rename\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!				5.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Rename\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!				6.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Rename\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!				7.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Rename\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	After second Rename() returns KAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2145-001-MkDir_command004
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2145-001-Rename_command006
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2145-001-Copy_command007
		COMMAND !Error=-11		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2145-001-Rename_command008
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2145-001-Rename_command009
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2145-001-Copy_command010
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2145-001-Delete_command011
		COMMAND		RFs1		RmDir		PBASE-F32-FileMan-PublicApi-2145-001-RmDir_command012
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2145


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2146
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2146
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Rename same file to the same location a three times with a different aSwitch parameter
//! 				Uses API elements: NewL(), Rename();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Rename\ as second parameter,
//!					and aSwitch = 0 as third parameter,
//!					and iStatus as fourth parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Rename\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!				5.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Rename\ as second parameter,
//!					and aSwitch = 0 as third parameter.
//!					and iStatus as fourth parameter.
//!				6.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Rename\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//!					and iStatus as fourth parameter.
//!				7.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Rename\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\ as second parameter,
//!					and aSwitch = EOverWrite as third parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	After second Rename() returns KAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2146-001-MkDir_command004
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2146-001-Rename_command006
					OUTSTANDING
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2146-001-Copy_command007
		COMMAND !AsyncError=-11		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2146-001-Rename_command008
					OUTSTANDING
		COMMAND		CFileMan1	Rename		PBASE-F32-FileMan-PublicApi-2146-001-Rename_command009
					OUTSTANDING
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2146-001-Copy_command010
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2146-001-Delete_command011
		COMMAND		RFs1		RmDir		PBASE-F32-FileMan-PublicApi-2146-001-RmDir_command012
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2146


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2147
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2147
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0) test.
//!											Call synchronous delete with KNullDesC argument.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call RFs::SetSession() set session path to "{TestPath}fileman\Copy\"
//!				3.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\*.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!					and KNullDesC as parameter
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All files deleted from folder "Copy".
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir							PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1		SetSessionPath		PBASE-F32-FileMan-PublicApi-2147-001-SetSessionPath_command005
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2147-001-Copy_command007
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2147-001-Delete_command008
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2147


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2148
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2148
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function Delete(const TDesC &aName, TUint aSwitch=0, TRequestStatus &aStatus) test.
//!											Call asynchronous delete with KNullDesC argument.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call RFs::SetSession() set session path to "{TestPath}fileman\Copy\"
//!				3.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\*.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!				  and CFileMan::EOverWrite as third parameter.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!					and KNullDesC as parameter
//!					and iStatus as fourth parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All files deleted from folder "Copy".
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir							PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1		SetSessionPath		PBASE-F32-FileMan-PublicApi-2148-001-SetSessionPath_command005
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy		PBASE-F32-FileMan-PublicApi-2148-001-Copy_command007
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-2148-001-Delete_command008
				OUTSTANDING
		COMMAND		RFs1		RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2148


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2149
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2149
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName) test.
//!											Delete newly created folder with sub folders.
//! 				Uses API elements: NewL(), RmDir();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::RmDir(const TDesC &aDirName),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				4.Check that folder was successfully deleted with sub folders.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All sub folders and specified directory deleted.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RDir	RDir1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2149-001-MkDir_command005
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2149-001-MkDir_command006
		COMMAND		RDir1		new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2149-001-RmDir_command008
		COMMAND	!Error=-12		RDir1			Open		PBASE-F32-FileMan-PublicApi-2149-001-Open_command009
		COMMAND		CFileMan1	~
		COMMAND		RDir1			~
		COMMAND		RFs1			~
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2149


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2150
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2150
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName, TRequestStatus &aStatus) test.
//!											Delete newly created folder with sub folders asynchronously.
//! 				Uses API elements: NewL(), RmDir();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\ as parameter, 
//!					and iStatus as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults All sub folders and specified directory deleted.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RDir			RDir1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2150-001-MkDir_command005
		COMMAND		RFs1		MkDir		PBASE-F32-FileMan-PublicApi-2150-001-MkDir_command006
		COMMAND		RDir1		new
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	RmDir		PBASE-F32-FileMan-PublicApi-2150-001-RmDir_command008
			OUTSTANDING
		COMMAND	!Error=-12	RDir1			Open		PBASE-F32-FileMan-PublicApi-2150-001-Open_command009
		COMMAND		CFileMan1	~
		COMMAND		RDir1			~
		COMMAND		RFs1			~
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2150

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2151
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2151
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName) test.
//!											Delete folder in which one file is readonly.
//! 				Uses API elements: NewL(), RmDir(), Copy(), Attribs;
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0 as third parameter.
//!				4.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//!				5.Call CFileMan::RmDir(const TDesC &aDirName),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				6.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//!				7.Call CFileMan::RmDir(const TDesC &aDirName),
//!				  and {TestPath}fileman\Copy\ as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults RmDir() return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1		NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1		Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		CFileMan1		Attribs	PBASE-F32-FileMan-PublicApi-2151-001-Attribs_command007
		COMMAND !Error=-14		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2151-001-RmDir_command008
		COMMAND		CFileMan1		Attribs	PBASE-F32-FileMan-PublicApi-2151-001-Attribs_command009
		COMMAND		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2151-001-RmDir_command010
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2151


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2152
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2152
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName, TRequestStatus &aStatus) test.
//!											Delete folder in which one file is readonly.
//! 				Uses API elements: NewL(), RmDir(), Copy(), Attribs;
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0 as third parameter.
//!				4.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttReadOnly as second parameter,
//!				  and KEntryAttNormal as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//!				5.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				  and iStatus as second parameter.
//!				6.Call CFileMan::Attribs(const TDesC &aName, TUint aSetMask, TUint aClearMask, const TTime &aTime, TUint aSwitch=0)
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and KEntryAttNormal as second parameter,
//!				  and KEntryAttReadOnly as third parameter, 
//!				  and TTime(0) as fourth parameter, 
//!				  and CFileMan::ERecurse as fifth parameter.
//!				7.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				  and iStatus as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults RmDir() return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1		NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1		Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		CFileMan1		Attribs	PBASE-F32-FileMan-PublicApi-2152-001-Attribs_command007
		COMMAND !AsyncError=-14		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2152-001-RmDir_command008
			OUTSTANDING
		COMMAND		CFileMan1		Attribs	PBASE-F32-FileMan-PublicApi-2152-001-Attribs_command009
		COMMAND		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2152-001-RmDir_command010
			OUTSTANDING
		COMMAND		CFileMan1	~		
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2152


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2153
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2153
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName) test.
//!											Synchronously Delete folder in which one file is opened.
//! 				Uses API elements: NewL(), RmDir(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0 as third parameter.
//!				4.Open File in directory which will be deleted.
//!				5.Call CFileMan::RmDir(const TDesC &aDirName),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				6.Close opened file.
//!				7.Call CFileMan::RmDir(const TDesC &aDirName),
//!				  and {TestPath}fileman\Copy\ as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults RmDir() return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RFile	RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1	new		
		COMMAND		CFileMan1		NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1		Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		RFile1			Open		PBASE-F32-FileMan-PublicApi-2153-001-Open_command007
		COMMAND !Error=-14		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2153-001-RmDir_command008
		COMMAND		RFile1			Close	
		COMMAND		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2153-001-RmDir_command010
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~	
		COMMAND		RFs1		~
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2153


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2154
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2154
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Function RmDir(const TDesC &aDirName, TRequestStatus &aStatus) test.
//!											Asynchronously Delete folder in which one file is opened.
//! 				Uses API elements: NewL(), RmDir(), Copy();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite).
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0 as third parameter.
//!				4.Open File in directory which will be deleted.
//!				5.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				  and iStatus as second parameter.
//!				6.Close opened file.
//!				7.Call CFileMan::RmDir(const TDesC &aDirName, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\ as parameter.
//!				  and iStatus as second parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults RmDir() return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	RFile	RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1		new		
		COMMAND		RFs1		Connect
		COMMAND		RFs1		MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFile1	new		
		COMMAND		CFileMan1		NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1		Copy		PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND		RFile1			Open		PBASE-F32-FileMan-PublicApi-2154-001-Open_command007
		COMMAND !AsyncError=-14		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2154-001-RmDir_command008
				OUTSTANDING
		COMMAND		RFile1			Close	
		COMMAND		CFileMan1		RmDir		PBASE-F32-FileMan-PublicApi-2154-001-RmDir_command010
				OUTSTANDING
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~	
		COMMAND		RFs1		~
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2154

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2155
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2155
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Copy files to folder where alredy exists one file from list of copied files.
//! 				Uses API elements: NewL(), SetObserver(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!					and aSwitch=ERecurse.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() return KErrAlreadyExists when trying to copy Test1.txt.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND	!Error=-11	CFileMan1 Copy				PBASE-F32-FileMan-PublicApi-2155-001-Copy_command003
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2155-001-Delete_command004
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2155


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2156
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2156
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Move files to folder where alredy exists one file from list of moved files.
//! 				Uses API elements: NewL(), SetObserver(), Copy(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!				  and {TestPath}fileman\Copy1\ as first parameter, 
//!					and aSwitch=ERecurse.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() return KErrAlreadyExists when trying to copy Test1.txt.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-2156-001-MkDir_command002
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2156-001-Copy_command003
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2156-001-Copy_command004
		COMMAND	!Error=-11	CFileMan1 Move				PBASE-F32-FileMan-PublicApi-2156-001-Move_command005
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2156-001-Delete_command006
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2156-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2156-001-RmDir_command008
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2156


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2157
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2157
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Copy files to folder where alredy exists one file from list of copied files.
//! 				Uses API elements: NewL(), SetObserver(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0,
//!					and iStatus.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!					and aSwitch=ERecurse.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Copy() return KErrAlreadyExists when trying to copy Test1.txt.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND	!AsyncError=-11	CFileMan1 Copy				PBASE-F32-FileMan-PublicApi-2157-001-Copy_command003
						OUTSTANDING
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~
	END_TEST_BLOCK
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2157-001-Delete_command004
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2157


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2158
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2158
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Move files to folder where alredy exists one file from list of moved files.
//! 				Uses API elements: NewL(), SetObserver(), Copy(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\ as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch=0.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch=0
//!					and iStatus.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0),
//!				  and {TestPath}fileman\Copy1\ as first parameter, 
//!					and aSwitch=ERecurse.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Move() return KErrAlreadyExists when trying to copy Test1.txt.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-2158-001-MkDir_command002
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2158-001-Copy_command003
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2158-001-Copy_command004
		COMMAND	!AsyncError=-11	CFileMan1 Move				PBASE-F32-FileMan-PublicApi-2158-001-Move_command005
				OUTSTANDING
		COMMAND		CFileMan1	~	
		COMMAND		RFs1			~		
	END_TEST_BLOCK
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2158-001-Delete_command006
		COMMAND		CFileMan1	Delete				PBASE-F32-FileMan-PublicApi-2158-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-2158-001-RmDir_command008
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2158


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2159
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2159
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite) test.
//!											Synchronously try to move opened file.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch = ERecurse.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Move() return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2159-001-Open_command004
		COMMAND !Error=-14		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2159-001-Move_command005
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2159-001-Delete_command006		
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2159

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2160
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2160
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Asynchronously try to move opened file.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy as first parameter, 
//!				  and {TestPath}fileman\Copy1\ as second parameter,
//!					and aSwitch = ERecurse.
//!					and iStatus.
//!				5.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Move() return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_EOverWrite
		COMMAND		RFile1		Open				PBASE-F32-FileMan-PublicApi-2160-001-Open_command004
		COMMAND !AsyncError=-14		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2160-001-Move_command005
					OUTSTANDING
		COMMAND		RFile1		Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2160-001-Delete_command006		
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2160


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2161
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2161
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Call asynchronous Copy() 3 times for one file at one time.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter,
//!					and aSwitch = 0,
//!					and iStatus.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				6.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Second and third copy calls return KErrAlreadyExists.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir		
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2161-001-Copy_command002
		COMMAND !Error=-14	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2161-001-Copy_command002
		COMMAND !Error=-14	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2161-001-Copy_command002
					OUTSTANDING
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2161-001-Delete_command003
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2161


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2162
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2162
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Call asynchronous Move() 3 times for one file at one time.
//! 				Uses API elements: NewL(), Copy(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test1.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				5.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test1.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				6.Call CFileMan::Move(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Test\Test1.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				7.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Second and third Move calls return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2162-001-Copy_command002
		COMMAND		CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2162-001-Move_command003
		COMMAND !Error=-14	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2162-001-Move_command003
		COMMAND !Error=-14	CFileMan1	Move				PBASE-F32-FileMan-PublicApi-2162-001-Move_command003
					OUTSTANDING
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2162-001-Delete_command004
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2162


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2163
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2163
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus) test.
//!											Call asynchronous Rename() 3 times for one file at one time.
//! 				Uses API elements: NewL(), Copy(), Move(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1.txt as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1_new.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				5.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1_new.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				6.Call CFileMan::Rename(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite, TRequestStatus &aStatus),
//!				  and {TestPath}fileman\Copy\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\Test1_new.txt as second parameter.
//!					and aSwitch = 0,
//!					and iStatus.
//!				7.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Second and third Rename calls return KErrInUse.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2163-001-Copy_command002
		COMMAND		CFileMan1	Rename				PBASE-F32-FileMan-PublicApi-2163-001-Rename_command003
		COMMAND !Error=-14	CFileMan1	Rename				PBASE-F32-FileMan-PublicApi-2163-001-Rename_command003
		COMMAND !Error=-14	CFileMan1	Rename				PBASE-F32-FileMan-PublicApi-2163-001-Rename_command003
					OUTSTANDING
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2163-001-Delete_command004
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2163


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2166
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2166
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManStarted() test.
//!											Return TControl::ECancel during synchronous Copy process for one file and check that this file wasn't copied.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::ECancel for Test2.txt in NotifyFileManStarted.
//!				7.Check that file Test2.txt wasn't copied.
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File Test2.txt wasn't copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2166-001-Copy_command002
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2166-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2166-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2166-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2166-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2166-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2166

START_TESTCASE			PBASE-F32-FileMan-PublicApi-2167
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2167
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManStarted() test.
//!											Return TControl::ECancel during asynchronous Copy process for one file and check that this file wasn't copied.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::ECancel for Test2.txt in NotifyFileManStarted.
//!				7.Check that file Test2.txt wasn't copied.
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File Test2.txt wasn't copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2167-001-Copy_command002
				OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2167-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2167-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2167-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2167-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2167-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~			
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2167


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2168
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2168
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManStarted() test.
//!											Return TControl::EAbort during synchronous Copy process for one file and check that copy process is aborted.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::EAbort for Test2.txt in NotifyFileManStarted.
//!				7.Check that only file Test1.txt was copied. If files copied in this order, Test1.txt, Test2.txt, Test3.txt
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Only Test1.txt was copied. Copy returns KErrCancel.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND	!Error=-3 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2168-001-Copy_command002
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2168-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2168-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2168-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2168-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2168-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2168


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2169
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2169
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManStarted() test.
//!											Return TControl::EAbort during asynchronous Copy process for one file and check that copy process is aborted.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::EAbort for Test2.txt in NotifyFileManStarted.
//!				7.Check that only file Test1.txt was copied. If files copied in this order, Test1.txt, Test2.txt, Test3.txt
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Only Test1.txt was copied. Copy returns KErrCancel.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND	!AsyncError=-3 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2169-001-Copy_command002
				OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2169-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2169-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2169-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2169-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2169-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2169


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2170
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2170
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManOperation() test.
//!											Return TControl::ECancel during synchronous Copy process for one file and check that this file wasn't copied.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::ECancel for Test2.txt in NotifyFileManOperation.
//!				7.Check that file Test2.txt wasn't copied.
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File Test2.txt wasn't copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2170-001-Copy_command002
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2170-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2170-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2170-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2170-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2170-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2170


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2171
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2171
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManOperation() test.
//!											Return TControl::ECancel during asynchronous Copy process for one file and check that this file wasn't copied.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::ECancel for Test2.txt in NotifyFileManOperation.
//!				7.Check that file Test2.txt wasn't copied.
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults File Test2.txt wasn't copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2171-001-Copy_command002
					OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2171-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2171-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2171-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2171-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2171-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2171


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2172
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2172
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManEnded() test.
//!											Return TControl::EAbort during synchronous Copy process for one file and check that copy process is aborted.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::EAbort for Test1.txt in NotifyFileManEnded.
//!				7.Check that only file Test1.txt was copied.
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Only Test1.txt was copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND	!Error=-3 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2172-001-Copy_command002
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2172-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2172-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2172-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2172-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2172-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2172


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2173
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2173
//! @SYMAPI			CFileBase
//! @SYMTestCaseDesc		Function MFileManObserver::NotifyFileManEnded() test.
//!											Return TControl::EAbort during synchronous Copy process for one file and check that copy process is aborted.
//! 				Uses API elements: NewL(), Copy(), Delete();
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!				3.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test1.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				4.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test2.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				5.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Test3.txt as first parameter, 
//!				  and {TestPath}fileman\Copy\ as second parameter,
//!					and aSwitch = 0.
//!				6.Call CFileMan::Copy(const TDesC &anOld, const TDesC &aNew, TUint aSwitch=EOverWrite),
//!				  and {TestPath}fileman\Copy\ as first parameter, 
//!				  and {TestPath}fileman\Test\ as second parameter,
//!					and aSwitch = 0,
//!					and also set to return TCOntrol::EAbort for Test2.txt in NotifyFileManEnded.
//!				7.Check that only file Test1.txt was copied.
//!				8.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Copy\* as parameter.
//!				9.Call CFileMan::Delete(const TDesC &aName, TUint aSwitch=0), 
//!				  and {TestPath}fileman\Test\* as parameter.
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults Only Test1.txt was copied.
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	RFile			RFile1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_CopyDir
		COMMAND		RFs1			MkDir				PBASE-F32-FileMan-PublicApi-MkDir_TestDir
		COMMAND		RFile1		new
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	SetObserver
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test1_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test2_txt_0
		COMMAND 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-Copy_Test3_txt_0
		COMMAND	!AsyncError=-3 	CFileMan1	Copy				PBASE-F32-FileMan-PublicApi-2173-001-Copy_command002
				OUTSTANDING
		COMMAND 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2173-001-Open_command003
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2173-001-Open_command004
		COMMAND 	RFile1		Close
		COMMAND	!Error=-1 	RFile1		Open				PBASE-F32-FileMan-PublicApi-2173-001-Open_command005
		COMMAND 	RFile1		Close
		COMMAND		CFileMan1	~
		COMMAND		RFile1		~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs				RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL				PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2173-001-Delete_command006
		COMMAND		CFileMan1	Delete			PBASE-F32-FileMan-PublicApi-2173-001-Delete_command007
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_CopyDir
		COMMAND		RFs1			RmDir				PBASE-F32-FileMan-PublicApi-RmDir_TestDir
		COMMAND		CFileMan1	~
		COMMAND		RFs1			~		
	END_TEST_BLOCK
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2173


START_TESTCASE			PBASE-F32-FileMan-PublicApi-2999
//! @SYMTestCaseID		PBASE-F32-FileMan-PublicApi-2999
//! @SYMAPI			CFileMan
//! @SYMTestCaseDesc		Clenup the copied testdata.
//! @SYMTestActions		1.Create a RFs session and call it's Connect() function.
//!				2.Call CFileMan::NewL(RFs &aFs) and connected file server session as parameter.
//!             3.Call CFileMan::Delete() to delete all the files copied .
//! @SYMTestStatus		Implemented
//! @SYMTestPriority		Critical
//! @SYMTestExpectedResults	Remove the testdata copied from particular directory
//! @SYMTestType		CIT
	START_TEST_BLOCK	50	T_SfSrv	\base\PBASE-F32-FileMan-PublicApi.ini 
		CREATE_OBJECT	RFs		RFs1
		CREATE_OBJECT	CFileMan	CFileMan1
		COMMAND		RFs1			new		
		COMMAND		RFs1			Connect
		COMMAND		CFileMan1	NewL		PBASE-F32-FileMan-PublicApi-NewL
		COMMAND		CFileMan1	Delete		PBASE-F32-FileMan-PublicApi-Delete-Uninstall
		COMMAND		RFs1			RmDir 	PBASE-F32-FileMan-PublicApi-RmDir-Uninstall
		COMMAND		CFileMan1	~
		COMMAND		RFs1		~		
	END_TEST_BLOCK	
END_TESTCASE			PBASE-F32-FileMan-PublicApi-2999
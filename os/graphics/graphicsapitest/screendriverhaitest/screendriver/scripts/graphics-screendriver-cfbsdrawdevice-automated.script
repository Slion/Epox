//
// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName graphics-screendriver-cfbsdrawdevice-automated
//! @SYMScriptTestEnvironment This test script requires a basic ROM.
// 
// Tests all public elements of the CFbsDrawDevice
// classes as a means of confidence that the APIs work as expected.
// 
// The purpose is to provide a regression test suite of PublishedAll
// APIs for: CFbsDrawDevice
// The tests are fully automated.
//



LOAD_SUITE t_screendriver





START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0001

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0001
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModePEN and Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti(drawMode = EDrawModePEN; numRect = 9; delay=100000)
//!                8. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0001-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0001-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0001-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0001-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0001




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0002

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0002
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModePEN and Display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModePEN; delay=100000)
//!                8. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error. If the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0002-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0002-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0002-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0002-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0002




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0003

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0003
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeAND and Display Mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeAND; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0003-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0003-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0003-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0003-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0003




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0004

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0004
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeAND and Display Mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeAND; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0004-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0004-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0004-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0004-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0004




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0005

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0005
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeOR and Display mode to EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeOR; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0005-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0005-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0005-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0005-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0005




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0006

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0006
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeOR and Display mode to EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeOR; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0006-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0006-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0006-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0006-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0006




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0007

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0007
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeNOTSCREEN and Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeNOTSCREEN; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error.Orientation is set properly without error. The given color is written to the specified  rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0007-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0007-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0007-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0007-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0007




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0008

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0008
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModeNOTSCREEN and Display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeNOTSCREEN; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0008-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0008-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0008-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0008-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0008




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0009

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0009
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeNOTPEN with display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeNOTPEN; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specification  rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0009-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0009-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0009-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0009-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0009




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0010

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0010
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModeNOTPEN with display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeNOTPEN; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specification  rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0010-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0010-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0010-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0010-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0010




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0011

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0011
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeXOR with Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeXOR; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0011-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0011-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0011-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0011-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0011




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0012

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0012
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModeXOR with Display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (numRect = 9; drawMode = EDrawModeXOR; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0012-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0012-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0012-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0012-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0012




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0013

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0013
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModePEN and Display mode  EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (drawMode = EDrawModePEN; numRect = 9; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error. if the Display mode is not supported ,module should leave with KErrorNot. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0013-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0013-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0013-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0013-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0013




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0014

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0014
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeAND and Display Mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0014-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0014-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0014-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0014-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0014




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0015

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0015
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeOR and Display mode to EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (drawMode = EDrawModeOR; numRect = 9; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0015-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0015-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0015-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0015-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0015




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0016

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0016
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with drawmode EDrawModeNOTSCREEN and Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (drawMode = EDrawModeNOTSCREEN; numRect = 9; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0016-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0016-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0016-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0016-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0016




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0017

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0017
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModeNOTPEN with display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (drawMode = EDrawModeNOTPEN; numRect = 9; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specification  rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0017-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0017-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0017-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0017-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0017




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0018

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0018
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbMulti(TInt aX, TInt aY, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbMulti with draw mode EDrawModeXOR with Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBMulti (drawMode = EDrawModeXOR; numRect = 9; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified rectangle on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0018-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0018-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0018-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgbMulti			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0018-0001-WriteRgbMulti_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0018




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0019

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0019
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgb(TInt aX, TInt aY, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgb Functionality with Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGB (drawMode = EDrawModeAND; numRect = 0; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified location on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0019-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0019-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0019-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgb			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0019-0001-WriteRgb_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0019




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0020

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0020
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgb(TInt aX, TInt aY, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgb Functionality with Display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGB (drawMode = EDrawModeAND; numRect = 0; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified location on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0020-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0020-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0020-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgb			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0020-0001-WriteRgb_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0020




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0021

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0021
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgb(TInt aX, TInt aY, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgb Functionality with Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGB (drawMode = EDrawModeAND; numRect = 0; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The given color is written to the specified location on display.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0021-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0021-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0021-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRgb			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0021-0001-WriteRgb_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0021




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0022

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0022
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeOR and Display mode as EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeOR; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0022-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0022-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0022-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0022-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0022




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0023

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0023
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with draw mode EDrawModeOR and Display mode as EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeOR; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0023-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0023-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0023-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0023-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0023




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0024

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0024
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModePEN with display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModePEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0024-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0024-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0024-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0024-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0024




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0025

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0025
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeNOTSCREEN and display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeNOTSCREEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0025-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0025-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0025-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0025-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0025




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0026

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0026
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModePEN with display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModePEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0026-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0026-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0026-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0026-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0026




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0027

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0027
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeNOTSCREEN and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeNOTSCREEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0027-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0027-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0027-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0027-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0027




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0028

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0028
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeAND and display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeAND; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error. If the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0028-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0028-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0028-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0028-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0028




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0029

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0029
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeNOTPEN and display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeNOTPEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0029-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0029-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0029-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0029-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0029




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0030

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0030
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with draw mode EDrawModeAND and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeAND; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0030-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0030-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0030-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0030-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0030




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0031

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0031
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with draw mode EDrawModeNOTPEN and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeNOTPEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MA without any Error .if the Display mode is not supported module should leave with proper error
//!                Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0031-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0031-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0031-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0031-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0031




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0032

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0032
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeXOR and Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeXOR; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0032-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0032-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0032-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0032-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0032




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0033

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0033
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeXOR and Display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeXOR; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0033-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0033-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0033-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0033-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0033




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0034

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0034
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with draw mode EDrawModePEN with display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModePEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0034-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0034-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0034-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0034-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0034




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0035

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0035
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeAND and display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeAND; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0035-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0035-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0035-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0035-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0035




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0036

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0036
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with draw mode EDrawModeOR and Display mode as EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeOR; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0036-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0036-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0036-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0036-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0036




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0037

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0037
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeNOTSCREEN and display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeNOTSCREEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0037-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0037-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0037-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0037-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0037




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0038

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0038
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with draw mode EDrawModeNOTPEN and display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeNOTPEN; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0038-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0038-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0038-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0038-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0038




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0039

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0039
//!@SYMAPI
//!                CFbsDrawDevice::WriteLine(TInt aX, TInt aY, TInt aLength, TUint32 {ptr}aBuffer, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteLine with drawmode EDrawModeXOR and Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteLine (drawMode = EDrawModeXOR; numRect = 9; backColor = {COLOR,RgbBlack}; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0039-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0039-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0039-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0039-0001-WriteLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0039




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0040

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0040
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinary(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinay with display mode set to Ecolor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. SetShadowMode (shadowMode = EFade)
//!                8. Call WriteBinary (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                9. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. The operation is performed without any errors.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0040-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0040-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0040-0001-SetOrientation_command06
		COMMAND		scrndrv		SetShadowMode			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0040-0001-SetShadowMode_command07
		COMMAND		scrndrv		WriteBinary			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0040-0001-WriteBinary_command08
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0040




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0041

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0041
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinary(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinay with display mode set to Ecolor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. SetShadowMode (shadowMode = EFade)
//!                8. Call WriteBinary (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                9. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. The operation is performed without any errors.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0041-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0041-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0041-0001-SetOrientation_command06
		COMMAND		scrndrv		SetShadowMode			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0041-0001-SetShadowMode_command07
		COMMAND		scrndrv		WriteBinary			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0041-0001-WriteBinary_command08
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0041




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0042

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0042
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinary(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinay with display mode set to EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. SetShadowMode (shadowMode = EFade)
//!                8. Call WriteBinary (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                9. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. The operation is performed without any errors.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0042-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0042-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0042-0001-SetOrientation_command06
		COMMAND		scrndrv		SetShadowMode			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0042-0001-SetShadowMode_command07
		COMMAND		scrndrv		WriteBinary			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0042-0001-WriteBinary_command08
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0042




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0043

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0043
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeXOR and display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeXOR; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0043-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0043-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0043-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0043-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0043




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0044

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0044
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeAND and Display mode to EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeAND; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0044-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0044-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0044-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0044-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0044




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0045

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0045
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeOR and Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeOR; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0045-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0045-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0045-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0045-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0045




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0046

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0046
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeNOTPEN and display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeNOTPEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0046-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0046-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0046-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0046-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0046




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0047

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0047
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModePEN and Display mode to EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModePEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .If the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0047-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0047-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0047-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0047-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0047




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0048

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0048
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModePEN and Display mode to EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModePEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error. If the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0048-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0048-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0048-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0048-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0048




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0049

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0049
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeXOR and Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeXOR; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error. If the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0049-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0049-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0049-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0049-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0049




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0050

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0050
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeAND and Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeAND; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0050-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0050-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0050-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0050-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0050




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0051

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0051
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeNOTSCREEN and Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeNOTSCREEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0051-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0051-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0051-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0051-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0051




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0052

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0052
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeNOTPEN and display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeNOTPEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0052-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0052-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0052-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0052-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0052




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0053

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0053
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeXOR and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeXOR; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0053-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0053-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0053-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0053-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0053




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0054

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0054
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with draw mode EDrawModeAND and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeAND; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0054-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0054-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0054-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0054-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0054




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0055

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0055
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeNOTSCREEN and display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeNOTSCREEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error. If the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0055-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0055-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0055-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0055-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0055




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0056

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0056
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeNOTSCREEN and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeNOTSCREEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error
//!                Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0056-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0056-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0056-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0056-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0056




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0057

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0057
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with draw mode EDrawModeNOTPEN and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeNOTPEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0057-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0057-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0057-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0057-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0057




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0058

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0058
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeOR and display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeOR; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0058-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0058-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0058-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0058-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0058




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0059

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0059
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModeOR and display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModeOR; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Depending on shadow/fade flag the pixel at given location is updated.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0059-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0059-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0059-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0059-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0059




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0060

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0060
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLine(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aLength, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLine with drawmode EDrawModePEN and display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteBinaryLine (drawMode = EDrawModePEN; numRect = 0; backColor = {COLOR,RgbWhite}; shadowMode = EFade; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to Ecolor16MU without any Error .if the Display mode is not supported module should leave with proper error. The operation is performed without any errors.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0060-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0060-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0060-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteBinaryLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0060-0001-WriteBinaryLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0060




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0061

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0061
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLineVertical(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode, TBool aUp)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLineVertical with display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. SetShadowMode (shadowMode = EFade)
//!                8. Call WriteBinaryLineVertical (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                9. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Line is written down wards(increasimg Y )or upwards(decreasing Y) depending on the Flag.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0061-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0061-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0061-0001-SetOrientation_command06
		COMMAND		scrndrv		SetShadowMode			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0061-0001-SetShadowMode_command07
		COMMAND		scrndrv		WriteBinaryLineVertical			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0061-0001-WriteBinaryLineVertical_command08
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0061




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0062

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0062
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLineVertical(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode, TBool aUp)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLineVertical with display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. SetShadowMode (shadowMode = EFade)
//!                8. Call WriteBinaryLineVertical (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                9. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Line is written downwards(increasimg Y )or upwards(decreasing Y) depending on the Flag.
//!                
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0062-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0062-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0062-0001-SetOrientation_command06
		COMMAND		scrndrv		SetShadowMode			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0062-0001-SetShadowMode_command07
		COMMAND		scrndrv		WriteBinaryLineVertical			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0062-0001-WriteBinaryLineVertical_command08
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0062




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0063

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0063
//!@SYMAPI
//!                CFbsDrawDevice::WriteBinaryLineVertical(TInt aX, TInt aY, TUint32 {ptr}aBuffer, TInt aHeight, TRgb aColor, CGraphicsContext::TDrawMode aDrawMode, TBool aUp)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteBinaryLineVertical with display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. SetShadowMode (shadowMode = EFade)
//!                8. Call WriteBinaryLineVertical (drawMode = EDrawModeAND; numRect = 9; delay=100000)
//!                9. Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Line is written down wards(increasimg Y )or upwards(decreasing Y) depending on the Flag.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0063-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0063-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0063-0001-SetOrientation_command06
		COMMAND		scrndrv		SetShadowMode			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0063-0001-SetShadowMode_command07
		COMMAND		scrndrv		WriteBinaryLineVertical			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0063-0001-WriteBinaryLineVertical_command08
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0063




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0064

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0064
//!@SYMAPI
//!                CFbsDrawDevice::ShadowArea(const TRect {ref});
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify ShadowArea with Display mode set to EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call ShadowArea (delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. The Area with rectangle size is shadow processed.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0064-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0064-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0064-0001-SetOrientation_command06
		COMMAND		scrndrv		ShadowArea			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0064-0001-ShadowArea_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0064




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0065

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0065
//!@SYMAPI
//!                CFbsDrawDevice::ShadowArea(const TRect {ref});
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify ShadowArea with Display mode set to EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call ShadowArea (delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. The Area with rectangle size is shadow processed.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0065-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0065-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0065-0001-SetOrientation_command06
		COMMAND		scrndrv		ShadowArea			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0065-0001-ShadowArea_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0065




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0066

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0066
//!@SYMAPI
//!                CFbsDrawDevice::ShadowArea(const TRect {ref});
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify ShadowArea with Display mode set to EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call ShadowArea (delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. The Area with rectangle size is shadow processed.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0066-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0066-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0066-0001-SetOrientation_command06
		COMMAND		scrndrv		ShadowArea			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0066-0001-ShadowArea_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0066




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0067

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0067
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbAlphaLine(TInt aX, TInt aY, TInt aLength, TUint8 {ptr}aRgbBuffer, TUint8 {ptr}aMaskBuffer)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbAlphaLine with  Display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBAlphaLine (drawMode = EDrawModeAND; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The calculated alpha blended pixel is written to the destination that is screen or BitMap.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0067-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0067-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0067-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRGBAlphaLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0067-0001-WriteRGBAlphaLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0067




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0068

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0068
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbAlphaLine(TInt aX, TInt aY, TInt aLength, TUint8 {ptr}aRgbBuffer, TUint8 {ptr}aMaskBuffer)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbAlphaLine with Display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBAlphaLine (drawMode = EDrawModeAND; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The calculated alpha blended pixel is written to the destination that is screen or BitMap.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0068-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0068-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0068-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRGBAlphaLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0068-0001-WriteRGBAlphaLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0068




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0069

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0069
//!@SYMAPI
//!                CFbsDrawDevice::WriteRgbAlphaLine(TInt aX, TInt aY, TInt aLength, TUint8 {ptr}aRgbBuffer, TUint8 {ptr}aMaskBuffer)=0;
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify WriteRgbAlphaLine with Display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call WriteRGBAlphaLine (drawMode = EDrawModeAND; delay=100000)
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. Orientation is set properly without error. The calculated alpha blended pixel is written to the destination that is screen or BitMap.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0069-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0069-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0069-0001-SetOrientation_command06
		COMMAND		scrndrv		WriteRGBAlphaLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0069-0001-WriteRGBAlphaLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0069




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0070

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0070
//!@SYMAPI
//!                CFbsDrawDevice::ReadLine(TInt aX, TInt aY, TInt aLength, TAny {ptr}aBuffer, TDisplayMode aDispMode)
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify ReadLine with display mode EColor64K
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor64K)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call ReadLine (backColor = {COLOR,RgbBlack})
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor64K without any Error .if the Display mode is not supported module should leave with proper error. A Line of given length is read in to the buffer.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0070-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0070-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0070-0001-SetOrientation_command06
		COMMAND		scrndrv		ReadLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0070-0001-ReadLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0070




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0071

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0071
//!@SYMAPI
//!                CFbsDrawDevice::ReadLine(TInt aX, TInt aY, TInt aLength, TAny {ptr}aBuffer, TDisplayMode aDispMode)
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify ReadLine with display mode EColor16MA
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MA)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call ReadLine (backColor = {COLOR,RgbBlack})
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MA without any Error .if the Display mode is not supported module should leave with proper error. A Line of given length is read in to the buffer.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0071-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0071-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0071-0001-SetOrientation_command06
		COMMAND		scrndrv		ReadLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0071-0001-ReadLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0071




START_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0072

//!@SYMTestCaseID		GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0072
//!@SYMAPI
//!                CFbsDrawDevice::ReadLine(TInt aX, TInt aY, TInt aLength, TAny {ptr}aBuffer, TDisplayMode aDispMode)
//!@SYMAuthor			ddamian
//!@SYMCreationDate		5/2/2008 
//!@SYMTestCaseDesc		Verify ReadLine with display mode EColor16MU
//!@SYMTestActions
//!                1. Create Display (displayMode = EColor16MU)
//!                2. Initialize Screen
//!                3. Set Display Mode
//!                4. Set AutoUpdate (autoUpdate = TRUE)
//!                5. Get available Orientations
//!                6. SetOrientation (orientationMode = EOrientationNormal)
//!                7. Call ReadLine (backColor = {COLOR,RgbBlack})
//!                8.- Destroy screen instance
//!@SYMTestStatus		Verified
//!@SYMTestPriority		Normal
//!@SYMTestExpectedResults
//!                Display mode is set to EColor16MU without any Error .if the Display mode is not supported module should leave with proper error. A Line of given length is read in to the buffer.
//!@SYMTestType			CIT

	START_TEST_BLOCK	100	t_screendriver	\graphics\graphics-screendriver-cfbsdrawdevice-automated.ini
		CREATE_OBJECT	CFbsDrawDevice		scrndrv
		COMMAND		scrndrv		NewScreenDeviceL			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0072-0001-NewScreenDeviceL_command01
		COMMAND		scrndrv		InitScreen
		COMMAND		scrndrv		SetDisplayMode
		COMMAND		scrndrv		SetAutoUpdate			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0072-0001-SetAutoUpdate_command04
		COMMAND		scrndrv		OrientationsAvailable
		COMMAND		scrndrv		SetOrientation			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0072-0001-SetOrientation_command06
		COMMAND		scrndrv		ReadLine			GRAPHICS-SCREENDRIVER-CFbsDrawDevice-0072-0001-ReadLine_command07
		COMMAND		scrndrv		~
	END_TEST_BLOCK
END_TESTCASE GRAPHICS-SCREENDRIVER-CFBSDRAWDEVICE-AUTOMATED-0072

DELAY 10000
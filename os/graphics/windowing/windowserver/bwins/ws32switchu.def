EXPORTS
	call_vector_1 @ 1 NONAME ; public: __thiscall CWindowGc::CWindowGc(class CWsScreenDevice *)
	call_vector_2 @ 2 NONAME ; public: __thiscall CWsBitmap::CWsBitmap(class RWsSession &)
	call_vector_3 @ 3 NONAME ; public: __thiscall CWsBitmap::CWsBitmap(void)
	call_vector_4 @ 4 NONAME ; public: __thiscall CWsScreenDevice::CWsScreenDevice(class RWsSession &)
	call_vector_5 @ 5 NONAME ; public: __thiscall CWsScreenDevice::CWsScreenDevice(void)
	call_vector_6 @ 6 NONAME ; protected: __thiscall RAnim::RAnim(class RAnimDll &)
	call_vector_7 @ 7 NONAME ; protected: __thiscall RAnim::RAnim(void)
	call_vector_8 @ 8 NONAME ; public: __thiscall RAnimDll::RAnimDll(class RWsSession &)
	call_vector_9 @ 9 NONAME ; public: __thiscall RAnimDll::RAnimDll(void)
	call_vector_10 @ 10 NONAME ; public: __thiscall RBackedUpWindow::RBackedUpWindow(class RWsSession &)
	call_vector_11 @ 11 NONAME ; public: __thiscall RBackedUpWindow::RBackedUpWindow(void)
	call_vector_12 @ 12 NONAME ; public: __thiscall RBlankWindow::RBlankWindow(class RWsSession &)
	call_vector_13 @ 13 NONAME ; public: __thiscall RBlankWindow::RBlankWindow(void)
	call_vector_14 @ 14 NONAME ; public: __thiscall RWindow::RWindow(class RWsSession &)
	call_vector_15 @ 15 NONAME ; public: __thiscall RWindow::RWindow(void)
	call_vector_16 @ 16 NONAME ; public: __thiscall RWindowGroup::RWindowGroup(class RWsSession &)
	call_vector_17 @ 17 NONAME ; public: __thiscall RWindowGroup::RWindowGroup(void)
	call_vector_18 @ 18 NONAME ; public: __thiscall RWsPointerCursor::RWsPointerCursor(class RWsSession &)
	call_vector_19 @ 19 NONAME ; public: __thiscall RWsPointerCursor::RWsPointerCursor(void)
	call_vector_20 @ 20 NONAME ; public: __thiscall RWsSession::RWsSession(void)
	call_vector_21 @ 21 NONAME ; public: __thiscall RWsSprite::RWsSprite(class RWsSession &)
	call_vector_22 @ 22 NONAME ; public: __thiscall RWsSprite::RWsSprite(void)
	call_vector_23 @ 23 NONAME ; protected: __thiscall RWsSpriteBase::RWsSpriteBase(class RWsSession &)
	call_vector_24 @ 24 NONAME ; protected: __thiscall RWsSpriteBase::RWsSpriteBase(void)
	call_vector_25 @ 25 NONAME ; public: virtual __thiscall CWindowGc::~CWindowGc(void)
	call_vector_26 @ 26 NONAME ; public: virtual __thiscall CWsBitmap::~CWsBitmap(void)
	call_vector_27 @ 27 NONAME ; public: virtual __thiscall CWsScreenDevice::~CWsScreenDevice(void)
	call_vector_28 @ 28 NONAME ; public: virtual __thiscall RAnim::~RAnim(void)
	call_vector_29 @ 29 NONAME ; public: virtual __thiscall RAnimDll::~RAnimDll(void)
	call_vector_30 @ 30 NONAME ; public: virtual void __thiscall CWindowGc::Activate(class RDrawableWindow &)
	call_vector_31 @ 31 NONAME ; public: void __thiscall RWindowBase::Activate(void)
	call_vector_32 @ 32 NONAME ; public: int __thiscall RWsSpriteBase::Activate(void)
	call_vector_33 @ 33 NONAME ; public: virtual int __thiscall CWsScreenDevice::AddFile(class TDesC16 const &,int &)
	call_vector_34 @ 34 NONAME ; public: int __thiscall RWindowBase::AddKeyRect(class TRect const &,int,int)
	call_vector_35 @ 35 NONAME ; public: int __thiscall RWindowGroup::AddPriorityKey(unsigned int,unsigned int,unsigned int)
	call_vector_36 @ 36 NONAME ; public: int __thiscall RWindowBase::AllocPointerMoveBuffer(int,unsigned int)
	call_vector_37 @ 37 NONAME ; public: int __thiscall RWsSpriteBase::AppendMember(struct TSpriteMember const &)
	call_vector_38 @ 38 NONAME ; public: void __thiscall RWindowGroup::AutoForeground(int)
	call_vector_39 @ 39 NONAME ; public: void __thiscall RWindow::BeginRedraw(class TRect const &)
	call_vector_40 @ 40 NONAME ; public: void __thiscall RWindow::BeginRedraw(void)
	call_vector_41 @ 41 NONAME ; public: virtual void __thiscall CWindowGc::BitBlt(class TPoint const &,class CFbsBitmap const *)
	call_vector_42 @ 42 NONAME ; public: virtual void __thiscall CWindowGc::BitBlt(class TPoint const &,class CFbsBitmap const *,class TRect const &)
	call_vector_43 @ 43 NONAME ; public: virtual void __thiscall CWindowGc::BitBlt(class TPoint const &,class CWsBitmap const *)
	call_vector_44 @ 44 NONAME ; public: virtual void __thiscall CWindowGc::BitBlt(class TPoint const &,class CWsBitmap const *,class TRect const &)
	call_vector_45 @ 45 NONAME ; public: virtual void __thiscall CWindowGc::BitBltMasked(class TPoint const &,class CFbsBitmap const *,class TRect const &,class CFbsBitmap const *,int)
	call_vector_46 @ 46 NONAME ; public: virtual void __thiscall CWindowGc::BitBltMasked(class TPoint const &,class CWsBitmap const *,class TRect const &,class CWsBitmap const *,int)
	call_vector_47 @ 47 NONAME ; int RBackedUpWindow::BitmapHandle(void) const
	call_vector_48 @ 48 NONAME ; public: void __thiscall RWindowGroup::CancelCaptureKey(long)
	call_vector_49 @ 49 NONAME ; public: void __thiscall RWindowGroup::CancelCaptureKeyUpAndDowns(long)
	call_vector_50 @ 50 NONAME ; public: virtual void __thiscall CWindowGc::CancelClippingRect(void)
	call_vector_51 @ 51 NONAME ; public: virtual void __thiscall CWindowGc::CancelClippingRegion(void)
	call_vector_52 @ 52 NONAME ; public: void __thiscall RWindowBase::CancelPointerRepeatEventRequest(void)
	call_vector_53 @ 53 NONAME ; public: void __thiscall RWindowGroup::CancelTextCursor(void)
	call_vector_54 @ 54 NONAME ; public: long __thiscall RWindowGroup::CaptureKey(unsigned int,unsigned int,unsigned int)
	call_vector_55 @ 55 NONAME ; public: long __thiscall RWindowGroup::CaptureKeyUpAndDowns(unsigned int,unsigned int,unsigned int)
	call_vector_56 @ 56 NONAME ; public: unsigned long __thiscall RWindowTreeNode::Child(void)const 
	call_vector_57 @ 57 NONAME ; public: void __thiscall RWindowBase::ClaimPointerGrab(int)
	call_vector_58 @ 58 NONAME ; public: int __thiscall RWsSession::ClaimSystemPointerCursorList(void)
	call_vector_59 @ 59 NONAME ; public: virtual void __thiscall CWindowGc::Clear(class TRect const &)
	call_vector_60 @ 60 NONAME ; public: virtual void __thiscall CWindowGc::Clear(void)
	call_vector_61 @ 61 NONAME ; public: int __thiscall RWsSession::ClearHotKeys(enum THotKey)
	call_vector_62 @ 62 NONAME ; public: void __thiscall RWsSession::ClearSystemPointerCursor(int)
	call_vector_63 @ 63 NONAME ; public: virtual void __thiscall RAnim::Close(void)
	call_vector_64 @ 64 NONAME ; public: virtual void __thiscall RAnimDll::Close(void)
	call_vector_65 @ 65 NONAME ; public: void __thiscall RWindowTreeNode::Close(void)
	call_vector_66 @ 66 NONAME ; public: void __thiscall RWsSpriteBase::Close(void)
	call_vector_67 @ 67 NONAME ; protected: void __thiscall RAnim::Command(int)
	call_vector_68 @ 68 NONAME ; protected: void __thiscall RAnim::Command(int,class TPtrC8 const &)
	call_vector_69 @ 69 NONAME ; protected: int __thiscall RAnim::CommandReply(int)
	call_vector_70 @ 70 NONAME ; protected: int __thiscall RAnim::CommandReply(int,class TPtrC8 const &)
	call_vector_71 @ 71 NONAME ; public: void __thiscall RWsSession::ComputeMode(enum RWsSession::TComputeMode)
	call_vector_72 @ 72 NONAME ; public: int __thiscall RWsSession::Connect(void)
	call_vector_73 @ 73 NONAME ; public: virtual int __thiscall CWindowGc::Construct(void)
	call_vector_74 @ 74 NONAME ; public: int __thiscall CWsScreenDevice::Construct(void)
	call_vector_75 @ 75 NONAME ; protected: int __thiscall RAnim::Construct(class RWindowBase const &,int,class TDesC8 const &)
	call_vector_76 @ 76 NONAME ; public: int __thiscall RBackedUpWindow::Construct(class RWindowTreeNode const &,enum TDisplayMode,unsigned long)
	call_vector_77 @ 77 NONAME ; public: int __thiscall RBlankWindow::Construct(class RWindowTreeNode const &,unsigned long)
	call_vector_78 @ 78 NONAME ; public: int __thiscall RWindow::Construct(class RWindowTreeNode const &,unsigned long)
	call_vector_79 @ 79 NONAME ; public: int __thiscall RWindowGroup::Construct(unsigned long)
	call_vector_80 @ 80 NONAME ; public: int __thiscall RWindowGroup::Construct(unsigned long,int)
	call_vector_81 @ 81 NONAME ; public: int __thiscall RWsPointerCursor::Construct(int)
	call_vector_82 @ 82 NONAME ; public: int __thiscall RWsSprite::Construct(class RWindowTreeNode &,class TPoint const &,int)
	call_vector_83 @ 83 NONAME ; public: virtual void __thiscall CWindowGc::CopyRect(class TPoint const &,class TRect const &)
	call_vector_84 @ 84 NONAME ; public: int __thiscall CWsScreenDevice::CopyScreenToBitmap(class CFbsBitmap const *)const 
	call_vector_85 @ 85 NONAME ; public: int __thiscall CWsScreenDevice::CopyScreenToBitmap(class CFbsBitmap const *,class TRect const &)const 
	call_vector_86 @ 86 NONAME ; public: int __thiscall CWsBitmap::Create(class TSize const &,enum TDisplayMode)
	call_vector_87 @ 87 NONAME ; public: virtual int __thiscall CWsScreenDevice::CreateContext(class CGraphicsContext * &)
	call_vector_88 @ 88 NONAME ; public: virtual void __thiscall CWindowGc::Deactivate(void)
	call_vector_89 @ 89 NONAME ; public: void __thiscall RWindowGroup::DefaultOwningWindow(void)
	call_vector_90 @ 90 NONAME ; public: void __thiscall RAnim::Destroy(void)
	call_vector_91 @ 91 NONAME ; public: void __thiscall RAnimDll::Destroy(void)
	call_vector_92 @ 92 NONAME ; public: void __thiscall RWindowTreeNode::Destroy(void)
	call_vector_93 @ 93 NONAME ; public: virtual class CGraphicsDevice * __thiscall CWindowGc::Device(void)const 
	call_vector_94 @ 94 NONAME ; public: void __thiscall RWindowTreeNode::DisableGroupChangeEvents(void)
	call_vector_95 @ 95 NONAME ; public: void __thiscall RWindowGroup::DisableKeyClick(int)
	call_vector_96 @ 96 NONAME ; public: void __thiscall RWindowTreeNode::DisableModifierChangedEvents(void)
	call_vector_97 @ 97 NONAME ; public: void __thiscall RWindowTreeNode::DisableOnEvents(void)
	call_vector_98 @ 98 NONAME ; public: void __thiscall RWindowTreeNode::DisableErrorMessages(void)
	call_vector_99 @ 99 NONAME ; public: void __thiscall RWindowBase::DisablePointerMoveBuffer(void)
	call_vector_100 @ 100 NONAME ; public: virtual void __thiscall CWindowGc::DiscardBrushPattern(void)
	call_vector_101 @ 101 NONAME ; public: virtual void __thiscall CWindowGc::DiscardFont(void)
	call_vector_102 @ 102 NONAME ; public: void __thiscall RWindowBase::DiscardPointerMoveBuffer(void)
	call_vector_103 @ 103 NONAME ; public: void __thiscall RWsSession::Close(void)
	call_vector_104 @ 104 NONAME ; public: virtual enum TDisplayMode  __thiscall CWsScreenDevice::DisplayMode(void)const 
	call_vector_105 @ 105 NONAME ; public: virtual void __thiscall CWindowGc::DrawArc(class TRect const &,class TPoint const &,class TPoint const &)
	call_vector_106 @ 106 NONAME ; public: virtual void __thiscall CWindowGc::DrawBitmap(class TPoint const &,class CFbsBitmap const *)
	call_vector_107 @ 107 NONAME ; public: virtual void __thiscall CWindowGc::DrawBitmap(class TRect const &,class CFbsBitmap const *,class TRect const &)
	call_vector_108 @ 108 NONAME ; public: virtual void __thiscall CWindowGc::DrawBitmap(class TRect const &,class CFbsBitmap const *)
	call_vector_109 @ 109 NONAME ; public: virtual void __thiscall CWindowGc::DrawEllipse(class TRect const &)
	call_vector_110 @ 110 NONAME ; public: virtual void __thiscall CWindowGc::DrawLine(class TPoint const &,class TPoint const &)
	call_vector_111 @ 111 NONAME ; public: virtual void __thiscall CWindowGc::DrawLineBy(class TPoint const &)
	call_vector_112 @ 112 NONAME ; public: virtual void __thiscall CWindowGc::DrawLineTo(class TPoint const &)
	call_vector_113 @ 113 NONAME ; public: virtual void __thiscall CWindowGc::DrawPie(class TRect const &,class TPoint const &,class TPoint const &)
	call_vector_114 @ 114 NONAME ; public: virtual void __thiscall CWindowGc::DrawPolyLine(class CArrayFix<class TPoint> const *)
	call_vector_115 @ 115 NONAME ; public: virtual void __thiscall CWindowGc::DrawPolyLine(class TPoint const *,int)
	call_vector_116 @ 116 NONAME ; public: virtual int __thiscall CWindowGc::DrawPolygon(class CArrayFix<class TPoint> const *,enum CGraphicsContext::TFillRule)
	call_vector_117 @ 117 NONAME ; public: virtual int __thiscall CWindowGc::DrawPolygon(class TPoint const *,int,enum CGraphicsContext::TFillRule)
	call_vector_118 @ 118 NONAME ; public: virtual void __thiscall CWindowGc::DrawRect(class TRect const &)
	call_vector_119 @ 119 NONAME ; public: virtual void __thiscall CWindowGc::DrawRoundRect(class TRect const &,class TSize const &)
	call_vector_120 @ 120 NONAME ; public: virtual void __thiscall CWindowGc::DrawText(class TDesC16 const &,class TPoint const &)
	call_vector_121 @ 121 NONAME ; public: virtual void __thiscall CWindowGc::DrawText(class TDesC16 const &,class TRect const &,int,enum CGraphicsContext::TTextAlign,int)
	call_vector_122 @ 122 NONAME ; public: virtual void __thiscall CWindowGc::DrawTextVertical(class TDesC16 const &,class TPoint const &,int)
	call_vector_123 @ 123 NONAME ; public: virtual void __thiscall CWindowGc::DrawTextVertical(class TDesC16 const &,class TRect const &,int,int,enum CGraphicsContext::TTextAlign,int)
	call_vector_124 @ 124 NONAME ; public: int __thiscall CWsBitmap::Duplicate(int)
	call_vector_125 @ 125 NONAME ; public: void __thiscall RWindowBase::EnableBackup(unsigned int)
	call_vector_126 @ 126 NONAME ; public: int __thiscall RWindowTreeNode::EnableGroupChangeEvents(void)
	call_vector_127 @ 127 NONAME ; public: int __thiscall RWindowTreeNode::EnableModifierChangedEvents(unsigned int,enum TEventControl)
	call_vector_128 @ 128 NONAME ; public: int __thiscall RWindowTreeNode::EnableOnEvents(enum TEventControl)
	call_vector_129 @ 129 NONAME ; public: int __thiscall RWindowTreeNode::EnableErrorMessages(enum TEventControl)
	call_vector_130 @ 130 NONAME ; public: void __thiscall RWindowBase::EnablePointerMoveBuffer(void)
	call_vector_131 @ 131 NONAME ; public: void __thiscall RWindowGroup::EnableReceiptOfFocus(int)
	call_vector_132 @ 132 NONAME ; public: void __thiscall RWindow::EndRedraw(void)
	call_vector_133 @ 133 NONAME ; public: void __thiscall RWsSession::EventReady(class TRequestStatus *)
	call_vector_134 @ 134 NONAME ; public: void __thiscall RWsSession::EventReadyCancel(void)
	call_vector_135 @ 135 NONAME ; int RWsSession::FetchMessage(class TUid &, class TPtr8 &, class TWsEvent const &) const
	call_vector_136 @ 136 NONAME ; int RWsSession::FindWindowGroupIdentifier(int, class TDesC16 const &, int) const
	call_vector_137 @ 137 NONAME ; int RWsSession::FindWindowGroupIdentifier(int, class TThreadId) const
	call_vector_138 @ 138 NONAME ; public: void __thiscall RWsSession::Flush(void)
	call_vector_139 @ 139 NONAME ; public: virtual int __thiscall CWsScreenDevice::FontHeightInPixels(int,int)const 
	call_vector_140 @ 140 NONAME ; public: virtual int __thiscall CWsScreenDevice::FontHeightInTwips(int,int)const 
	call_vector_141 @ 141 NONAME ; public: void __thiscall RWindowBase::FreePointerMoveBuffer(void)
	call_vector_142 @ 142 NONAME ; public: void __thiscall RWsSession::FreeSystemPointerCursorList(void)
	call_vector_143 @ 143 NONAME ; public: int __thiscall RWindowTreeNode::FullOrdinalPosition(void)const 
	call_vector_144 @ 144 NONAME ; public: class TRgb  __thiscall RWsSession::GetBackgroundColor(void)const 
	call_vector_145 @ 145 NONAME ; int RWsSession::GetDefaultOwningWindow(void) const
	call_vector_146 @ 146 NONAME ; void RWsSession::GetDoubleClickSettings(class TTimeIntervalMicroSeconds32 &, int &) const
	call_vector_147 @ 147 NONAME ; void RWsSession::GetEvent(class TWsEvent &) const
	call_vector_148 @ 148 NONAME ; int RWsSession::GetFocusWindowGroup(void) const
	call_vector_149 @ 149 NONAME ; public: int __thiscall CWsScreenDevice::GetFontById(class CFont * &,class TUid,class TAlgStyle const &)
	call_vector_150 @ 150 NONAME ; void RWindow::GetInvalidRegion(class RRegion &) const
	call_vector_151 @ 151 NONAME ; void RWsSession::GetKeyboardRepeatRate(class TTimeIntervalMicroSeconds32 &, class TTimeIntervalMicroSeconds32 &) const
	call_vector_152 @ 152 NONAME ; public: int __thiscall RWsSession::GetModifierState(void)const 
	call_vector_153 @ 153 NONAME ; public: virtual int __thiscall CWsScreenDevice::GetNearestFontInPixels(class CFont * &,class TFontSpec const &)
	call_vector_154 @ 154 NONAME ; public: virtual int __thiscall CWsScreenDevice::GetNearestFontInTwips(class CFont * &,class TFontSpec const &)
	call_vector_155 @ 155 NONAME ; public: virtual int __thiscall CWsScreenDevice::GetPalette(class CPalette * &)const 
	call_vector_156 @ 156 NONAME ; public: virtual void __thiscall CWsScreenDevice::GetPixel(class TRgb &,class TPoint const &)const 
	call_vector_157 @ 157 NONAME ; void RWsSession::GetPriorityKey(class TWsPriorityKeyEvent &) const
	call_vector_158 @ 158 NONAME ; public: void __thiscall RWsSession::GetRedraw(class TWsRedrawEvent &)
	call_vector_159 @ 159 NONAME ; public: virtual void __thiscall CWsScreenDevice::GetScanLine(class TDes8 &,class TPoint const &,int,enum TDisplayMode)const 
	call_vector_160 @ 160 NONAME ; int RWsSession::GetWindowGroupClientThreadId(int, class TThreadId &) const
	call_vector_161 @ 161 NONAME ; int RWsSession::GetWindowGroupHandle(int) const
	call_vector_162 @ 162 NONAME ; int RWsSession::GetWindowGroupNameFromIdentifier(int, class TDes16 &) const
	call_vector_163 @ 163 NONAME ; int RWsSession::GetWindowGroupOrdinalPriority(int) const
	call_vector_164 @ 164 NONAME ; public: int __thiscall RWsSession::HeapCount(void)const 
	call_vector_165 @ 165 NONAME ; public: void __thiscall RWsSession::HeapSetFail(int,int)
	call_vector_166 @ 166 NONAME ; public: virtual int __thiscall CWsScreenDevice::HorizontalPixelsToTwips(int)const 
	call_vector_167 @ 167 NONAME ; public: virtual int __thiscall CWsScreenDevice::HorizontalTwipsToPixels(int)const 
	call_vector_168 @ 168 NONAME ; public: int __thiscall RWindowGroup::Identifier(void)const 
	call_vector_169 @ 169 NONAME ; public: class TPoint  __thiscall RWindowBase::InquireOffset(class RWindowTreeNode const &)const 
	call_vector_170 @ 170 NONAME ; public: void __thiscall CWsBitmap::InternalizeL(class RReadStream &)
	call_vector_171 @ 171 NONAME ; public: void __thiscall RWindow::Invalidate(class TRect const &)
	call_vector_172 @ 172 NONAME ; public: void __thiscall RWindow::Invalidate(void)
	call_vector_173 @ 173 NONAME ; public: int __thiscall CWsBitmap::Load(class TDesC16 const &,long,int)
	call_vector_174 @ 174 NONAME ; public: int __thiscall RAnimDll::Load(class TDesC16 const &)
	call_vector_175 @ 175 NONAME ; public: void __thiscall RWsSession::LogMessage(class TBuf<128> const &)
	call_vector_176 @ 176 NONAME ; public: void __thiscall RBackedUpWindow::MaintainBackup(void)
	call_vector_177 @ 177 NONAME ; public: virtual void __thiscall CWindowGc::MapColors(class TRect const &,class TRgb const *,int,int)
	call_vector_178 @ 178 NONAME ; public: virtual void __thiscall CWindowGc::MoveBy(class TPoint const &)
	call_vector_179 @ 179 NONAME ; public: virtual void __thiscall CWindowGc::MoveTo(class TPoint const &)
	call_vector_180 @ 180 NONAME ; public: int __thiscall RWindowGroup::Name(class TDes16 &)const 
	call_vector_181 @ 181 NONAME ; public: unsigned long __thiscall RWindowTreeNode::NextSibling(void)const 
	call_vector_182 @ 182 NONAME ; public: virtual int __thiscall CWsScreenDevice::NumTypefaces(void)const 
	call_vector_183 @ 183 NONAME ; public: int __thiscall RWsSession::NumWindowGroups(int)const 
	call_vector_184 @ 184 NONAME ; public: int __thiscall RWsSession::NumWindowGroups(void)const 
	call_vector_185 @ 185 NONAME ; public: int __thiscall RWindowTreeNode::OrdinalPosition(void)const 
	call_vector_186 @ 186 NONAME ; public: virtual void __thiscall CWsScreenDevice::PaletteAttributes(int &,int &)const 
	call_vector_187 @ 187 NONAME ; public: unsigned long __thiscall RWindowTreeNode::Parent(void)const 
	call_vector_188 @ 188 NONAME ; public: void __thiscall RWsSession::PasswordEntered(void)
	call_vector_189 @ 189 NONAME ; public: int __thiscall RWindowBase::PasswordWindow(enum TPasswordMode)
	call_vector_190 @ 190 NONAME ; public: virtual void __thiscall CWindowGc::Plot(class TPoint const &)
	call_vector_191 @ 191 NONAME ; public: void __thiscall RWindowBase::PointerFilter(unsigned long,unsigned long)
	call_vector_192 @ 192 NONAME ; public: class TRect  __thiscall CWsScreenDevice::PointerRect(void)const 
	call_vector_193 @ 193 NONAME ; public: class TPoint  __thiscall RWindowBase::Position(void)const 
	call_vector_194 @ 194 NONAME ; public: unsigned long __thiscall RWindowTreeNode::PrevSibling(void)const 
	call_vector_195 @ 195 NONAME ; public: void __thiscall RWsSession::PriorityKeyReady(class TRequestStatus *)
	call_vector_196 @ 196 NONAME ; public: void __thiscall RWsSession::PriorityKeyReadyCancel(void)
	call_vector_197 @ 197 NONAME ; public: void __thiscall RWsSession::PurgePointerEvents(void)
	call_vector_198 @ 198 NONAME ; int CWsScreenDevice::RectCompare(class TRect const &, class TRect const &) const
	call_vector_199 @ 199 NONAME ; public: void __thiscall RWsSession::RedrawReady(class TRequestStatus *)
	call_vector_200 @ 200 NONAME ; public: void __thiscall RWsSession::RedrawReadyCancel(void)
	call_vector_201 @ 201 NONAME ; public: virtual void __thiscall CWsScreenDevice::ReleaseFont(class CFont *)
	call_vector_202 @ 202 NONAME ; public: void __thiscall RWindowBase::RemoveAllKeyRects(void)
	call_vector_203 @ 203 NONAME ; public: virtual void __thiscall CWsScreenDevice::RemoveFile(int)
	call_vector_204 @ 204 NONAME ; public: void __thiscall RWindowGroup::RemovePriorityKey(unsigned int,unsigned int,unsigned int)
	call_vector_205 @ 205 NONAME ; public: void __thiscall RWindowBase::RequestPointerRepeatEvent(class TTimeIntervalMicroSeconds32,class TRect const &)
	call_vector_206 @ 206 NONAME ; public: virtual void __thiscall CWindowGc::Reset(void)
	call_vector_207 @ 207 NONAME ; public: void __thiscall CWsBitmap::Reset(void)
	call_vector_208 @ 208 NONAME ; int RWsSession::ResourceCount(void) const
	call_vector_209 @ 209 NONAME ; public: int __thiscall RWsSession::RestoreDefaultHotKey(enum THotKey)
	call_vector_210 @ 210 NONAME ; int RWindowBase::RetrievePointerMoveBuffer(class TDes8 &) const
	call_vector_211 @ 211 NONAME ; public: void __thiscall RDrawableWindow::Scroll(class TPoint const &)
	call_vector_212 @ 212 NONAME ; public: void __thiscall RDrawableWindow::Scroll(class TPoint const &,class TRect const &)
	call_vector_213 @ 213 NONAME ; public: void __thiscall RDrawableWindow::Scroll(class TRect const &,class TPoint const &,class TRect const &)
	call_vector_214 @ 214 NONAME ; public: void __thiscall RDrawableWindow::Scroll(class TRect const &,class TPoint const &)
	call_vector_215 @ 215 NONAME ; public: int __thiscall RWsSession::SendEventToWindowGroup(int,class TWsEvent const &)
	call_vector_216 @ 216 NONAME ; public: int __thiscall RWsSession::SendMessageToWindowGroup(int,class TUid,class TDesC8 const &)
	call_vector_217 @ 217 NONAME ; public: int __thiscall RWsSession::SetAutoFlush(int)
	call_vector_218 @ 218 NONAME ; public: void __thiscall RWindow::SetBackgroundColor(class TRgb)
	call_vector_219 @ 219 NONAME ; public: void __thiscall RWindow::SetBackgroundColor(void)
	call_vector_220 @ 220 NONAME ; public: void __thiscall RWsSession::SetBackgroundColor(class TRgb)
	call_vector_221 @ 221 NONAME ; public: virtual void __thiscall CWindowGc::SetBrushColor(class TRgb const &)
	call_vector_222 @ 222 NONAME ; public: virtual void __thiscall CWindowGc::SetBrushOrigin(class TPoint const &)
	call_vector_223 @ 223 NONAME ; public: virtual void __thiscall CWindowGc::SetBrushStyle(enum CGraphicsContext::TBrushStyle)
	call_vector_224 @ 224 NONAME ; public: virtual void __thiscall CWindowGc::SetCharJustification(int,int)
	call_vector_225 @ 225 NONAME ; public: virtual void __thiscall CWindowGc::SetClippingRect(class TRect const &)
	call_vector_226 @ 226 NONAME ; public: virtual int __thiscall CWindowGc::SetClippingRegion(class TRegion const &)
	call_vector_227 @ 227 NONAME ; public: void __thiscall RBlankWindow::SetColor(class TRgb)
	call_vector_228 @ 228 NONAME ; public: int __thiscall RWindowBase::SetCornerType(enum TCornerType,int)
	call_vector_229 @ 229 NONAME ; public: void __thiscall RWindowTreeNode::SetCustomPointerCursor(class RWsPointerCursor const &)
	call_vector_230 @ 230 NONAME ; public: virtual void __thiscall CWindowGc::SetDitherOrigin(class TPoint const &)
	call_vector_231 @ 231 NONAME ; public: int __thiscall RWsSession::SetDoubleClick(class TTimeIntervalMicroSeconds32 const &,int)
	call_vector_232 @ 232 NONAME ; public: virtual void __thiscall CWindowGc::SetDrawMode(enum CGraphicsContext::TDrawMode)
	call_vector_233 @ 233 NONAME ; public: void __thiscall RBlankWindow::SetExtent(class TPoint const &,class TSize const &)
	call_vector_234 @ 234 NONAME ; public: void __thiscall RWindow::SetExtent(class TPoint const &,class TSize const &)
	call_vector_235 @ 235 NONAME ; public: int __thiscall RWindowBase::SetExtentErr(class TPoint const &,class TSize const &)
	call_vector_236 @ 236 NONAME ; public: int __thiscall RWsSession::SetHotKey(enum THotKey,unsigned int,unsigned int,unsigned int)
	call_vector_237 @ 237 NONAME ; public: int __thiscall RWsSession::SetKeyboardRepeatRate(class TTimeIntervalMicroSeconds32 const &,class TTimeIntervalMicroSeconds32 const &)
	call_vector_238 @ 238 NONAME ; public: int __thiscall RWsSession::SetModifierState(enum TEventModifier,enum TModifierState)
	call_vector_239 @ 239 NONAME ; public: int __thiscall RWindowGroup::SetName(class TDesC16 const &)
	call_vector_240 @ 240 NONAME ; public: void __thiscall RWindowTreeNode::SetOrdinalPosition(int)
	call_vector_241 @ 241 NONAME ; public: void __thiscall RWindowTreeNode::SetOrdinalPosition(int,int)
	call_vector_242 @ 242 NONAME ; public: void __thiscall RWindowGroup::SetOrdinalPriorityAdjust(int)
	call_vector_243 @ 243 NONAME ; public: virtual void __thiscall CWindowGc::SetOrigin(class TPoint const &)
	call_vector_244 @ 244 NONAME ; public: void __thiscall RWindowGroup::SetOwningWindowGroup(int)
	call_vector_245 @ 245 NONAME ; public: virtual void __thiscall CWsScreenDevice::SetPalette(class CPalette *)
	call_vector_246 @ 246 NONAME ; public: virtual void __thiscall CWindowGc::SetPenColor(class TRgb const &)
	call_vector_247 @ 247 NONAME ; public: virtual void __thiscall CWindowGc::SetPenSize(class TSize const &)
	call_vector_248 @ 248 NONAME ; public: virtual void __thiscall CWindowGc::SetPenStyle(enum CGraphicsContext::TPenStyle)
	call_vector_249 @ 249 NONAME ; public: void __thiscall RWindowBase::SetPointerCapture(int)
	call_vector_250 @ 250 NONAME ; public: int __thiscall RWindowTreeNode::SetPointerCursor(int)
	call_vector_251 @ 251 NONAME ; public: void __thiscall RWindowBase::SetPointerGrab(int)
	call_vector_252 @ 252 NONAME ; public: void __thiscall RWindowBase::SetPosition(class TPoint const &)
	call_vector_253 @ 253 NONAME ; public: void __thiscall RWsSprite::SetPosition(class TPoint const &)
	call_vector_254 @ 254 NONAME ; public: int __thiscall RWindowBase::SetRequiredDisplayMode(enum TDisplayMode)
	call_vector_255 @ 255 NONAME ; public: void __thiscall RWindowBase::SetShadowDisabled(int)
	call_vector_256 @ 256 NONAME ; public: void __thiscall RWindowBase::SetShadowHeight(int)
	call_vector_257 @ 257 NONAME ; public: void __thiscall RWsSession::SetShadowVector(class TPoint const &)
	call_vector_258 @ 258 NONAME ; public: int __thiscall RWindowBase::SetShape(class TRegion const &)
	call_vector_259 @ 259 NONAME ; public: void __thiscall RBlankWindow::SetSize(class TSize const &)
	call_vector_260 @ 260 NONAME ; public: void __thiscall RWindow::SetSize(class TSize const &)
	call_vector_261 @ 261 NONAME ; public: int __thiscall RWindowBase::SetSizeErr(class TSize const &)
	call_vector_262 @ 262 NONAME ; public: virtual void __thiscall CWindowGc::SetStrikethroughStyle(enum TFontStrikethrough)
	call_vector_263 @ 263 NONAME ; public: int __thiscall RWsSession::SetSystemPointerCursor(class RWsPointerCursor const &,int)
	call_vector_264 @ 264 NONAME ; public: void __thiscall RWindowGroup::SetTextCursor(class RWindowBase &,class TPoint const &,struct TTextCursor const &)
	call_vector_265 @ 265 NONAME ; public: void __thiscall RWindowGroup::SetTextCursor(class RWindowBase &,class TPoint const &,struct TTextCursor const &,class TRect const &)
	call_vector_266 @ 266 NONAME ; public: virtual void __thiscall CWindowGc::SetUnderlineStyle(enum TFontUnderline)
	call_vector_267 @ 267 NONAME ; public: void __thiscall RWindowBase::SetVisible(int)
	call_vector_268 @ 268 NONAME ; public: int __thiscall RWsSession::SetWindowGroupOrdinalPosition(int,int)
	call_vector_269 @ 269 NONAME ; public: virtual void __thiscall CWindowGc::SetWordJustification(int,int)
	call_vector_270 @ 270 NONAME ; public: class TPoint  __thiscall RWsSession::ShadowVector(void)const 
	call_vector_271 @ 271 NONAME ; public: void __thiscall RWsSession::SimulateRawEvent(class TRawEvent)
	call_vector_272 @ 272 NONAME ; public: class TSize  __thiscall RWindowBase::Size(void)const 
	call_vector_273 @ 273 NONAME ; public: virtual class TSize  __thiscall CWsScreenDevice::SizeInPixels(void)const 
	call_vector_274 @ 274 NONAME ; public: virtual class TSize  __thiscall CWsScreenDevice::SizeInTwips(void)const 
	call_vector_275 @ 275 NONAME ; public: void __thiscall RWsSession::SystemInfo(int &,struct RWsSession::SSystemInfo &)
	call_vector_276 @ 276 NONAME ; public: void __thiscall RWsSession::TestWrite(int,int,void const *,int)
	call_vector_277 @ 277 NONAME ; public: void __thiscall RWsSession::TestWriteReply(int,int,void const *,int)
	call_vector_278 @ 278 NONAME ; public: void __thiscall RWsSession::TestWriteReplyP(int,int,void const *,int,class TDes8 *)
	call_vector_279 @ 279 NONAME ; public: virtual void __thiscall CWsScreenDevice::TypefaceSupport(class TTypefaceSupport &,int)const 
	call_vector_280 @ 280 NONAME ; public: void __thiscall RBackedUpWindow::UpdateBackupBitmap(void)
	call_vector_281 @ 281 NONAME ; public: int __thiscall RWsSpriteBase::UpdateMember(int,struct TSpriteMember const &)
	call_vector_282 @ 282 NONAME ; public: void __thiscall RWsSpriteBase::UpdateMember(int)
	call_vector_283 @ 283 NONAME ; public: void __thiscall RBackedUpWindow::UpdateScreen(class TRegion const &)
	call_vector_284 @ 284 NONAME ; public: void __thiscall RBackedUpWindow::UpdateScreen(void)
	call_vector_285 @ 285 NONAME ; public: virtual void __thiscall CWindowGc::UseBrushPattern(class CFbsBitmap const *)
	call_vector_286 @ 286 NONAME ; public: virtual void __thiscall CWindowGc::UseFont(class CFont const *)
	call_vector_287 @ 287 NONAME ; class TVersion RWsSession::Version(void) const
	call_vector_288 @ 288 NONAME ; public: virtual int __thiscall CWsScreenDevice::VerticalPixelsToTwips(int)const 
	call_vector_289 @ 289 NONAME ; public: virtual int __thiscall CWsScreenDevice::VerticalTwipsToPixels(int)const 
	call_vector_290 @ 290 NONAME ; int RWsSession::WindowGroupList(int, class CArrayFixFlat<int> *) const
	call_vector_291 @ 291 NONAME ; int RWsSession::WindowGroupList(class CArrayFixFlat<int> *) const
	call_vector_292 @ 292 NONAME ; public: int __thiscall RWsSession::RequestOffEvents(int,class RWindowTreeNode *)
	call_vector_293 @ 293 NONAME ; public: void __thiscall RWindowTreeNode::__DbgTestInvariant(void)const 
	call_vector_294 @ 294 NONAME ; public: void __thiscall RWindowGroup::DisableScreenChangeEvents(void)
	call_vector_295 @ 295 NONAME ; public: int __thiscall RWindowGroup::EnableScreenChangeEvents(void)
	call_vector_296 @ 296 NONAME ; public: void __thiscall RWindowBase::FadeBehind(int)
	call_vector_297 @ 297 NONAME ; public: void __thiscall CWsScreenDevice::GetDefaultScreenSizeAndRotation(struct TPixelsAndRotation &)const 
	call_vector_298 @ 298 NONAME ; public: void __thiscall CWsScreenDevice::GetDefaultScreenSizeAndRotation(struct TPixelsTwipsAndRotation &)const 
	call_vector_299 @ 299 NONAME ; enum TDisplayMode RWindowBase::DisplayMode(void) const
	call_vector_300 @ 300 NONAME ; public: enum TDisplayMode  __thiscall RWsSession::GetDefModeMaxNumColors(int &,int &)const 
	call_vector_301 @ 301 NONAME ; public: void __thiscall CWsScreenDevice::GetScreenModeSizeAndRotation(int,struct TPixelsAndRotation &)const 
	call_vector_302 @ 302 NONAME ; public: void __thiscall CWsScreenDevice::GetScreenModeSizeAndRotation(int,struct TPixelsTwipsAndRotation &)const 
	call_vector_303 @ 303 NONAME ; public: int __thiscall CWsScreenDevice::NumScreenModes(void)const 
	call_vector_304 @ 304 NONAME ; public: enum TScreenModeEnforcement  __thiscall CWsScreenDevice::ScreenModeEnforcement(void)const 
	call_vector_305 @ 305 NONAME ; public: virtual void __thiscall CWindowGc::SetFaded(int)
	call_vector_306 @ 306 NONAME ; public: void __thiscall RWindowTreeNode::SetFaded(int,enum RWindowTreeNode::TFadeControl)
	call_vector_307 @ 307 NONAME ; public: void __thiscall RWindowTreeNode::SetNonFading(int)
	call_vector_308 @ 308 NONAME ; public: void __thiscall CWsScreenDevice::SetScreenMode(int)
	call_vector_309 @ 309 NONAME ; public: void __thiscall CWsScreenDevice::SetScreenModeEnforcement(enum TScreenModeEnforcement)const 
	call_vector_310 @ 310 NONAME ; public: void __thiscall CWsScreenDevice::SetScreenSizeAndRotation(struct TPixelsAndRotation const &)
	call_vector_311 @ 311 NONAME ; public: void __thiscall CWsScreenDevice::SetScreenSizeAndRotation(struct TPixelsTwipsAndRotation const &)
	call_vector_312 @ 312 NONAME ; public: void __thiscall RWindowGroup::SimulatePointerEvent(class TRawEvent)
	call_vector_313 @ 313 NONAME ; public: int __thiscall RWsSession::GetColorModeList(class CArrayFixFlat<int> *)const 
	call_vector_314 @ 314 NONAME ; int RWindowBase::IsFaded(void) const
	call_vector_315 @ 315 NONAME ; int RWindowBase::IsNonFading(void) const
	call_vector_316 @ 316 NONAME ; protected: int __thiscall RAnim::Construct(class RWsSprite const &,int,class TDesC8 const &)
	call_vector_317 @ 317 NONAME ; public: int __thiscall CWsScreenDevice::GetRotationsList(int,class CArrayFixFlat<int> *)const 
	call_vector_318 @ 318 NONAME ; public: int __thiscall RWindowTreeNode::OrdinalPriority(void)const 
	call_vector_319 @ 319 NONAME ; public: int __thiscall RWsSession::SendEventToAllWindowGroups(class TWsEvent const &)
	call_vector_320 @ 320 NONAME ; public: int __thiscall RWsSession::SendEventToAllWindowGroups(int,class TWsEvent const &)
	call_vector_321 @ 321 NONAME ; public: void __thiscall CWsScreenDevice::SetCurrentRotations(int,enum CFbsBitGc::TGraphicsOrientation)const 
	call_vector_322 @ 322 NONAME ; public: void __thiscall RWsSession::SimulateKeyEvent(struct TKeyEvent)
	call_vector_323 @ 323 NONAME ; public: void __thiscall RWsSession::SetRemoveKeyCode(int)
	call_vector_324 @ 324 NONAME ; public: void __thiscall RWsSession::ClearDefaultSystemPointerCursor(void)
	call_vector_325 @ 325 NONAME ; public: void __thiscall RWindowTreeNode::ClearPointerCursor(void)
	call_vector_326 @ 326 NONAME ; public: class TRect  __thiscall RWsSession::PointerCursorArea(int)const 
	call_vector_327 @ 327 NONAME ; public: class TRect  __thiscall RWsSession::PointerCursorArea(void)const 
	call_vector_328 @ 328 NONAME ; public: enum TPointerCursorMode  __thiscall RWsSession::PointerCursorMode(void)const 
	call_vector_329 @ 329 NONAME ; public: class TPoint  __thiscall RWsSession::PointerCursorPosition(void)const 
	call_vector_330 @ 330 NONAME ; public: void __thiscall RWsSession::SetDefaultSystemPointerCursor(int)
	call_vector_331 @ 331 NONAME ; public: void __thiscall RWsSession::SetPointerCursorArea(class TRect const &)
	call_vector_332 @ 332 NONAME ; public: void __thiscall RWsSession::SetPointerCursorArea(int,class TRect const &)
	call_vector_333 @ 333 NONAME ; public: void __thiscall RWsSession::SetPointerCursorMode(enum TPointerCursorMode)
	call_vector_334 @ 334 NONAME ; public: int __thiscall RWsSession::SetPointerCursorPosition(class TPoint const &)
	call_vector_335 @ 335 NONAME ; void RWsSession::SimulateXyInputType(int)
	call_vector_336 @ 336 NONAME ; public: int __thiscall RWindowBase::MoveToGroup(int)
	call_vector_337 @ 337 NONAME ; public: int __thiscall RWsSession::SendMessageToAllWindowGroups(int,class TUid,class TDesC8 const &)
	call_vector_338 @ 338 NONAME ; public: int __thiscall RWsSession::SendMessageToAllWindowGroups(class TUid,class TDesC8 const &)
	call_vector_339 @ 339 NONAME ; public: void __thiscall RWindowTreeNode::DisableFocusChangeEvents(void)
	call_vector_340 @ 340 NONAME ; public: int __thiscall RWindowTreeNode::EnableFocusChangeEvents(void)
	call_vector_341 @ 341 NONAME ; public: void __thiscall RWsSession::SetDefaultFadingParameters(unsigned char,unsigned char)
	call_vector_342 @ 342 NONAME ; public: void __thiscall RWindowTreeNode::SetFaded(int,enum RWindowTreeNode::TFadeControl,unsigned char,unsigned char)
	call_vector_343 @ 343 NONAME ; public: virtual void __thiscall CWindowGc::SetFadingParameters(unsigned char,unsigned char)
	call_vector_344 @ 344 NONAME ; public: void __thiscall RWsSession::PrepareForSwitchOff(void)
	call_vector_345 @ 345 NONAME ; public: int __thiscall CWsScreenDevice::SetCustomPalette(class CPalette const *)
	call_vector_346 @ 346 NONAME ; public: __thiscall RDirectScreenAccess::RDirectScreenAccess(class RWsSession &)
	call_vector_347 @ 347 NONAME ; public: __thiscall RDirectScreenAccess::RDirectScreenAccess(void)
	call_vector_348 @ 348 NONAME ; public: void __thiscall RDirectScreenAccess::Cancel(void)
	call_vector_349 @ 349 NONAME ; public: void __thiscall RDirectScreenAccess::Close(void)
	call_vector_350 @ 350 NONAME ; public: void __thiscall RDirectScreenAccess::Completed(void)
	call_vector_351 @ 351 NONAME ; public: int __thiscall RDirectScreenAccess::Construct(void)
	call_vector_352 @ 352 NONAME ; public: static class CDirectScreenAccess * __cdecl CDirectScreenAccess::NewL(class RWsSession &,class CWsScreenDevice &,class RWindowBase &,class MDirectScreenAccess &)
	call_vector_353 @ 353 NONAME ; public: int __thiscall RDirectScreenAccess::Request(class RRegion * &,class TRequestStatus &,class RWindowBase const &)
	call_vector_354 @ 354 NONAME ; public: void __thiscall CDirectScreenAccess::StartL(void)
	call_vector_355 @ 355 NONAME ; public: void __thiscall RWsSession::SetBufferSizeL(int)
	call_vector_356 @ 356 NONAME ; public: int __thiscall RWsSession::SetSystemFaded(int)
	call_vector_357 @ 357 NONAME ; public: int __thiscall RWsSession::SetSystemFaded(int,unsigned char,unsigned char)
	call_vector_358 @ 358 NONAME ; public: void __thiscall RWindowTreeNode::DisableGroupListChangeEvents(void)
	call_vector_359 @ 359 NONAME ; public: int __thiscall RWindowTreeNode::EnableGroupListChangeEvents(void)
	call_vector_360 @ 360 NONAME ; public: int __thiscall RSoundPlugIn::Construct(class TUid)
	call_vector_361 @ 361 NONAME ; public: void __thiscall RSoundPlugIn::Destroy(void)
	call_vector_362 @ 362 NONAME ; int RSoundPlugIn::IsLoaded(int &) const
	call_vector_363 @ 363 NONAME ; public: int __thiscall RSoundPlugIn::Load(class TDesC16 const &)
	call_vector_364 @ 364 NONAME ; public: int __thiscall RSoundPlugIn::Unload(void)
	call_vector_365 @ 365 NONAME ; public: int __thiscall CWsScreenDevice::CurrentScreenMode(void)const 
	call_vector_366 @ 366 NONAME ; public: void __thiscall RWindowGroup::CancelCaptureLongKey(long)
	call_vector_367 @ 367 NONAME ; public: long __thiscall RWindowGroup::CaptureLongKey(unsigned int,unsigned int,unsigned int,unsigned int,int,unsigned int)
	call_vector_368 @ 368 NONAME ; public: long __thiscall RWindowGroup::CaptureLongKey(class TTimeIntervalMicroSeconds32,unsigned int,unsigned int,unsigned int,unsigned int,int,unsigned int)
	call_vector_369 @ 369 NONAME ; public: int __thiscall RWsSession::SendEventToOneWindowGroupsPerClient(class TWsEvent const &)
	call_vector_370 @ 370 NONAME ; int RSoundPlugIn::KeyClickEnabled(void) const
	call_vector_371 @ 371 NONAME ; int RSoundPlugIn::PenClickEnabled(void) const
	call_vector_372 @ 372 NONAME ; public: void __thiscall RSoundPlugIn::SetKeyClick(int)
	call_vector_373 @ 373 NONAME ; public: void __thiscall RSoundPlugIn::SetPenClick(int)
	call_vector_374 @ 374 NONAME ; public: long __thiscall RWindowGroup::CaptureKey(unsigned int,unsigned int,unsigned int,int)
	call_vector_375 @ 375 NONAME ; public: long __thiscall RWindowGroup::CaptureKeyUpAndDowns(unsigned int,unsigned int,unsigned int,int)
	call_vector_376 @ 376 NONAME ; public: void __thiscall RWsSession::LogCommand(enum RWsSession::TLoggingCommand)
	call_vector_377 @ 377 NONAME ; public: __thiscall RSoundPlugIn::RSoundPlugIn(class RWsSession &)
	call_vector_378 @ 378 NONAME ; public: __thiscall RSoundPlugIn::RSoundPlugIn(void)
	call_vector_379 @ 379 NONAME ; public: void __thiscall RSoundPlugIn::Close(void)
	call_vector_380 @ 380 NONAME ; public: int __thiscall RSoundPlugIn::CommandReply(int,class TPtrC8 const &)
	call_vector_381 @ 381 NONAME ; public: int __thiscall RWsSession::SetCustomTextCursor(int,class TArray<struct TSpriteMember> const &,unsigned int,enum RWsSession::TCustomTextCursorAlignment)
	call_vector_382 @ 382 NONAME ; public: void __thiscall RWindow::HandleTransparencyUpdate(void)
	call_vector_383 @ 383 NONAME ; public: int __thiscall RWindow::SetTransparencyBitmap(class CFbsBitmap const &)
	call_vector_384 @ 384 NONAME ; public: int __thiscall RWindow::SetTransparencyFactor(class TRgb const &)
	call_vector_385 @ 385 NONAME ; public: void __thiscall RWindow::SetNonTransparent(void)
	call_vector_386 @ 386 NONAME ; public: int __thiscall RWsSession::TestWriteReplyByProvidingRemoteReadAccess(int,int,class TDesC8 const &,class TDesC16 const &)
	call_vector_387 @ 387 NONAME ; public: int __thiscall RWsSession::TestWriteReplyByProvidingRemoteReadAccess(int,int,class TDesC8 const &,class TDesC8 const &)
	call_vector_388 @ 388 NONAME ; int RAnim::CommandReply(int, class TDesC8 const &, class TIpcArgs const &)
	call_vector_389 @ 389 NONAME ; int RAnim::Construct(class RWindowBase const &, int, class TDesC8 const &, class TIpcArgs const &)
	call_vector_390 @ 390 NONAME ; int RAnim::Construct(class RWsSprite const &, int, class TDesC8 const &, class TIpcArgs const &)
	call_vector_391 @ 391 NONAME ; void RAnim::AsyncCommandReply(class TRequestStatus &, int, class TIpcArgs const &)
	call_vector_392 @ 392 NONAME ; public: class TPoint  __thiscall RWindowBase::AbsPosition(void)const 
	call_vector_393 @ 393 NONAME ; public: int __thiscall CWsScreenDevice::RectCompare(class TRect const &,class TRect const &,unsigned int)const 
	call_vector_394 @ 394 NONAME ; public: class TPoint  __thiscall CWsScreenDevice::GetDefaultScreenModeOrigin(void)const 
	call_vector_395 @ 395 NONAME ; public: class TPoint  __thiscall CWsScreenDevice::GetScreenModeOrigin(int)const 
	call_vector_396 @ 396 NONAME ; void RWindow::EnableRedrawStore(int)
	call_vector_397 @ 397 NONAME ; void CWindowGc::AlphaBlendBitmaps(class TPoint const &, class CFbsBitmap const *, class TRect const &, class CFbsBitmap const *, class TPoint const &)
	call_vector_398 @ 398 NONAME ; void CWindowGc::AlphaBlendBitmaps(class TPoint const &, class CWsBitmap const *, class TRect const &, class CWsBitmap const *, class TPoint const &)
	call_vector_399 @ 399 NONAME ; void CWindowGc::SetOpaque(int)
	call_vector_400 @ 400 NONAME ; public: class TSizeMode  __thiscall CWsScreenDevice::GetCurrentScreenModeAttributes(void)const 
	call_vector_401 @ 401 NONAME ; public: class TPoint  __thiscall CWsScreenDevice::GetCurrentScreenModeScaledOrigin(void)const 
	call_vector_402 @ 402 NONAME ; public: class TSize  __thiscall CWsScreenDevice::GetCurrentScreenModeScale(void)const 
	call_vector_403 @ 403 NONAME ; public: class TPoint  __thiscall CWsScreenDevice::GetScreenModeScaledOrigin(int)const 
	call_vector_404 @ 404 NONAME ; public: class TSize  __thiscall CWsScreenDevice::GetScreenModeScale(int)const 
	call_vector_405 @ 405 NONAME ; public: void __thiscall CWsScreenDevice::SetAppScreenMode(int)
	call_vector_406 @ 406 NONAME ; public: void __thiscall CWsScreenDevice::SetCurrentScreenModeAttributes(class TSizeMode const &)
	call_vector_407 @ 407 NONAME ; void CWindowGc::DrawBitmapMasked(class TRect const &, class CFbsBitmap const *, class TRect const &, class CFbsBitmap const *, int)
	call_vector_408 @ 408 NONAME ; int CWsScreenDevice::Construct(int)
	call_vector_409 @ 409 NONAME ; int CWsScreenDevice::GetScreenNumber(void) const
	call_vector_410 @ 410 NONAME ; int RWsSession::GetFocusScreen(void) const
	call_vector_411 @ 411 NONAME ; int RWsSession::SetFocusScreen(int)
	call_vector_412 @ 412 NONAME ; public: int __thiscall RWindowGroup::ConstructChildApp(int,unsigned long)
	call_vector_413 @ 413 NONAME ; public: int __thiscall RWindowGroup::ConstructChildApp(int,unsigned long,int)
	call_vector_414 @ 414 NONAME ; int RWsSession::WindowGroupList(int, class RArray<struct RWsSession::TWindowGroupChainInfo> *) const
	call_vector_415 @ 415 NONAME ; int RWsSession::WindowGroupList(class RArray<struct RWsSession::TWindowGroupChainInfo> *) const
	call_vector_416 @ 416 NONAME ; public: void __thiscall RWindowGroup::AllowProcessToCreateChildWindowGroups(class TUid)
	call_vector_417 @ 417 NONAME ; public: int __thiscall RWindow::SetTransparencyWsBitmap(class CWsBitmap const &)
	call_vector_418 @ 418 NONAME ; int CWsScreenDevice::GetScreenSizeModeList(class RArray<int> *) const
	call_vector_419 @ 419 NONAME ; int CWsScreenDevice::GetNearestFontToDesignHeightInPixels(class CFont * &, class TFontSpec const &)
	call_vector_420 @ 420 NONAME ; int CWsScreenDevice::GetNearestFontToDesignHeightInTwips(class CFont * &, class TFontSpec const &)
	call_vector_421 @ 421 NONAME ; int CWsScreenDevice::GetNearestFontToMaxHeightInPixels(class CFont * &, class TFontSpec const &, int)
	call_vector_422 @ 422 NONAME ; int CWsScreenDevice::GetNearestFontToMaxHeightInTwips(class CFont * &, class TFontSpec const &, int)
	call_vector_423 @ 423 NONAME ; void RWindowTreeNode::DisableVisibilityChangeEvents(void)
	call_vector_424 @ 424 NONAME ; int RWindowTreeNode::EnableVisibilityChangeEvents(void)
	call_vector_425 @ 425 NONAME ; int RWindow::SetTransparencyAlphaChannel(void)
	call_vector_426 @ 426 NONAME ; void RBlankWindow::SetColor(void)
	call_vector_427 @ 427 NONAME ; int RWsSession::SetClientCursorMode(enum TPointerCursorMode)
	call_vector_428 @ 428 NONAME ; class TRect RDrawableWindow::GetDrawRect(void) const
	call_vector_429 @ 429 NONAME
	call_vector_430 @ 430 NONAME
	call_vector_431 @ 431 NONAME ; void CWindowGc::Reserved_CWindowGc_3(void)
	call_vector_432 @ 432 NONAME ; void CWindowGc::Reserved_CWindowGc_4(void)
	call_vector_433 @ 433 NONAME ; void CWindowGc::Reserved_CWindowGc_5(void)
	call_vector_434 @ 434 NONAME ; void CWindowGc::Reserved_CBitmapContext_1(void)
	call_vector_435 @ 435 NONAME ; void CWindowGc::Reserved_CBitmapContext_2(void)
	call_vector_436 @ 436 NONAME ; void CWindowGc::Reserved_CBitmapContext_3(void)
	call_vector_437 @ 437 NONAME ; int CWindowGc::APIExtension(class TUid, int*&, int *)
	call_vector_438 @ 438 NONAME ; void CWindowGc::Reserved_CGraphicsContext_2(void)
	call_vector_439 @ 439 NONAME ; void CWindowGc::DrawBitmapMasked(class TRect const &, class CWsBitmap const *, class TRect const &, class CWsBitmap const *, int)
	call_vector_440 @ 440 NONAME ; int RWsSession::Connect(class RFs &)
	call_vector_441 @ 441 NONAME ; enum TDisplayMode CWsScreenDevice::GetScreenModeDisplayMode(int const &) const
	call_vector_442 @ 442 NONAME ; public: void __thiscall RWsSession::ClearAllRedrawStores(void)
	call_vector_443 @ 443 NONAME ; int RWindowTreeNode::WindowGroupId(void) const
	call_vector_444 @ 444 NONAME ; int RWindowBase::GetPointerCapturePriority(void) const
	call_vector_445 @ 445 NONAME ; void RWindowBase::SetPointerCapturePriority(int)
	call_vector_446 @ 446 NONAME ; int RWindow::SetTransparentRegion(class TRegion const &)
	call_vector_447 @ 447 NONAME ; int RWindow::SetTransparencyPolicy(enum TWsTransparencyPolicy)
	call_vector_448 @ 448 NONAME ; int RWindow::IsRedrawStoreEnabled(void) const
	call_vector_449 @ 449 NONAME ; int CWsScreenDevice::SetBackLight(int)
	call_vector_450 @ 450 NONAME ; int RWindowGroup::SetOrdinalPositionErr(int, int)
	call_vector_451 @ 451 NONAME ; int RWindowGroup::ClearChildGroup(void)
	call_vector_452 @ 452 NONAME ; int RWindowGroup::SetChildGroup(int)
	call_vector_453 @ 453 NONAME ; class TUid TWsGraphicId::Uid(void) const
	call_vector_454 @ 454 NONAME ; CWsGraphic::CWsGraphic(void)
	call_vector_455 @ 455 NONAME ; RWsGraphicMsgBuf::RWsGraphicMsgBuf(void)
	call_vector_456 @ 456 NONAME ; TWsGraphicMsgFixedBase::TWsGraphicMsgFixedBase(class TUid, int)
	call_vector_457 @ 457 NONAME ; CWsGraphic::~CWsGraphic(void)
	call_vector_458 @ 458 NONAME ; int RWsGraphicMsgBuf::Append(class TWsGraphicMsgFixedBase const &)
	call_vector_459 @ 459 NONAME ; int RWsGraphicMsgBuf::Append(class TUid, class TDesC16 const &)
	call_vector_460 @ 460 NONAME ; int RWsGraphicMsgBuf::Append(class TUid, class TDesC8 const &)
	call_vector_461 @ 461 NONAME ; int RWsGraphicMsgBuf::Append(class TUid, int, class TPtr8 &)
	call_vector_462 @ 462 NONAME ; void CWsGraphic::BaseConstructL(class TWsGraphicId const &, class TUid, class TDesC8 const &)
	call_vector_463 @ 463 NONAME ; void CWsGraphic::BaseConstructL(class TUid, class TUid, class TDesC8 const &)
	call_vector_464 @ 464 NONAME ; void CWsGraphic::BaseConstructL(class TUid, class TDesC8 const &)
	call_vector_465 @ 465 NONAME ; int CWsGraphic::CWsGraphic_Reserved1(void)
	call_vector_466 @ 466 NONAME ; int CWsGraphic::CWsGraphic_Reserved2(void)
	call_vector_467 @ 467 NONAME ; int CWsGraphic::CWsGraphic_Reserved3(void)
	call_vector_468 @ 468 NONAME ; int TWsGraphicId::Compare(class TWsGraphicId const &) const
	call_vector_469 @ 469 NONAME ; int RWsGraphicMsgBuf::Count(void) const
	call_vector_470 @ 470 NONAME ; class TPtrC8 RWsGraphicMsgBuf::Data(int) const
	call_vector_471 @ 471 NONAME ; void CWsGraphic::Destroy(void)
	call_vector_472 @ 472 NONAME ; void RWsGraphicMsgBuf::GetFixedMsg(class TWsGraphicMsgFixedBase &, int) const
	call_vector_473 @ 473 NONAME ; class TWsGraphicId const & CWsGraphic::Id(void) const
	call_vector_474 @ 474 NONAME ; int CWsGraphic::IsActive(void) const
	call_vector_475 @ 475 NONAME ; int TWsGraphicId::IsId(void) const
	call_vector_476 @ 476 NONAME ; void CWsGraphic::OnClientClose(void)
	call_vector_477 @ 477 NONAME ; class TDesC8 const & RWsGraphicMsgBuf::Pckg(void) const
	call_vector_478 @ 478 NONAME ; class TPtrC8 TWsGraphicMsgFixedBase::Pckg(void) const
	call_vector_479 @ 479 NONAME ; void RWsGraphicMsgBuf::Remove(int)
	call_vector_480 @ 480 NONAME ; void CWsGraphic::SendMessage(class TDesC8 const &) const
	call_vector_481 @ 481 NONAME ; void TWsGraphicId::Set(int)
	call_vector_482 @ 482 NONAME ; void TWsGraphicId::Set(class TUid)
	call_vector_483 @ 483 NONAME ; int CWsGraphic::Share(class TSecureId)
	call_vector_484 @ 484 NONAME ; int CWsGraphic::ShareGlobally(void)
	call_vector_485 @ 485 NONAME ; int TWsGraphicMsgFixedBase::Size(void) const
	call_vector_486 @ 486 NONAME ; class TUid RWsGraphicMsgBuf::TypeId(int) const
	call_vector_487 @ 487 NONAME ; class TUid TWsGraphicMsgFixedBase::TypeId(void) const
	call_vector_488 @ 488 NONAME ; int CWsGraphic::UnShare(class TSecureId)
	call_vector_489 @ 489 NONAME ; int CWsGraphic::UnShareGlobally(void)
	call_vector_490 @ 490 NONAME ; class TPtr8 RWsGraphicMsgBuf::Data(int)
	call_vector_491 @ 491 NONAME ; TWsGraphicId::TWsGraphicId(class TWsGraphicId const &)
	call_vector_492 @ 492 NONAME ; TWsGraphicId::TWsGraphicId(int)
	call_vector_493 @ 493 NONAME ; int CWsGraphic::Flush(void) const
	call_vector_494 @ 494 NONAME ; int RWindowGroup::Construct(unsigned long, int, class CWsScreenDevice *)
	call_vector_495 @ 495 NONAME ; int RWindowGroup::Construct(unsigned long, class CWsScreenDevice *)
	call_vector_496 @ 496 NONAME ; int RWsSession::GetColorModeList(int, class CArrayFixFlat<int> *) const
	call_vector_497 @ 497 NONAME ; enum TDisplayMode RWsSession::GetDefModeMaxNumColors(int, int &, int &) const
	call_vector_498 @ 498 NONAME ; int RWsSession::GetDefaultOwningWindow(int) const
	call_vector_499 @ 499 NONAME ; int RWsSession::GetFocusWindowGroup(int) const
	call_vector_500 @ 500 NONAME ; int RWsSession::NumWindowGroups(int, int) const
	call_vector_501 @ 501 NONAME ; int RWsSession::NumberOfScreens(void) const
	call_vector_502 @ 502 NONAME ; int RWsSession::WindowGroupList(class CArrayFixFlat<int> *, int, int) const
	call_vector_503 @ 503 NONAME ; TWsGraphicId::TWsGraphicId(class TUid)
	call_vector_504 @ 504 NONAME ; public: void __thiscall RWsSession::SetMaxBufferSizeL(int)
	call_vector_505 @ 505 NONAME ; void RWindow::EnableOSB(int)
	call_vector_506 @ 506 NONAME ; int TWsGraphicId::Id(void) const
	call_vector_507 @ 507 NONAME ; int TWsGraphicId::IsUid(void) const
	call_vector_508 @ 508 NONAME ; void CWsGraphic::SetGraphicExtension(class MWsObjectProvider *)
	call_vector_509 @ 509 NONAME ; int CWsGraphic::SendSynchronMessage(class TDesC8 const &) const
	call_vector_510 @ 510 NONAME ; int RWsSession::DebugInfo(int, class TDes8 &, int) const
	call_vector_511 @ 511 NONAME ; int RWsSession::DebugInfo(int, int) const
	call_vector_512 @ 512 NONAME ; unsigned long RWindowTreeNode::ClientHandle(void) const
	call_vector_513 @ 513 NONAME ; int RWindowBase::SetBackgroundSurface(class TSurfaceId const &)
	call_vector_514 @ 514 NONAME
	call_vector_515 @ 515 NONAME ; class TRgb RWindowBase::KeyColor(void) const
	call_vector_516 @ 516 NONAME
	call_vector_517 @ 517 NONAME
	call_vector_518 @ 518 NONAME
	call_vector_519 @ 519 NONAME
	call_vector_520 @ 520 NONAME
	call_vector_521 @ 521 NONAME ; int RWindowBase::GetBackgroundSurface(class TSurfaceConfiguration &) const
	call_vector_522 @ 522 NONAME
	call_vector_523 @ 523 NONAME ; int RWsSession::PreferredSurfaceConfigurationSize(void) const
	call_vector_524 @ 524 NONAME ; int RWsSession::RegisterSurface(int, class TSurfaceId const &)
	call_vector_525 @ 525 NONAME
	call_vector_526 @ 526 NONAME ; void RWindowBase::RemoveBackgroundSurface(int)
	call_vector_527 @ 527 NONAME
	call_vector_528 @ 528 NONAME ; int RWindowBase::SetBackgroundSurface(class TSurfaceConfiguration const &, int)
	call_vector_529 @ 529 NONAME ; void RWsSession::UnregisterSurface(int, class TSurfaceId const &)
	call_vector_530 @ 530 NONAME ; void RWindow::ClearRedrawStore(void)
	call_vector_531 @ 531 NONAME ; int RWsSession::Finish(void)
	call_vector_532 @ 532 NONAME ; void RWsSession::SyncMsgBuf(void)
	call_vector_533 @ 533 NONAME ; class RWsSession & CWsGraphic::Session(void)
	call_vector_534 @ 534 NONAME ; int RWindowTreeNode::ScreenNumber(void) const
	call_vector_535 @ 535 NONAME ; void TWsEvent::SetPointerNumber(unsigned char)
	call_vector_536 @ 536 NONAME ; int TAdvancedPointerEvent::DoGetPointerNumber(void) const
	call_vector_537 @ 537 NONAME ; int RWindowBase::ClaimPointerGrab(unsigned char, int)
	call_vector_538 @ 538 NONAME ; int RWindowBase::RequestPointerRepeatEvent(class TTimeIntervalMicroSeconds32, class TRect const &, unsigned char)
	call_vector_539 @ 539 NONAME ; int RWsSession::GetExitHighPressureThreshold(void) const
	call_vector_540 @ 540 NONAME ; int RWsSession::SetCloseProximityThresholds(int, int)
	call_vector_541 @ 541 NONAME ; int RWsSession::SetHighPressureThresholds(int, int)
	call_vector_542 @ 542 NONAME ; int RWindowBase::CancelPointerRepeatEventRequest(unsigned char)
	call_vector_543 @ 543 NONAME ; void TWsEvent::InitAdvancedPointerEvent(enum TPointerEvent::TType, unsigned int, class TPoint3D const &, unsigned char)
	call_vector_544 @ 544 NONAME ; int RWsSession::GetExitCloseProximityThreshold(void) const
	call_vector_545 @ 545 NONAME ; void RWindowBase::EnableAdvancedPointers(void)
	call_vector_546 @ 546 NONAME ; void TWsEvent::SetPointerZ(int)
	call_vector_547 @ 547 NONAME ; int TAdvancedPointerEvent::DoGetProximityAndPressure(void) const
	call_vector_548 @ 548 NONAME ; int TAdvancedPointerEvent::DoGetProximity(void) const
	call_vector_549 @ 549 NONAME ; int TAdvancedPointerEvent::DoGetPressure(void) const
	call_vector_550 @ 550 NONAME ; void RWindowGroup::SimulateAdvancedPointerEvent(class TRawEvent)
	call_vector_551 @ 551 NONAME ; int RWsSession::GetEnterHighPressureThreshold(void) const
	call_vector_552 @ 552 NONAME ; int RWsSession::GetEnterCloseProximityThreshold(void) const
	call_vector_553 @ 553 NONAME ; class TAdvancedPointerEvent & TAdvancedPointerEvent::operator=(class TAdvancedPointerEvent const &)
	call_vector_554 @ 554 NONAME ; TAdvancedPointerEvent::TAdvancedPointerEvent(class TAdvancedPointerEvent const &)
	call_vector_555 @ 555 NONAME ; RWsDrawableSource::RWsDrawableSource(void)
	call_vector_556 @ 556 NONAME ; void RWsDrawableSource::Close(void)
	call_vector_557 @ 557 NONAME ; int RWsDrawableSource::Create(class RSgDrawable const &)
	call_vector_558 @ 558 NONAME ; class TSgDrawableId const & RWsDrawableSource::DrawableId(void) const
	call_vector_559 @ 559 NONAME ; void CWindowGc::DrawResource(class TPoint const &, class RWsDrawableSource const &, enum CWindowGc::TGraphicsRotation)
	call_vector_560 @ 560 NONAME ; void CWindowGc::DrawResource(class TRect const &, class RWsDrawableSource const &, enum CWindowGc::TGraphicsRotation)
	call_vector_561 @ 561 NONAME ; void CWindowGc::DrawResource(class TRect const &, class RWsDrawableSource const &, class TRect const &, enum CWindowGc::TGraphicsRotation)
	call_vector_562 @ 562 NONAME ; void CWindowGc::DrawResource(class TRect const &, class RWsDrawableSource const &, class TDesC8 const &)
	call_vector_563 @ 563 NONAME ; int RDirectScreenAccess::Construct(int)
	call_vector_564 @ 564 NONAME ; class CDirectScreenAccess * CDirectScreenAccess::NewL(class RWsSession &, class CWsScreenDevice &, class RWindowBase &, class MDirectScreenAccess &, int)
	call_vector_565 @ 565 NONAME ; int RWsDrawableSource::Create(class RSgDrawable const &, int)
	call_vector_566 @ 566 NONAME ; RWsDrawableSource::RWsDrawableSource(class RWsSession &)
	call_vector_567 @ 567 NONAME ; int RWsDrawableSource::ScreenNumber(void) const
	call_vector_568 @ 568 NONAME ; void * CWsScreenDevice::GetInterface(unsigned int)
	call_vector_569 @ 569 NONAME ; int CWsScreenDevice::IsCurrentModeDynamic(void) const
	call_vector_570 @ 570 NONAME ; int CWsScreenDevice::IsModeDynamic(int) const
	call_vector_571 @ 571 NONAME ; void const * CWindowGc::Interface(class TUid) const
	call_vector_572 @ 572 NONAME ; void * CWindowGc::Interface(class TUid)
	call_vector_573 @ 573 NONAME ; class RWsSession * RWindowTreeNode::Session(void) const
	call_vector_574 @ 574 NONAME ; void RWsSession::HeapSetBurstFail(int, int, int)
	call_vector_575 @ 575 NONAME ; void RWsSession::EnableWindowSizeCacheL(void)
	call_vector_576 @ 576 NONAME ; void RWindowBase::SetSurfaceTransparency(int)
	call_vector_577 @ 577 NONAME ; class TSize RWindowBase::SizeForEgl(void) const
	call_vector_578 @ 578 NONAME ; int RWindowBase::FixNativeOrientation(void)
	call_vector_579 @ 579 NONAME ; void RWindowBase::SetPurpose(int)
	call_vector_580 @ 580 NONAME ; void RWindowBase::SendEffectCommand(int, class TDesC8 const &)
	call_vector_581 @ 581 NONAME ; void RWsSession::SendEffectCommand(int, class TDesC8 const &)
	call_vector_582 @ 582 NONAME ; void RWsSession::RegisterEffect(int, int, class TBuf<256> const &, class TBuf<256> const &, class TBuf<256> const &, unsigned int, class TBitFlagsT<unsigned long>)
	call_vector_583 @ 583 NONAME ; void RWindowBase::OverrideEffects(int, class TBuf<256> const &, class TBuf<256> const &, class TBuf<256> const &, class TBitFlagsT<unsigned long>)
	call_vector_584 @ 584 NONAME ; void RWsSession::OverrideEffects(int, int, class TBuf<256> const &, class TBuf<256> const &, class TBuf<256> const &, class TBitFlagsT<unsigned long>)
	call_vector_585 @ 585 NONAME ; void RWsSession::UnregisterEffect(int, int, unsigned int)
	call_vector_586 @ 586 NONAME ; void RWsSession::UnregisterAllEffects(void)
	call_vector_587 @ 587 NONAME ; void RWsSession::IndicateAppOrientation(enum TRenderOrientation)


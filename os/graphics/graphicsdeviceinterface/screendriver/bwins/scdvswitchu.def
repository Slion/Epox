EXPORTS
	call_vector_1 @ 1 NONAME ; class CFbsDrawDevice * CFbsDrawDevice::NewBitmapDeviceL(class TScreenInfoV01, enum TDisplayMode, int)
	call_vector_2 @ 2 NONAME ; public: static class CFbsDrawDevice * __cdecl CFbsDrawDevice::NewScreenDeviceL(class TScreenInfoV01,enum TDisplayMode)
	call_vector_3 @ 3 NONAME ; private: int __thiscall RHardwareBitmap::Create(enum TDisplayMode,class TSize,class TUid)
	call_vector_4 @ 4 NONAME ; private: void __thiscall RHardwareBitmap::Destroy(void)
	call_vector_5 @ 5 NONAME ; public: static class TGraphicsAcceleratorCaps const * __cdecl CHardwareGraphicsAccelerator::GenericCapabilities(void)
	call_vector_6 @ 6 NONAME ; public: int __thiscall RHardwareBitmap::GetInfo(class TAcceleratedBitmapInfo &)const 
	call_vector_7 @ 7 NONAME ; public: static class CHardwareGraphicsAccelerator * __cdecl CHardwareGraphicsAccelerator::NewL(class RHardwareBitmap)
	call_vector_8 @ 8 NONAME ; private: int __thiscall RHardwareBitmap::SetAsScreenReference(int)
	call_vector_9 @ 9 NONAME ; public: static class CDirectScreenBitmap * __cdecl CDirectScreenBitmap::NewL(void)
	call_vector_10 @ 10 NONAME ; public: static enum TDisplayMode  __cdecl CFbsDrawDevice::DisplayMode16M(void)
	call_vector_11 @ 11 NONAME ; class CFbsDrawDevice * CFbsDrawDevice::NewBitmapDeviceL(class TSize const &, enum TDisplayMode, int)
	call_vector_12 @ 12 NONAME ; class CFbsDrawDevice * CFbsDrawDevice::NewScreenDeviceL(int, enum TDisplayMode)
	call_vector_13 @ 13 NONAME ; class CDirectScreenBitmap * CDirectScreenBitmap::NewL(int)
	call_vector_14 @ 14 NONAME ; class TGraphicsAcceleratorCaps const * CSoftwareGraphicsAccelerator::GenericCapabilities(void)
	call_vector_15 @ 15 NONAME ; class CSoftwareGraphicsAccelerator * CSoftwareGraphicsAccelerator::NewL(class CFbsBitmap *)


[TCMPerformance]
name		=TCMPerformance

//if any of these fields are not present, then the default is to test over all possible configurations 
//except for append, where the default is to append rather than overwrite
//nice to have: change minapiid and maxapiid to an array/list of api ids?


[TESTONE]

//[TESTS TYPES TO RUN]
//testtype = 0 //old testype version
runapicalltests = ETrue 
runoutputplugintests = EFalse
runthroughputtests = EFalse 
runbuffersizetests = EFalse //****to be implemented
runbuffermodetests = EFalse //****to be implemented

//only the (end of buffer fill=start of buffer fill) is calculated for the runoutputplugintests = ETrue.
//only the (end of buffer fill-start of trace call) is calculated for the runthroughputtests  = ETrue.

//[UTRACE POINT RUN CONFIGURATION PARAMETERS FOR APICALLTESTS]
minapiid = 1
maxapiid = 50
pc = 1 //enum is 0=EFalse, 1=ETrue
context = 0 //enum is 0=EFalse, 1=ETrue
testsampleevp =ETrue //this is to test the TAny style trace points with a sample of evp sizes. (<96b, >96b, >>96b)
		     //If this is set as ETrue, the loop over evp field sizes is not carried out
//NB: the following versions are not fully implemented yet. 
//The framework is in place and available for the user to include the evp initialisation in te_tracecontrolcmds.cpp
minevp = 0   //evp=extravariablepayload=data over and above user-specified TUint32
//maxevp = 10240  
evpincrement  = 5120 //only really makes sense to be in multiple of 4 bytes
		  //default is the value corresponding to a hardcoded number of 10 increments between min and max
	

//[ULOGGER RUN CONFIGURATION PARAMETERS]
testwithclassificationfilteringenabled = ETrue  
testwithmoduleidfilteringenabled = ETrue  
testwithclassificationfiltermatchestrace = ETrue//NB:if utrace not compiled in .mmp makes no sense!
testwithmoduleidfiltermatchestrace = EFalse//NB:if utrace not compiled in .mmp makes no sense!

//[RUN CONFIGURATION PARAMETERS FOR APICALLTEST OPTIONS]
//this option is here merely to give the option of reducing potential unnecessary testing of the system 
//these particular tests are very intensive
minexecutiontime = ETrue
reasonablemaxexecutiontime = ETrue


//[RUN CONFIGURATION PARAMETERS FOR PLUGINTEST AND THROUGHPUTTEST OPTIONS]
plugintestused = uloggerfileplugin
plugintestconfigurationkey = output_path 
plugintestconfigurationvalue = c:\logs\UPTPluginTest.utf  
plugintestdatasize = 1024
plugintestiterations = 10   


//[RUN CONFIGURATION PARAMETERS FOR BUFFERTEST OPTIONS]
buffertestpluginused = serial //****to be implemented 
buffertestpluginconfigurationkey = output_port//****to be implemented 
buffertestpluginconfigurationvalue = 3//****to be implemented 
buffertestdatasize = 100 //****to be implemented 
buffertestdnssize = 100 //****to be implemented 
buffertestbuffersize //****to be implemented 


//[OTHER GENERAL TEST RUN CONFIGURATION OPTIONS]						   
append = ETrue
testtimeout = 100000 //****to be implemented if necessary - i dont think it is
		     //much like the TEF timeout - this will force the test to end if excedes a certain time 
		     //then step onto next configuration
		     //this will need to be linked to TEF timeout??? or is TEF timeout enough - think about this





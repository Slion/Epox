// Default Ini file for CommsDebugUtility (CDU).
// CDU will search all drivers in the "\log" folder for this file (order: Y to A then Z).
// To use, specify:
//  * one of the two media types (file or RDebug)
//  * any number of tags to log
// Optional configuration:
//  * "Synchronous" for immediate logging (otherwise logs are buffered for speed and written periodically)
//  * "Win32Debug" to enable writing of the logs to the Win32Debug port in addition to the media
//  * "LOGPATH" to specify the output drive and file - designed for writing to a removable drive.
//
// This file lists a number of known tags - to enable a listed tag, remove the 2 forward-slashes before the "LOG" token.
// Additional tags can be added using the format "LOG <tag> <subtag>" where <subtag> can equal the "*" wildcard.
// Tokens and tags are not case sensitive.
// If CDU detects an error in this file, it will normally report this to the C:\logs\log.txt file.
// Please see ComsDbg_How_To_Document.doc ("CommsDebugUtility How-To Document" in the Symbian OS Library) for more information.
//
MEDIA FILE
LOGPATH c:\logs
//MEDIA RDEBUG
//MEDIA SERIAL::1    // No longer supported
//MEDIA SERIAL::2    // No longer supported

Synchronous
//Win32Debug

//LOG c32start *     // commsrootserver.iby   comms-infras\rootserver\configurator  "RootServer configurator"
//LOG commsfw *      //                       comms-infras\commsfw                  "Comms channels & utils"
//LOG esock *        // esock_core.iby        comms-infras\esock                    "Network TCP/IP Socket Manager"
//LOG nifman *       // nifman.iby            comms-infras\nifman                   "Network Interface Manager"
//LOG rootserver *   // commsrootserver.iby   comms-infras\rootserver               "component which manages all Comms threads"
//LOG mbufmgr *      // mbufmgr.iby           comss-infras\mbufmgr                  "Buffer Manager for Protocols"
//LOG rsmodule *     //          -- rootserver, esock and c32 --                    "Generic RootServer module logs"
//LOG rsmodule leak  //     "Memory leak seen at exit of an RSModule. May be logged by RootServer or module code (eg ESockSvr, C32)"
//----------------------
//LOG commsdat *     // commsdat.iby          Comms-infras\commsdat                 "Comms Database"
//LOG commdbshim *   // commdb.iby            Comms-infras\commdbshim               "Commdb shim component used to shim commdb API over commsdat API"
//----------------------
//LOG ConnProvd *    //                       networking\ConnProv\ReferenceCPR  & networking\ip\Version1\referencecpr  "Ref Connection provider"
//LOG conn *  	     // ipcpr.iby shimcpr.iby networking\ConnProv\   & networking\ip\Version1    "IP, ShimIP & Ref Connection providers"
//LOG subconn *      // ipscpr.iby            networking\SubConnProv & networking\umts\version1  "Networking SubConnection providers"
//----------------------
//LOG connserv *     //                       comms-infras\esock\ssock              "RConnectionServ client/session logging"
//LOG tier *         //                       comms-infras\esock\coreproviders      "Tier Manager e.g. Access Point Query/Notification"
//----------------------
//LOG dhcp  *        // dhcpserv.iby          networking\dhcp
//LOG guqos *        // guqos.iby             networking\guqos                      "GPRS/UMTS QoS"
//LOG ipevent *      //                                                             "IP Event Notifier" - possibly redundant"
//LOG netcon *       // netcon.iby            networking\netcon                     "Network Controller - Nifman plugin to select IAP"
//LOG networking *   //                       networking\*                          "Generic Networking components"
//LOG ssl *          // tls.iby               networking\tls                        "Transport Layer Security"
//LOG telnet *       // networking/telnet_e
//----------------------
//LOG ppp *          // ppp.iby               networking\ppp                        "ppp.nif: Transport for packet/circuit switched data connection (using PPP)"
//LOG tcpdump *      // ppp.iby               networking\ppp                        "binary dump of packet data (use splitlog tool to generate ethereal friendly file); all packets tranfered to/from the ppp interface"
//LOG rawip *        // rawipnif.iby          networking\rawipnif                   "Transport for packet switched data connection"
//LOG c32bca *       // c32bca.iby            networking\basebandadaptation\c32bca  "Abstraction layer for interfact between *.nif and data channel"
//----------------------
//LOG ethernet *     // ether802.iby          networking\ether802                   "Ethernet connection"
//LOG netdial *	     // csd.iby               networking\csdagt                     "Circuit switched data connection control: Agent that supports multiple connections simultaneously (outgoing or incoming or direct)"
//LOG psd *          // psdagt.iby            networking\psdagt                     "Packet switched data connection control: agent that supports multiple connections simultaneously"
//LOG spud *         // spud.iby              networking\spud                       "Connection control for 3/2.5G data connection"
//----------------------
//LOG csdagx *	     // deprecated - Agent Extension Plugin(AGX) which supported circuit switched connections on a GSM and terrestrial network
//LOG psdagx *	     // deprecated - PSD AGX that supported packet switched connections on a GPRS or CDMA2000 network
//----------------------
//LOG bt *           // bluetooth.iby         bluetooth\          buildromMacro=__BT_DEBUG__  "See common/generic/bluetooth/latest/bluetooth/logger/generic/public/components.h for finer grain logging control"
//LOG btpan *        // btpan.iby             bluetooth\profiles\pan\panagt, panhelpersvr, bnep   "Bluetooth PAN profile agent, helper server and packet driver"
//LOG ir *           // irda.iby              infra-red\          buildromMacro=__IRDA_DEBUG__  "Infra-red"
//LOG obex *	     // obexprotocol.iby      obex\               buildromMacro=__OBEX_DEBUG__  "Framework for protocols that require wireless discovery."
//----------------------
//LOG phbksync *     // phbksync.iby          telephony\phbksync                    "Phone book synchroniser"
//LOG etel *         // etel.iby              telephony\etel*                       "ETel Server logging"
//----------------------
//LOG sws *          // wapmessage.iby wapstack.iby    wap-stack\                   "Shortened Wap Stack"
//----------------------
//LOG C32SerComms *  // c32.iby               Ser-comms\c32      "Log tag introduced in v9.5, including ECUART but excluding Loopback CSY which still uses its own logging system"
//----------------------
//LOG inet6 tcpip6   // TCPIP stack : networking/6to4 networking/inhook6 networking/tcpip6
//LOG inet6 dnd      // DNS resolution daemon : networking/dnd 

//LOG TestResults *  //            used by some older comms tests (tqueue, tnetcon and tnetconoom). Possibly redundant.
//LOG Ipsec *        // Ipsec component: networking/ipsec
